// Generated by @wagmi/cli@0.1.14 on 5/12/2023 at 9:44:23 AM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Web3Assets
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const web3AssetsABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [{ name: '_owner', internalType: 'address', type: 'address' }] },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'ownerCandidate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnerUpdateInitiated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'confirmOwner', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'input', internalType: 'bytes', type: 'bytes' }],
    name: 'decode',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'position', internalType: 'bytes32', type: 'bytes32' }],
    name: 'get',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'renounceOwner', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'position', internalType: 'bytes32', type: 'bytes32' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
    name: 'set',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Card
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cardABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'erc721Storage', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'AlreadyMinted' },
  { type: 'error', inputs: [], name: 'InvalidRecipient' },
  { type: 'error', inputs: [], name: 'NewOwnerIsZeroAddress' },
  { type: 'error', inputs: [], name: 'NoHandoverRequest' },
  { type: 'error', inputs: [], name: 'NotAuthorized' },
  { type: 'error', inputs: [], name: 'NotMinted' },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  { type: 'error', inputs: [], name: 'UnsafeRecipient' },
  { type: 'error', inputs: [], name: 'WrongFrom' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'erc721Storage', internalType: 'address', type: 'address', indexed: false }],
    name: 'ERC721StorageUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnershipHandoverCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnershipHandoverRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'roles', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'RolesUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'belongsTo',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'cancelOwnershipHandover', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address' }],
    name: 'completeOwnershipHandover',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'contractURI', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getERC721Storage',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRoles',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasAllRoles',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasAnyRole',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'mint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
    name: 'ordinalsFromRoles',
    outputs: [{ name: 'ordinals', internalType: 'uint8[]', type: 'uint8[]' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: 'result', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address' }],
    name: 'ownershipHandoverExpiresAt',
    outputs: [{ name: 'result', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ownershipHandoverValidFor',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'preview',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'color', internalType: 'uint8', type: 'uint8' },
      { name: 'emoji', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'previewWithStyle',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
    name: 'renounceRoles',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'requestOwnershipHandover', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRoles',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'ordinals', internalType: 'uint8[]', type: 'uint8[]' }],
    name: 'rolesFromOrdinals',
    outputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'rolesOf',
    outputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'erc721Storage', internalType: 'address', type: 'address' }],
    name: 'setStorage',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'totalSupply', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CardActivator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cardActivatorABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'admin', internalType: 'address', type: 'address' },
      { name: '_erc721KInstance', internalType: 'address', type: 'address' },
      { name: '_erc721KDesignInstance', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'activate',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'color', internalType: 'uint8', type: 'uint8' },
      { name: 'emoji', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'activateWithStyle',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'erc721KDesignInstance',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'erc721KInstance',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'release',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setStyleUpgradeCost',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CardDesign
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cardDesignABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [{ name: '_owner', internalType: 'address', type: 'address' }] },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'ownerCandidate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnerUpdateInitiated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'confirmOwner', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'erc721KActivatorInstance',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getColor',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'colorId', internalType: 'uint8', type: 'uint8' }],
    name: 'getColorFromMap',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getEmoji',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'emojiId', internalType: 'uint8', type: 'uint8' }],
    name: 'getEmojiFromMap',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'renounceOwner', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'color', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'setColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'color', internalType: 'uint8', type: 'uint8' },
      { name: 'emoji', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'setDuringMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_erc721KActivatorInstance', internalType: 'address', type: 'address' }],
    name: 'setERC721KActivatorInstance',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'emoji', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'setEmoji',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_styleUpgradeCost', internalType: 'uint256', type: 'uint256' }],
    name: 'setStyleUpgradeCost',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CardTraits
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cardTraitsABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'input', internalType: 'bytes', type: 'bytes' }],
    name: 'fetch',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CardStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cardStorageABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_svgRender_', internalType: 'address', type: 'address' },
      { name: '_traitsFetch_', internalType: 'address', type: 'address' },
      {
        name: '_contractURI_',
        internalType: 'struct ERC721Storage.ContractURI',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'image', internalType: 'string', type: 'string' },
          { name: 'externalLink', internalType: 'string', type: 'string' },
          { name: 'sellerFeeBasisPoints', internalType: 'string', type: 'string' },
          { name: 'feeRecipient', internalType: 'string', type: 'string' },
        ],
      },
      { name: '_erc20TWABInstance', internalType: 'address', type: 'address' },
      { name: '_erc721KDesignInstance', internalType: 'address', type: 'address' },
      { name: '_assetUnderlying', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'NewOwnerIsZeroAddress' },
  { type: 'error', inputs: [], name: 'NoHandoverRequest' },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractURI',
        internalType: 'struct ERC721Storage.ContractURI',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'image', internalType: 'string', type: 'string' },
          { name: 'externalLink', internalType: 'string', type: 'string' },
          { name: 'sellerFeeBasisPoints', internalType: 'string', type: 'string' },
          { name: 'feeRecipient', internalType: 'string', type: 'string' },
        ],
        indexed: false,
      },
    ],
    name: 'ContractURIUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnershipHandoverCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnershipHandoverRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'roles', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'RolesUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'svgRender', internalType: 'address', type: 'address', indexed: false }],
    name: 'SvgRenderUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'traitsFetch', internalType: 'address', type: 'address', indexed: false }],
    name: 'TraitsFetchUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'assetUnderlying',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'cancelOwnershipHandover', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address' }],
    name: 'completeOwnershipHandover',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'constructContractURI',
    outputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'input0', internalType: 'bytes', type: 'bytes' },
      { name: 'input1', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'constructTokenURI',
    outputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'erc20TWABInstance',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'erc721KDesignInstance',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'erc721KInstance',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getContractDescription',
    outputs: [
      {
        name: '',
        internalType: 'struct ERC721Storage.ContractURI',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'image', internalType: 'string', type: 'string' },
          { name: 'externalLink', internalType: 'string', type: 'string' },
          { name: 'sellerFeeBasisPoints', internalType: 'string', type: 'string' },
          { name: 'feeRecipient', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getERC721KRender',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getERC72KTraits',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getImageBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getPreview',
    outputs: [{ name: 'imageData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'color', internalType: 'uint8', type: 'uint8' },
      { name: 'emoji', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'getPreviewWithStyle',
    outputs: [{ name: 'bytesData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getTraitsBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRoles',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasAllRoles',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasAnyRole',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
    name: 'ordinalsFromRoles',
    outputs: [{ name: 'ordinals', internalType: 'uint8[]', type: 'uint8[]' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: 'result', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address' }],
    name: 'ownershipHandoverExpiresAt',
    outputs: [{ name: 'result', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ownershipHandoverValidFor',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'input', internalType: 'bytes', type: 'bytes' }],
    name: 'render',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
    name: 'renounceRoles',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'requestOwnershipHandover', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRoles',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'ordinals', internalType: 'uint8[]', type: 'uint8[]' }],
    name: 'rolesFromOrdinals',
    outputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'rolesOf',
    outputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'contractURI',
        internalType: 'struct ERC721Storage.ContractURI',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'image', internalType: 'string', type: 'string' },
          { name: 'externalLink', internalType: 'string', type: 'string' },
          { name: 'sellerFeeBasisPoints', internalType: 'string', type: 'string' },
          { name: 'feeRecipient', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'setContractURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_erc20TWABInstance', internalType: 'address', type: 'address' }],
    name: 'setERC20TWABInstance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_erc721KDesignInstance', internalType: 'address', type: 'address' }],
    name: 'setERC721KDesignInstance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_erc721KInstance', internalType: 'address', type: 'address' }],
    name: 'setERC721KInstance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'svgRender', internalType: 'address', type: 'address' }],
    name: 'setSvgRender',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'traitsFetch', internalType: 'address', type: 'address' }],
    name: 'setTraitsFetch',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20TWAB
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20TwabABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Delegated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newTotalSupplyTwab',
        internalType: 'struct ObservationLib.Observation',
        type: 'tuple',
        components: [
          { name: 'amount', internalType: 'uint224', type: 'uint224' },
          { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
        ],
        indexed: false,
      },
    ],
    name: 'NewTotalSupplyTwab',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'newTwab',
        internalType: 'struct ObservationLib.Observation',
        type: 'tuple',
        components: [
          { name: 'amount', internalType: 'uint224', type: 'uint224' },
          { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
        ],
        indexed: false,
      },
    ],
    name: 'NewUserTwab',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'decimals', outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_user', internalType: 'address', type: 'address' }],
    name: 'delegateOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_user', internalType: 'address', type: 'address' },
      { name: '_newDelegate', internalType: 'address', type: 'address' },
      { name: '_deadline', internalType: 'uint256', type: 'uint256' },
      { name: '_v', internalType: 'uint8', type: 'uint8' },
      { name: '_r', internalType: 'bytes32', type: 'bytes32' },
      { name: '_s', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateWithSignature',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_user', internalType: 'address', type: 'address' }],
    name: 'getAccountDetails',
    outputs: [
      {
        name: '',
        internalType: 'struct TwabLib.AccountDetails',
        type: 'tuple',
        components: [
          { name: 'balance', internalType: 'uint208', type: 'uint208' },
          { name: 'nextTwabIndex', internalType: 'uint24', type: 'uint24' },
          { name: 'cardinality', internalType: 'uint24', type: 'uint24' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_user', internalType: 'address', type: 'address' },
      { name: '_startTime', internalType: 'uint64', type: 'uint64' },
      { name: '_endTime', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'getAverageBalanceBetween',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_user', internalType: 'address', type: 'address' },
      { name: '_startTimes', internalType: 'uint64[]', type: 'uint64[]' },
      { name: '_endTimes', internalType: 'uint64[]', type: 'uint64[]' },
    ],
    name: 'getAverageBalancesBetween',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_startTimes', internalType: 'uint64[]', type: 'uint64[]' },
      { name: '_endTimes', internalType: 'uint64[]', type: 'uint64[]' },
    ],
    name: 'getAverageTotalSuppliesBetween',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_user', internalType: 'address', type: 'address' },
      { name: '_target', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'getBalanceAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_user', internalType: 'address', type: 'address' },
      { name: '_targets', internalType: 'uint64[]', type: 'uint64[]' },
    ],
    name: 'getBalancesAt',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_targets', internalType: 'uint64[]', type: 'uint64[]' }],
    name: 'getTotalSuppliesAt',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_target', internalType: 'uint64', type: 'uint64' }],
    name: 'getTotalSupplyAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_user', internalType: 'address', type: 'address' },
      { name: '_index', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'getTwab',
    outputs: [
      {
        name: '',
        internalType: 'struct ObservationLib.Observation',
        type: 'tuple',
        components: [
          { name: 'amount', internalType: 'uint224', type: 'uint224' },
          { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'totalSupply', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISVGModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const isvgModuleABI = [
  { stateMutability: 'view', type: 'function', inputs: [], name: 'getEncoding', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'input', internalType: 'bytes', type: 'bytes' }],
    name: 'render',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISVGRender
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const isvgRenderABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'input', internalType: 'bytes', type: 'bytes' }],
    name: 'render',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IStream
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iStreamABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'getData',
    outputs: [
      { name: 'keys', internalType: 'string[]', type: 'string[]' },
      { name: 'values', internalType: 'string[]', type: 'string[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_address', internalType: 'address', type: 'address' },
      { name: '_key', internalType: 'string', type: 'string' },
    ],
    name: 'getValue',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITraitsFetch
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTraitsFetchABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'input', internalType: 'bytes', type: 'bytes' }],
    name: 'fetch',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Owned
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownedABI = [
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OwnedThreeStep
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownedThreeStepABI = [
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'ownerCandidate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnerUpdateInitiated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'confirmOwner', outputs: [] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'renounceOwner', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ObservationLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const observationLibABI = [
  { stateMutability: 'view', type: 'function', inputs: [], name: 'MAX_CARDINALITY', outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }] },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TwabLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const twabLibABI = [
  { stateMutability: 'view', type: 'function', inputs: [], name: 'MAX_CARDINALITY', outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }] },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CREATE3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const create3ABI = [
  { type: 'error', inputs: [], name: 'DeploymentFailed' },
  { type: 'error', inputs: [], name: 'InitializationFailed' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EIP712
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eip712ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FixedPointMathLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const fixedPointMathLibABI = [
  { type: 'error', inputs: [], name: 'DivFailed' },
  { type: 'error', inputs: [], name: 'DivWadFailed' },
  { type: 'error', inputs: [], name: 'ExpOverflow' },
  { type: 'error', inputs: [], name: 'FactorialOverflow' },
  { type: 'error', inputs: [], name: 'LnWadUndefined' },
  { type: 'error', inputs: [], name: 'Log2Undefined' },
  { type: 'error', inputs: [], name: 'MulDivFailed' },
  { type: 'error', inputs: [], name: 'MulWadFailed' },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'x', internalType: 'uint256', type: 'uint256' }],
    name: 'factorial',
    outputs: [{ name: 'result', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LibClone
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const libCloneABI = [{ type: 'error', inputs: [], name: 'DeploymentFailed' }] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LibString
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const libStringABI = [{ type: 'error', inputs: [], name: 'HexLengthInsufficient' }] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const permitABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'sig', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'allowed', internalType: 'bool', type: 'bool' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Multicallable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const multicallableABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReentrancyGuard
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const reentrancyGuardABI = [{ type: 'error', inputs: [], name: 'Reentrancy' }] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SSTORE2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sstore2ABI = [
  { type: 'error', inputs: [], name: 'DeploymentFailed' },
  { type: 'error', inputs: [], name: 'InvalidPointer' },
  { type: 'error', inputs: [], name: 'ReadOutOfBounds' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeCastLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeCastLibABI = [{ type: 'error', inputs: [], name: 'OverFlow' }] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeTransferLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeTransferLibABI = [
  { type: 'error', inputs: [], name: 'ApproveFailed' },
  { type: 'error', inputs: [], name: 'ETHTransferFailed' },
  { type: 'error', inputs: [], name: 'TransferFailed' },
  { type: 'error', inputs: [], name: 'TransferFromFailed' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeMulticallable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeMulticallableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SelfPermit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const selfPermitABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract Permit', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract Permit', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermit1155',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract Permit', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'sig', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'selfPermit721',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract Permit', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermit721',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract Permit', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermitAllowed',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Storage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721StorageABI = [
  { type: 'error', inputs: [], name: 'NewOwnerIsZeroAddress' },
  { type: 'error', inputs: [], name: 'NoHandoverRequest' },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractURI',
        internalType: 'struct ERC721Storage.ContractURI',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'image', internalType: 'string', type: 'string' },
          { name: 'externalLink', internalType: 'string', type: 'string' },
          { name: 'sellerFeeBasisPoints', internalType: 'string', type: 'string' },
          { name: 'feeRecipient', internalType: 'string', type: 'string' },
        ],
        indexed: false,
      },
    ],
    name: 'ContractURIUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnershipHandoverCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnershipHandoverRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'roles', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'RolesUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'svgRender', internalType: 'address', type: 'address', indexed: false }],
    name: 'SvgRenderUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'traitsFetch', internalType: 'address', type: 'address', indexed: false }],
    name: 'TraitsFetchUpdated',
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'cancelOwnershipHandover', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address' }],
    name: 'completeOwnershipHandover',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'constructContractURI',
    outputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'input0', internalType: 'bytes', type: 'bytes' },
      { name: 'input1', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'constructTokenURI',
    outputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getContractDescription',
    outputs: [
      {
        name: '',
        internalType: 'struct ERC721Storage.ContractURI',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'image', internalType: 'string', type: 'string' },
          { name: 'externalLink', internalType: 'string', type: 'string' },
          { name: 'sellerFeeBasisPoints', internalType: 'string', type: 'string' },
          { name: 'feeRecipient', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getERC721KRender',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getERC72KTraits',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRoles',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasAllRoles',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasAnyRole',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
    name: 'ordinalsFromRoles',
    outputs: [{ name: 'ordinals', internalType: 'uint8[]', type: 'uint8[]' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: 'result', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address' }],
    name: 'ownershipHandoverExpiresAt',
    outputs: [{ name: 'result', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ownershipHandoverValidFor',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'input', internalType: 'bytes', type: 'bytes' }],
    name: 'render',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
    name: 'renounceRoles',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'requestOwnershipHandover', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRoles',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'ordinals', internalType: 'uint8[]', type: 'uint8[]' }],
    name: 'rolesFromOrdinals',
    outputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'rolesOf',
    outputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'contractURI',
        internalType: 'struct ERC721Storage.ContractURI',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'image', internalType: 'string', type: 'string' },
          { name: 'externalLink', internalType: 'string', type: 'string' },
          { name: 'sellerFeeBasisPoints', internalType: 'string', type: 'string' },
          { name: 'feeRecipient', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'setContractURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'svgRender', internalType: 'address', type: 'address' }],
    name: 'setSvgRender',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'traitsFetch', internalType: 'address', type: 'address' }],
    name: 'setTraitsFetch',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721K
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721KABI = [
  { type: 'error', inputs: [], name: 'AlreadyMinted' },
  { type: 'error', inputs: [], name: 'InvalidRecipient' },
  { type: 'error', inputs: [], name: 'NewOwnerIsZeroAddress' },
  { type: 'error', inputs: [], name: 'NoHandoverRequest' },
  { type: 'error', inputs: [], name: 'NotAuthorized' },
  { type: 'error', inputs: [], name: 'NotMinted' },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  { type: 'error', inputs: [], name: 'UnsafeRecipient' },
  { type: 'error', inputs: [], name: 'WrongFrom' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'erc721Storage', internalType: 'address', type: 'address', indexed: false }],
    name: 'ERC721StorageUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnershipHandoverCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnershipHandoverRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'roles', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'RolesUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'cancelOwnershipHandover', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address' }],
    name: 'completeOwnershipHandover',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'contractURI', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getERC721Storage',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRoles',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasAllRoles',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasAnyRole',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
    name: 'ordinalsFromRoles',
    outputs: [{ name: 'ordinals', internalType: 'uint8[]', type: 'uint8[]' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: 'result', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address' }],
    name: 'ownershipHandoverExpiresAt',
    outputs: [{ name: 'result', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ownershipHandoverValidFor',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
    name: 'renounceRoles',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'requestOwnershipHandover', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRoles',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'ordinals', internalType: 'uint8[]', type: 'uint8[]' }],
    name: 'rolesFromOrdinals',
    outputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'rolesOf',
    outputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'erc721Storage', internalType: 'address', type: 'address' }],
    name: 'setStorage',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'totalSupply', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  { type: 'error', inputs: [], name: 'AlreadyMinted' },
  { type: 'error', inputs: [], name: 'InvalidRecipient' },
  { type: 'error', inputs: [], name: 'NotAuthorized' },
  { type: 'error', inputs: [], name: 'NotMinted' },
  { type: 'error', inputs: [], name: 'UnsafeRecipient' },
  { type: 'error', inputs: [], name: 'WrongFrom' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721TokenReceiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721TokenReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721KTraits
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721KTraitsABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'input', internalType: 'bytes', type: 'bytes' }],
    name: 'fetch',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721KImage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721KImageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'input', internalType: 'bytes', type: 'bytes' }],
    name: 'render',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'decimals', outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'totalSupply', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'totalSupply', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OwnedRoles
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownedRolesABI = [
  { type: 'error', inputs: [], name: 'NewOwnerIsZeroAddress' },
  { type: 'error', inputs: [], name: 'NoHandoverRequest' },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnershipHandoverCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnershipHandoverRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'roles', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'RolesUpdated',
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'cancelOwnershipHandover', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address' }],
    name: 'completeOwnershipHandover',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'grantRoles',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasAllRoles',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasAnyRole',
    outputs: [{ name: 'result', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
    name: 'ordinalsFromRoles',
    outputs: [{ name: 'ordinals', internalType: 'uint8[]', type: 'uint8[]' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: 'result', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address' }],
    name: 'ownershipHandoverExpiresAt',
    outputs: [{ name: 'result', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ownershipHandoverValidFor',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
    name: 'renounceRoles',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'requestOwnershipHandover', outputs: [] },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'roles', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeRoles',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'ordinals', internalType: 'uint8[]', type: 'uint8[]' }],
    name: 'rolesFromOrdinals',
    outputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'rolesOf',
    outputs: [{ name: 'roles', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PermitABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'decimals', outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'totalSupply', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'decimals', outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'totalSupply', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link web3AssetsABI}__.
 */
export function useWeb3Assets(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: web3AssetsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link web3AssetsABI}__.
 */
export function useWeb3AssetsRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof web3AssetsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof web3AssetsABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: web3AssetsABI, ...config } as UseContractReadConfig<typeof web3AssetsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link web3AssetsABI}__ and `functionName` set to `"decode"`.
 */
export function useWeb3AssetsDecode<TSelectData = ReadContractResult<typeof web3AssetsABI, 'decode'>>(
  config: Omit<UseContractReadConfig<typeof web3AssetsABI, 'decode', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: web3AssetsABI, functionName: 'decode', ...config } as UseContractReadConfig<
    typeof web3AssetsABI,
    'decode',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link web3AssetsABI}__ and `functionName` set to `"get"`.
 */
export function useWeb3AssetsGet<TSelectData = ReadContractResult<typeof web3AssetsABI, 'get'>>(
  config: Omit<UseContractReadConfig<typeof web3AssetsABI, 'get', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: web3AssetsABI, functionName: 'get', ...config } as UseContractReadConfig<typeof web3AssetsABI, 'get', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link web3AssetsABI}__ and `functionName` set to `"owner"`.
 */
export function useWeb3AssetsOwner<TSelectData = ReadContractResult<typeof web3AssetsABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof web3AssetsABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: web3AssetsABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof web3AssetsABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link web3AssetsABI}__.
 */
export function useWeb3AssetsWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof web3AssetsABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof web3AssetsABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof web3AssetsABI, TFunctionName>({ abi: web3AssetsABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link web3AssetsABI}__ and `functionName` set to `"confirmOwner"`.
 */
export function useWeb3AssetsConfirmOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof web3AssetsABI, 'confirmOwner'>['abi'], 'confirmOwner'> & {
        functionName?: 'confirmOwner'
      }
    : UseContractWriteConfig<TMode, typeof web3AssetsABI, 'confirmOwner'> & {
        abi?: never
        functionName?: 'confirmOwner'
      } = {} as any
) {
  return useContractWrite<TMode, typeof web3AssetsABI, 'confirmOwner'>({ abi: web3AssetsABI, functionName: 'confirmOwner', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link web3AssetsABI}__ and `functionName` set to `"renounceOwner"`.
 */
export function useWeb3AssetsRenounceOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof web3AssetsABI, 'renounceOwner'>['abi'], 'renounceOwner'> & {
        functionName?: 'renounceOwner'
      }
    : UseContractWriteConfig<TMode, typeof web3AssetsABI, 'renounceOwner'> & {
        abi?: never
        functionName?: 'renounceOwner'
      } = {} as any
) {
  return useContractWrite<TMode, typeof web3AssetsABI, 'renounceOwner'>({ abi: web3AssetsABI, functionName: 'renounceOwner', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link web3AssetsABI}__ and `functionName` set to `"set"`.
 */
export function useWeb3AssetsSet<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof web3AssetsABI, 'set'>['abi'], 'set'> & { functionName?: 'set' }
    : UseContractWriteConfig<TMode, typeof web3AssetsABI, 'set'> & {
        abi?: never
        functionName?: 'set'
      } = {} as any
) {
  return useContractWrite<TMode, typeof web3AssetsABI, 'set'>({ abi: web3AssetsABI, functionName: 'set', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link web3AssetsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useWeb3AssetsTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof web3AssetsABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof web3AssetsABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof web3AssetsABI, 'transferOwnership'>({
    abi: web3AssetsABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link web3AssetsABI}__.
 */
export function usePrepareWeb3AssetsWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof web3AssetsABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: web3AssetsABI, ...config } as UsePrepareContractWriteConfig<typeof web3AssetsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link web3AssetsABI}__ and `functionName` set to `"confirmOwner"`.
 */
export function usePrepareWeb3AssetsConfirmOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof web3AssetsABI, 'confirmOwner'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: web3AssetsABI, functionName: 'confirmOwner', ...config } as UsePrepareContractWriteConfig<
    typeof web3AssetsABI,
    'confirmOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link web3AssetsABI}__ and `functionName` set to `"renounceOwner"`.
 */
export function usePrepareWeb3AssetsRenounceOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof web3AssetsABI, 'renounceOwner'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: web3AssetsABI, functionName: 'renounceOwner', ...config } as UsePrepareContractWriteConfig<
    typeof web3AssetsABI,
    'renounceOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link web3AssetsABI}__ and `functionName` set to `"set"`.
 */
export function usePrepareWeb3AssetsSet(
  config: Omit<UsePrepareContractWriteConfig<typeof web3AssetsABI, 'set'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: web3AssetsABI, functionName: 'set', ...config } as UsePrepareContractWriteConfig<typeof web3AssetsABI, 'set'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link web3AssetsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareWeb3AssetsTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof web3AssetsABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: web3AssetsABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof web3AssetsABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link web3AssetsABI}__.
 */
export function useWeb3AssetsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof web3AssetsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: web3AssetsABI, ...config } as UseContractEventConfig<typeof web3AssetsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link web3AssetsABI}__ and `eventName` set to `"OwnerUpdateInitiated"`.
 */
export function useWeb3AssetsOwnerUpdateInitiatedEvent(
  config: Omit<UseContractEventConfig<typeof web3AssetsABI, 'OwnerUpdateInitiated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: web3AssetsABI, eventName: 'OwnerUpdateInitiated', ...config } as UseContractEventConfig<
    typeof web3AssetsABI,
    'OwnerUpdateInitiated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link web3AssetsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useWeb3AssetsOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof web3AssetsABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: web3AssetsABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof web3AssetsABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link cardABI}__.
 */
export function useCard(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: cardABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__.
 */
export function useCardRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof cardABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof cardABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: cardABI, ...config } as UseContractReadConfig<typeof cardABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCardBalanceOf<TSelectData = ReadContractResult<typeof cardABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<typeof cardABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"belongsTo"`.
 */
export function useCardBelongsTo<TSelectData = ReadContractResult<typeof cardABI, 'belongsTo'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'belongsTo', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'belongsTo', ...config } as UseContractReadConfig<typeof cardABI, 'belongsTo', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"contractURI"`.
 */
export function useCardContractUri<TSelectData = ReadContractResult<typeof cardABI, 'contractURI'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'contractURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'contractURI', ...config } as UseContractReadConfig<
    typeof cardABI,
    'contractURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"getApproved"`.
 */
export function useCardGetApproved<TSelectData = ReadContractResult<typeof cardABI, 'getApproved'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'getApproved', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof cardABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"getERC721Storage"`.
 */
export function useCardGetErc721Storage<TSelectData = ReadContractResult<typeof cardABI, 'getERC721Storage'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'getERC721Storage', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'getERC721Storage', ...config } as UseContractReadConfig<
    typeof cardABI,
    'getERC721Storage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"hasAllRoles"`.
 */
export function useCardHasAllRoles<TSelectData = ReadContractResult<typeof cardABI, 'hasAllRoles'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'hasAllRoles', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'hasAllRoles', ...config } as UseContractReadConfig<
    typeof cardABI,
    'hasAllRoles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"hasAnyRole"`.
 */
export function useCardHasAnyRole<TSelectData = ReadContractResult<typeof cardABI, 'hasAnyRole'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'hasAnyRole', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'hasAnyRole', ...config } as UseContractReadConfig<typeof cardABI, 'hasAnyRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useCardIsApprovedForAll<TSelectData = ReadContractResult<typeof cardABI, 'isApprovedForAll'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'isApprovedForAll', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof cardABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"name"`.
 */
export function useCardName<TSelectData = ReadContractResult<typeof cardABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'name', ...config } as UseContractReadConfig<typeof cardABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"ordinalsFromRoles"`.
 */
export function useCardOrdinalsFromRoles<TSelectData = ReadContractResult<typeof cardABI, 'ordinalsFromRoles'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'ordinalsFromRoles', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'ordinalsFromRoles', ...config } as UseContractReadConfig<
    typeof cardABI,
    'ordinalsFromRoles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"owner"`.
 */
export function useCardOwner<TSelectData = ReadContractResult<typeof cardABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'owner', ...config } as UseContractReadConfig<typeof cardABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useCardOwnerOf<TSelectData = ReadContractResult<typeof cardABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<typeof cardABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"ownershipHandoverExpiresAt"`.
 */
export function useCardOwnershipHandoverExpiresAt<TSelectData = ReadContractResult<typeof cardABI, 'ownershipHandoverExpiresAt'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'ownershipHandoverExpiresAt', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'ownershipHandoverExpiresAt', ...config } as UseContractReadConfig<
    typeof cardABI,
    'ownershipHandoverExpiresAt',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"ownershipHandoverValidFor"`.
 */
export function useCardOwnershipHandoverValidFor<TSelectData = ReadContractResult<typeof cardABI, 'ownershipHandoverValidFor'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'ownershipHandoverValidFor', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'ownershipHandoverValidFor', ...config } as UseContractReadConfig<
    typeof cardABI,
    'ownershipHandoverValidFor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"preview"`.
 */
export function useCardPreview<TSelectData = ReadContractResult<typeof cardABI, 'preview'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'preview', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'preview', ...config } as UseContractReadConfig<typeof cardABI, 'preview', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"previewWithStyle"`.
 */
export function useCardPreviewWithStyle<TSelectData = ReadContractResult<typeof cardABI, 'previewWithStyle'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'previewWithStyle', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'previewWithStyle', ...config } as UseContractReadConfig<
    typeof cardABI,
    'previewWithStyle',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"rolesFromOrdinals"`.
 */
export function useCardRolesFromOrdinals<TSelectData = ReadContractResult<typeof cardABI, 'rolesFromOrdinals'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'rolesFromOrdinals', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'rolesFromOrdinals', ...config } as UseContractReadConfig<
    typeof cardABI,
    'rolesFromOrdinals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"rolesOf"`.
 */
export function useCardRolesOf<TSelectData = ReadContractResult<typeof cardABI, 'rolesOf'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'rolesOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'rolesOf', ...config } as UseContractReadConfig<typeof cardABI, 'rolesOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCardSupportsInterface<TSelectData = ReadContractResult<typeof cardABI, 'supportsInterface'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'supportsInterface', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof cardABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"symbol"`.
 */
export function useCardSymbol<TSelectData = ReadContractResult<typeof cardABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'symbol', ...config } as UseContractReadConfig<typeof cardABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useCardTokenUri<TSelectData = ReadContractResult<typeof cardABI, 'tokenURI'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'tokenURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<typeof cardABI, 'tokenURI', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useCardTotalSupply<TSelectData = ReadContractResult<typeof cardABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof cardABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof cardABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__.
 */
export function useCardWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof cardABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, TFunctionName>({ abi: cardABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"approve"`.
 */
export function useCardApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'approve'>['abi'], 'approve'> & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof cardABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'approve'>({ abi: cardABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"burn"`.
 */
export function useCardBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'burn'>['abi'], 'burn'> & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof cardABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'burn'>({ abi: cardABI, functionName: 'burn', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"cancelOwnershipHandover"`.
 */
export function useCardCancelOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'cancelOwnershipHandover'>['abi'], 'cancelOwnershipHandover'> & {
        functionName?: 'cancelOwnershipHandover'
      }
    : UseContractWriteConfig<TMode, typeof cardABI, 'cancelOwnershipHandover'> & {
        abi?: never
        functionName?: 'cancelOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'cancelOwnershipHandover'>({
    abi: cardABI,
    functionName: 'cancelOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"completeOwnershipHandover"`.
 */
export function useCardCompleteOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'completeOwnershipHandover'>['abi'], 'completeOwnershipHandover'> & {
        functionName?: 'completeOwnershipHandover'
      }
    : UseContractWriteConfig<TMode, typeof cardABI, 'completeOwnershipHandover'> & {
        abi?: never
        functionName?: 'completeOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'completeOwnershipHandover'>({
    abi: cardABI,
    functionName: 'completeOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"grantRoles"`.
 */
export function useCardGrantRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'grantRoles'>['abi'], 'grantRoles'> & { functionName?: 'grantRoles' }
    : UseContractWriteConfig<TMode, typeof cardABI, 'grantRoles'> & {
        abi?: never
        functionName?: 'grantRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'grantRoles'>({ abi: cardABI, functionName: 'grantRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"mint"`.
 */
export function useCardMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'mint'>['abi'], 'mint'> & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof cardABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'mint'>({ abi: cardABI, functionName: 'mint', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCardRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'renounceOwnership'>['abi'], 'renounceOwnership'> & {
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<TMode, typeof cardABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'renounceOwnership'>({ abi: cardABI, functionName: 'renounceOwnership', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"renounceRoles"`.
 */
export function useCardRenounceRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'renounceRoles'>['abi'], 'renounceRoles'> & {
        functionName?: 'renounceRoles'
      }
    : UseContractWriteConfig<TMode, typeof cardABI, 'renounceRoles'> & {
        abi?: never
        functionName?: 'renounceRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'renounceRoles'>({ abi: cardABI, functionName: 'renounceRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"requestOwnershipHandover"`.
 */
export function useCardRequestOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'requestOwnershipHandover'>['abi'], 'requestOwnershipHandover'> & {
        functionName?: 'requestOwnershipHandover'
      }
    : UseContractWriteConfig<TMode, typeof cardABI, 'requestOwnershipHandover'> & {
        abi?: never
        functionName?: 'requestOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'requestOwnershipHandover'>({
    abi: cardABI,
    functionName: 'requestOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"revokeRoles"`.
 */
export function useCardRevokeRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'revokeRoles'>['abi'], 'revokeRoles'> & {
        functionName?: 'revokeRoles'
      }
    : UseContractWriteConfig<TMode, typeof cardABI, 'revokeRoles'> & {
        abi?: never
        functionName?: 'revokeRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'revokeRoles'>({ abi: cardABI, functionName: 'revokeRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useCardSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'safeTransferFrom'>['abi'], 'safeTransferFrom'> & {
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<TMode, typeof cardABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'safeTransferFrom'>({ abi: cardABI, functionName: 'safeTransferFrom', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useCardSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'setApprovalForAll'>['abi'], 'setApprovalForAll'> & {
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<TMode, typeof cardABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'setApprovalForAll'>({ abi: cardABI, functionName: 'setApprovalForAll', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"setStorage"`.
 */
export function useCardSetStorage<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'setStorage'>['abi'], 'setStorage'> & { functionName?: 'setStorage' }
    : UseContractWriteConfig<TMode, typeof cardABI, 'setStorage'> & {
        abi?: never
        functionName?: 'setStorage'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'setStorage'>({ abi: cardABI, functionName: 'setStorage', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useCardTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'transferFrom'>['abi'], 'transferFrom'> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<TMode, typeof cardABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'transferFrom'>({ abi: cardABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCardTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof cardABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardABI, 'transferOwnership'>({ abi: cardABI, functionName: 'transferOwnership', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__.
 */
export function usePrepareCardWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof cardABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardABI, ...config } as UsePrepareContractWriteConfig<typeof cardABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareCardApprove(config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'approve'>, 'abi' | 'functionName'> = {} as any) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<typeof cardABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareCardBurn(config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'burn'>, 'abi' | 'functionName'> = {} as any) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'burn', ...config } as UsePrepareContractWriteConfig<typeof cardABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"cancelOwnershipHandover"`.
 */
export function usePrepareCardCancelOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'cancelOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'cancelOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof cardABI,
    'cancelOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"completeOwnershipHandover"`.
 */
export function usePrepareCardCompleteOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'completeOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'completeOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof cardABI,
    'completeOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"grantRoles"`.
 */
export function usePrepareCardGrantRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'grantRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'grantRoles', ...config } as UsePrepareContractWriteConfig<
    typeof cardABI,
    'grantRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareCardMint(config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'mint'>, 'abi' | 'functionName'> = {} as any) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'mint', ...config } as UsePrepareContractWriteConfig<typeof cardABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCardRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof cardABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"renounceRoles"`.
 */
export function usePrepareCardRenounceRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'renounceRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'renounceRoles', ...config } as UsePrepareContractWriteConfig<
    typeof cardABI,
    'renounceRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"requestOwnershipHandover"`.
 */
export function usePrepareCardRequestOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'requestOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'requestOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof cardABI,
    'requestOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"revokeRoles"`.
 */
export function usePrepareCardRevokeRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'revokeRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'revokeRoles', ...config } as UsePrepareContractWriteConfig<
    typeof cardABI,
    'revokeRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareCardSafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'safeTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof cardABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareCardSetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'setApprovalForAll', ...config } as UsePrepareContractWriteConfig<
    typeof cardABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"setStorage"`.
 */
export function usePrepareCardSetStorage(
  config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'setStorage'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'setStorage', ...config } as UsePrepareContractWriteConfig<
    typeof cardABI,
    'setStorage'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareCardTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof cardABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCardTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof cardABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof cardABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardABI}__.
 */
export function useCardEvent<TEventName extends string>(config: Omit<UseContractEventConfig<typeof cardABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: cardABI, ...config } as UseContractEventConfig<typeof cardABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardABI}__ and `eventName` set to `"Approval"`.
 */
export function useCardApprovalEvent(config: Omit<UseContractEventConfig<typeof cardABI, 'Approval'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: cardABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof cardABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useCardApprovalForAllEvent(config: Omit<UseContractEventConfig<typeof cardABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: cardABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<typeof cardABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardABI}__ and `eventName` set to `"ERC721StorageUpdated"`.
 */
export function useCardErc721StorageUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof cardABI, 'ERC721StorageUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardABI, eventName: 'ERC721StorageUpdated', ...config } as UseContractEventConfig<
    typeof cardABI,
    'ERC721StorageUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardABI}__ and `eventName` set to `"OwnershipHandoverCanceled"`.
 */
export function useCardOwnershipHandoverCanceledEvent(
  config: Omit<UseContractEventConfig<typeof cardABI, 'OwnershipHandoverCanceled'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardABI, eventName: 'OwnershipHandoverCanceled', ...config } as UseContractEventConfig<
    typeof cardABI,
    'OwnershipHandoverCanceled'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardABI}__ and `eventName` set to `"OwnershipHandoverRequested"`.
 */
export function useCardOwnershipHandoverRequestedEvent(
  config: Omit<UseContractEventConfig<typeof cardABI, 'OwnershipHandoverRequested'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardABI, eventName: 'OwnershipHandoverRequested', ...config } as UseContractEventConfig<
    typeof cardABI,
    'OwnershipHandoverRequested'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCardOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof cardABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof cardABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardABI}__ and `eventName` set to `"RolesUpdated"`.
 */
export function useCardRolesUpdatedEvent(config: Omit<UseContractEventConfig<typeof cardABI, 'RolesUpdated'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: cardABI, eventName: 'RolesUpdated', ...config } as UseContractEventConfig<typeof cardABI, 'RolesUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCardTransferEvent(config: Omit<UseContractEventConfig<typeof cardABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: cardABI, eventName: 'Transfer', ...config } as UseContractEventConfig<typeof cardABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link cardActivatorABI}__.
 */
export function useCardActivator(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: cardActivatorABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardActivatorABI}__.
 */
export function useCardActivatorRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof cardActivatorABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof cardActivatorABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: cardActivatorABI, ...config } as UseContractReadConfig<typeof cardActivatorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardActivatorABI}__ and `functionName` set to `"erc721KDesignInstance"`.
 */
export function useCardActivatorErc721KDesignInstance<TSelectData = ReadContractResult<typeof cardActivatorABI, 'erc721KDesignInstance'>>(
  config: Omit<UseContractReadConfig<typeof cardActivatorABI, 'erc721KDesignInstance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardActivatorABI, functionName: 'erc721KDesignInstance', ...config } as UseContractReadConfig<
    typeof cardActivatorABI,
    'erc721KDesignInstance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardActivatorABI}__ and `functionName` set to `"erc721KInstance"`.
 */
export function useCardActivatorErc721KInstance<TSelectData = ReadContractResult<typeof cardActivatorABI, 'erc721KInstance'>>(
  config: Omit<UseContractReadConfig<typeof cardActivatorABI, 'erc721KInstance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardActivatorABI, functionName: 'erc721KInstance', ...config } as UseContractReadConfig<
    typeof cardActivatorABI,
    'erc721KInstance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardActivatorABI}__ and `functionName` set to `"owner"`.
 */
export function useCardActivatorOwner<TSelectData = ReadContractResult<typeof cardActivatorABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof cardActivatorABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardActivatorABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof cardActivatorABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardActivatorABI}__.
 */
export function useCardActivatorWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardActivatorABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof cardActivatorABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardActivatorABI, TFunctionName>({ abi: cardActivatorABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardActivatorABI}__ and `functionName` set to `"activate"`.
 */
export function useCardActivatorActivate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardActivatorABI, 'activate'>['abi'], 'activate'> & {
        functionName?: 'activate'
      }
    : UseContractWriteConfig<TMode, typeof cardActivatorABI, 'activate'> & {
        abi?: never
        functionName?: 'activate'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardActivatorABI, 'activate'>({ abi: cardActivatorABI, functionName: 'activate', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardActivatorABI}__ and `functionName` set to `"activateWithStyle"`.
 */
export function useCardActivatorActivateWithStyle<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardActivatorABI, 'activateWithStyle'>['abi'], 'activateWithStyle'> & {
        functionName?: 'activateWithStyle'
      }
    : UseContractWriteConfig<TMode, typeof cardActivatorABI, 'activateWithStyle'> & {
        abi?: never
        functionName?: 'activateWithStyle'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardActivatorABI, 'activateWithStyle'>({
    abi: cardActivatorABI,
    functionName: 'activateWithStyle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardActivatorABI}__ and `functionName` set to `"release"`.
 */
export function useCardActivatorRelease<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardActivatorABI, 'release'>['abi'], 'release'> & { functionName?: 'release' }
    : UseContractWriteConfig<TMode, typeof cardActivatorABI, 'release'> & {
        abi?: never
        functionName?: 'release'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardActivatorABI, 'release'>({ abi: cardActivatorABI, functionName: 'release', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardActivatorABI}__ and `functionName` set to `"setStyleUpgradeCost"`.
 */
export function useCardActivatorSetStyleUpgradeCost<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardActivatorABI, 'setStyleUpgradeCost'>['abi'], 'setStyleUpgradeCost'> & {
        functionName?: 'setStyleUpgradeCost'
      }
    : UseContractWriteConfig<TMode, typeof cardActivatorABI, 'setStyleUpgradeCost'> & {
        abi?: never
        functionName?: 'setStyleUpgradeCost'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardActivatorABI, 'setStyleUpgradeCost'>({
    abi: cardActivatorABI,
    functionName: 'setStyleUpgradeCost',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardActivatorABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCardActivatorTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardActivatorABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof cardActivatorABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardActivatorABI, 'transferOwnership'>({
    abi: cardActivatorABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardActivatorABI}__.
 */
export function usePrepareCardActivatorWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof cardActivatorABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardActivatorABI, ...config } as UsePrepareContractWriteConfig<typeof cardActivatorABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardActivatorABI}__ and `functionName` set to `"activate"`.
 */
export function usePrepareCardActivatorActivate(
  config: Omit<UsePrepareContractWriteConfig<typeof cardActivatorABI, 'activate'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardActivatorABI, functionName: 'activate', ...config } as UsePrepareContractWriteConfig<
    typeof cardActivatorABI,
    'activate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardActivatorABI}__ and `functionName` set to `"activateWithStyle"`.
 */
export function usePrepareCardActivatorActivateWithStyle(
  config: Omit<UsePrepareContractWriteConfig<typeof cardActivatorABI, 'activateWithStyle'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardActivatorABI, functionName: 'activateWithStyle', ...config } as UsePrepareContractWriteConfig<
    typeof cardActivatorABI,
    'activateWithStyle'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardActivatorABI}__ and `functionName` set to `"release"`.
 */
export function usePrepareCardActivatorRelease(
  config: Omit<UsePrepareContractWriteConfig<typeof cardActivatorABI, 'release'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardActivatorABI, functionName: 'release', ...config } as UsePrepareContractWriteConfig<
    typeof cardActivatorABI,
    'release'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardActivatorABI}__ and `functionName` set to `"setStyleUpgradeCost"`.
 */
export function usePrepareCardActivatorSetStyleUpgradeCost(
  config: Omit<UsePrepareContractWriteConfig<typeof cardActivatorABI, 'setStyleUpgradeCost'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardActivatorABI, functionName: 'setStyleUpgradeCost', ...config } as UsePrepareContractWriteConfig<
    typeof cardActivatorABI,
    'setStyleUpgradeCost'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardActivatorABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCardActivatorTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof cardActivatorABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardActivatorABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof cardActivatorABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardActivatorABI}__.
 */
export function useCardActivatorEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof cardActivatorABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: cardActivatorABI, ...config } as UseContractEventConfig<typeof cardActivatorABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardActivatorABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCardActivatorOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof cardActivatorABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardActivatorABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof cardActivatorABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link cardDesignABI}__.
 */
export function useCardDesign(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: cardDesignABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardDesignABI}__.
 */
export function useCardDesignRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof cardDesignABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof cardDesignABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: cardDesignABI, ...config } as UseContractReadConfig<typeof cardDesignABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"erc721KActivatorInstance"`.
 */
export function useCardDesignErc721KActivatorInstance<TSelectData = ReadContractResult<typeof cardDesignABI, 'erc721KActivatorInstance'>>(
  config: Omit<UseContractReadConfig<typeof cardDesignABI, 'erc721KActivatorInstance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardDesignABI, functionName: 'erc721KActivatorInstance', ...config } as UseContractReadConfig<
    typeof cardDesignABI,
    'erc721KActivatorInstance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"getColor"`.
 */
export function useCardDesignGetColor<TSelectData = ReadContractResult<typeof cardDesignABI, 'getColor'>>(
  config: Omit<UseContractReadConfig<typeof cardDesignABI, 'getColor', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardDesignABI, functionName: 'getColor', ...config } as UseContractReadConfig<
    typeof cardDesignABI,
    'getColor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"getColorFromMap"`.
 */
export function useCardDesignGetColorFromMap<TSelectData = ReadContractResult<typeof cardDesignABI, 'getColorFromMap'>>(
  config: Omit<UseContractReadConfig<typeof cardDesignABI, 'getColorFromMap', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardDesignABI, functionName: 'getColorFromMap', ...config } as UseContractReadConfig<
    typeof cardDesignABI,
    'getColorFromMap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"getEmoji"`.
 */
export function useCardDesignGetEmoji<TSelectData = ReadContractResult<typeof cardDesignABI, 'getEmoji'>>(
  config: Omit<UseContractReadConfig<typeof cardDesignABI, 'getEmoji', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardDesignABI, functionName: 'getEmoji', ...config } as UseContractReadConfig<
    typeof cardDesignABI,
    'getEmoji',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"getEmojiFromMap"`.
 */
export function useCardDesignGetEmojiFromMap<TSelectData = ReadContractResult<typeof cardDesignABI, 'getEmojiFromMap'>>(
  config: Omit<UseContractReadConfig<typeof cardDesignABI, 'getEmojiFromMap', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardDesignABI, functionName: 'getEmojiFromMap', ...config } as UseContractReadConfig<
    typeof cardDesignABI,
    'getEmojiFromMap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"owner"`.
 */
export function useCardDesignOwner<TSelectData = ReadContractResult<typeof cardDesignABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof cardDesignABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardDesignABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof cardDesignABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardDesignABI}__.
 */
export function useCardDesignWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardDesignABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof cardDesignABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardDesignABI, TFunctionName>({ abi: cardDesignABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"confirmOwner"`.
 */
export function useCardDesignConfirmOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardDesignABI, 'confirmOwner'>['abi'], 'confirmOwner'> & {
        functionName?: 'confirmOwner'
      }
    : UseContractWriteConfig<TMode, typeof cardDesignABI, 'confirmOwner'> & {
        abi?: never
        functionName?: 'confirmOwner'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardDesignABI, 'confirmOwner'>({ abi: cardDesignABI, functionName: 'confirmOwner', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"renounceOwner"`.
 */
export function useCardDesignRenounceOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardDesignABI, 'renounceOwner'>['abi'], 'renounceOwner'> & {
        functionName?: 'renounceOwner'
      }
    : UseContractWriteConfig<TMode, typeof cardDesignABI, 'renounceOwner'> & {
        abi?: never
        functionName?: 'renounceOwner'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardDesignABI, 'renounceOwner'>({ abi: cardDesignABI, functionName: 'renounceOwner', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"setColor"`.
 */
export function useCardDesignSetColor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardDesignABI, 'setColor'>['abi'], 'setColor'> & { functionName?: 'setColor' }
    : UseContractWriteConfig<TMode, typeof cardDesignABI, 'setColor'> & {
        abi?: never
        functionName?: 'setColor'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardDesignABI, 'setColor'>({ abi: cardDesignABI, functionName: 'setColor', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"setDuringMint"`.
 */
export function useCardDesignSetDuringMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardDesignABI, 'setDuringMint'>['abi'], 'setDuringMint'> & {
        functionName?: 'setDuringMint'
      }
    : UseContractWriteConfig<TMode, typeof cardDesignABI, 'setDuringMint'> & {
        abi?: never
        functionName?: 'setDuringMint'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardDesignABI, 'setDuringMint'>({ abi: cardDesignABI, functionName: 'setDuringMint', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"setERC721KActivatorInstance"`.
 */
export function useCardDesignSetErc721KActivatorInstance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cardDesignABI, 'setERC721KActivatorInstance'>['abi'],
        'setERC721KActivatorInstance'
      > & { functionName?: 'setERC721KActivatorInstance' }
    : UseContractWriteConfig<TMode, typeof cardDesignABI, 'setERC721KActivatorInstance'> & {
        abi?: never
        functionName?: 'setERC721KActivatorInstance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardDesignABI, 'setERC721KActivatorInstance'>({
    abi: cardDesignABI,
    functionName: 'setERC721KActivatorInstance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"setEmoji"`.
 */
export function useCardDesignSetEmoji<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardDesignABI, 'setEmoji'>['abi'], 'setEmoji'> & { functionName?: 'setEmoji' }
    : UseContractWriteConfig<TMode, typeof cardDesignABI, 'setEmoji'> & {
        abi?: never
        functionName?: 'setEmoji'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardDesignABI, 'setEmoji'>({ abi: cardDesignABI, functionName: 'setEmoji', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"setStyleUpgradeCost"`.
 */
export function useCardDesignSetStyleUpgradeCost<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardDesignABI, 'setStyleUpgradeCost'>['abi'], 'setStyleUpgradeCost'> & {
        functionName?: 'setStyleUpgradeCost'
      }
    : UseContractWriteConfig<TMode, typeof cardDesignABI, 'setStyleUpgradeCost'> & {
        abi?: never
        functionName?: 'setStyleUpgradeCost'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardDesignABI, 'setStyleUpgradeCost'>({
    abi: cardDesignABI,
    functionName: 'setStyleUpgradeCost',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCardDesignTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardDesignABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof cardDesignABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardDesignABI, 'transferOwnership'>({
    abi: cardDesignABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardDesignABI}__.
 */
export function usePrepareCardDesignWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof cardDesignABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardDesignABI, ...config } as UsePrepareContractWriteConfig<typeof cardDesignABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"confirmOwner"`.
 */
export function usePrepareCardDesignConfirmOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof cardDesignABI, 'confirmOwner'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardDesignABI, functionName: 'confirmOwner', ...config } as UsePrepareContractWriteConfig<
    typeof cardDesignABI,
    'confirmOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"renounceOwner"`.
 */
export function usePrepareCardDesignRenounceOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof cardDesignABI, 'renounceOwner'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardDesignABI, functionName: 'renounceOwner', ...config } as UsePrepareContractWriteConfig<
    typeof cardDesignABI,
    'renounceOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"setColor"`.
 */
export function usePrepareCardDesignSetColor(
  config: Omit<UsePrepareContractWriteConfig<typeof cardDesignABI, 'setColor'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardDesignABI, functionName: 'setColor', ...config } as UsePrepareContractWriteConfig<
    typeof cardDesignABI,
    'setColor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"setDuringMint"`.
 */
export function usePrepareCardDesignSetDuringMint(
  config: Omit<UsePrepareContractWriteConfig<typeof cardDesignABI, 'setDuringMint'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardDesignABI, functionName: 'setDuringMint', ...config } as UsePrepareContractWriteConfig<
    typeof cardDesignABI,
    'setDuringMint'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"setERC721KActivatorInstance"`.
 */
export function usePrepareCardDesignSetErc721KActivatorInstance(
  config: Omit<UsePrepareContractWriteConfig<typeof cardDesignABI, 'setERC721KActivatorInstance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardDesignABI, functionName: 'setERC721KActivatorInstance', ...config } as UsePrepareContractWriteConfig<
    typeof cardDesignABI,
    'setERC721KActivatorInstance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"setEmoji"`.
 */
export function usePrepareCardDesignSetEmoji(
  config: Omit<UsePrepareContractWriteConfig<typeof cardDesignABI, 'setEmoji'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardDesignABI, functionName: 'setEmoji', ...config } as UsePrepareContractWriteConfig<
    typeof cardDesignABI,
    'setEmoji'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"setStyleUpgradeCost"`.
 */
export function usePrepareCardDesignSetStyleUpgradeCost(
  config: Omit<UsePrepareContractWriteConfig<typeof cardDesignABI, 'setStyleUpgradeCost'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardDesignABI, functionName: 'setStyleUpgradeCost', ...config } as UsePrepareContractWriteConfig<
    typeof cardDesignABI,
    'setStyleUpgradeCost'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardDesignABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCardDesignTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof cardDesignABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardDesignABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof cardDesignABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardDesignABI}__.
 */
export function useCardDesignEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof cardDesignABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: cardDesignABI, ...config } as UseContractEventConfig<typeof cardDesignABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardDesignABI}__ and `eventName` set to `"OwnerUpdateInitiated"`.
 */
export function useCardDesignOwnerUpdateInitiatedEvent(
  config: Omit<UseContractEventConfig<typeof cardDesignABI, 'OwnerUpdateInitiated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardDesignABI, eventName: 'OwnerUpdateInitiated', ...config } as UseContractEventConfig<
    typeof cardDesignABI,
    'OwnerUpdateInitiated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardDesignABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCardDesignOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof cardDesignABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardDesignABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof cardDesignABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link cardTraitsABI}__.
 */
export function useCardTraits(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: cardTraitsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardTraitsABI}__.
 */
export function useCardTraitsRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof cardTraitsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof cardTraitsABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: cardTraitsABI, ...config } as UseContractReadConfig<typeof cardTraitsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardTraitsABI}__ and `functionName` set to `"fetch"`.
 */
export function useCardTraitsFetch<TSelectData = ReadContractResult<typeof cardTraitsABI, 'fetch'>>(
  config: Omit<UseContractReadConfig<typeof cardTraitsABI, 'fetch', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardTraitsABI, functionName: 'fetch', ...config } as UseContractReadConfig<
    typeof cardTraitsABI,
    'fetch',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardTraitsABI}__ and `functionName` set to `"owner"`.
 */
export function useCardTraitsOwner<TSelectData = ReadContractResult<typeof cardTraitsABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof cardTraitsABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardTraitsABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof cardTraitsABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardTraitsABI}__.
 */
export function useCardTraitsWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardTraitsABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof cardTraitsABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardTraitsABI, TFunctionName>({ abi: cardTraitsABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardTraitsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCardTraitsRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardTraitsABI, 'renounceOwnership'>['abi'], 'renounceOwnership'> & {
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<TMode, typeof cardTraitsABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardTraitsABI, 'renounceOwnership'>({
    abi: cardTraitsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardTraitsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCardTraitsTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardTraitsABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof cardTraitsABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardTraitsABI, 'transferOwnership'>({
    abi: cardTraitsABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardTraitsABI}__.
 */
export function usePrepareCardTraitsWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof cardTraitsABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardTraitsABI, ...config } as UsePrepareContractWriteConfig<typeof cardTraitsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardTraitsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCardTraitsRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof cardTraitsABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardTraitsABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof cardTraitsABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardTraitsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCardTraitsTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof cardTraitsABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardTraitsABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof cardTraitsABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardTraitsABI}__.
 */
export function useCardTraitsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof cardTraitsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: cardTraitsABI, ...config } as UseContractEventConfig<typeof cardTraitsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardTraitsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCardTraitsOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof cardTraitsABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardTraitsABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof cardTraitsABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link cardStorageABI}__.
 */
export function useCardStorage(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: cardStorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__.
 */
export function useCardStorageRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof cardStorageABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, ...config } as UseContractReadConfig<typeof cardStorageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"assetUnderlying"`.
 */
export function useCardStorageAssetUnderlying<TSelectData = ReadContractResult<typeof cardStorageABI, 'assetUnderlying'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'assetUnderlying', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'assetUnderlying', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'assetUnderlying',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"constructContractURI"`.
 */
export function useCardStorageConstructContractUri<TSelectData = ReadContractResult<typeof cardStorageABI, 'constructContractURI'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'constructContractURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'constructContractURI', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'constructContractURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"constructTokenURI"`.
 */
export function useCardStorageConstructTokenUri<TSelectData = ReadContractResult<typeof cardStorageABI, 'constructTokenURI'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'constructTokenURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'constructTokenURI', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'constructTokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"erc20TWABInstance"`.
 */
export function useCardStorageErc20TwabInstance<TSelectData = ReadContractResult<typeof cardStorageABI, 'erc20TWABInstance'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'erc20TWABInstance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'erc20TWABInstance', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'erc20TWABInstance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"erc721KDesignInstance"`.
 */
export function useCardStorageErc721KDesignInstance<TSelectData = ReadContractResult<typeof cardStorageABI, 'erc721KDesignInstance'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'erc721KDesignInstance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'erc721KDesignInstance', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'erc721KDesignInstance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"erc721KInstance"`.
 */
export function useCardStorageErc721KInstance<TSelectData = ReadContractResult<typeof cardStorageABI, 'erc721KInstance'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'erc721KInstance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'erc721KInstance', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'erc721KInstance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"getContractDescription"`.
 */
export function useCardStorageGetContractDescription<TSelectData = ReadContractResult<typeof cardStorageABI, 'getContractDescription'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'getContractDescription', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'getContractDescription', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'getContractDescription',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"getERC721KRender"`.
 */
export function useCardStorageGetErc721KRender<TSelectData = ReadContractResult<typeof cardStorageABI, 'getERC721KRender'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'getERC721KRender', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'getERC721KRender', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'getERC721KRender',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"getERC72KTraits"`.
 */
export function useCardStorageGetErc72KTraits<TSelectData = ReadContractResult<typeof cardStorageABI, 'getERC72KTraits'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'getERC72KTraits', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'getERC72KTraits', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'getERC72KTraits',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"getImageBytes"`.
 */
export function useCardStorageGetImageBytes<TSelectData = ReadContractResult<typeof cardStorageABI, 'getImageBytes'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'getImageBytes', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'getImageBytes', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'getImageBytes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"getPreview"`.
 */
export function useCardStorageGetPreview<TSelectData = ReadContractResult<typeof cardStorageABI, 'getPreview'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'getPreview', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'getPreview', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'getPreview',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"getPreviewWithStyle"`.
 */
export function useCardStorageGetPreviewWithStyle<TSelectData = ReadContractResult<typeof cardStorageABI, 'getPreviewWithStyle'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'getPreviewWithStyle', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'getPreviewWithStyle', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'getPreviewWithStyle',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"getTraitsBytes"`.
 */
export function useCardStorageGetTraitsBytes<TSelectData = ReadContractResult<typeof cardStorageABI, 'getTraitsBytes'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'getTraitsBytes', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'getTraitsBytes', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'getTraitsBytes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"hasAllRoles"`.
 */
export function useCardStorageHasAllRoles<TSelectData = ReadContractResult<typeof cardStorageABI, 'hasAllRoles'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'hasAllRoles', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'hasAllRoles', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'hasAllRoles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"hasAnyRole"`.
 */
export function useCardStorageHasAnyRole<TSelectData = ReadContractResult<typeof cardStorageABI, 'hasAnyRole'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'hasAnyRole', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'hasAnyRole', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'hasAnyRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"ordinalsFromRoles"`.
 */
export function useCardStorageOrdinalsFromRoles<TSelectData = ReadContractResult<typeof cardStorageABI, 'ordinalsFromRoles'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'ordinalsFromRoles', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'ordinalsFromRoles', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'ordinalsFromRoles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"owner"`.
 */
export function useCardStorageOwner<TSelectData = ReadContractResult<typeof cardStorageABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"ownershipHandoverExpiresAt"`.
 */
export function useCardStorageOwnershipHandoverExpiresAt<TSelectData = ReadContractResult<typeof cardStorageABI, 'ownershipHandoverExpiresAt'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'ownershipHandoverExpiresAt', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'ownershipHandoverExpiresAt', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'ownershipHandoverExpiresAt',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"ownershipHandoverValidFor"`.
 */
export function useCardStorageOwnershipHandoverValidFor<TSelectData = ReadContractResult<typeof cardStorageABI, 'ownershipHandoverValidFor'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'ownershipHandoverValidFor', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'ownershipHandoverValidFor', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'ownershipHandoverValidFor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"render"`.
 */
export function useCardStorageRender<TSelectData = ReadContractResult<typeof cardStorageABI, 'render'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'render', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'render', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'render',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"rolesFromOrdinals"`.
 */
export function useCardStorageRolesFromOrdinals<TSelectData = ReadContractResult<typeof cardStorageABI, 'rolesFromOrdinals'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'rolesFromOrdinals', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'rolesFromOrdinals', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'rolesFromOrdinals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"rolesOf"`.
 */
export function useCardStorageRolesOf<TSelectData = ReadContractResult<typeof cardStorageABI, 'rolesOf'>>(
  config: Omit<UseContractReadConfig<typeof cardStorageABI, 'rolesOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: cardStorageABI, functionName: 'rolesOf', ...config } as UseContractReadConfig<
    typeof cardStorageABI,
    'rolesOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__.
 */
export function useCardStorageWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardStorageABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof cardStorageABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, TFunctionName>({ abi: cardStorageABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"cancelOwnershipHandover"`.
 */
export function useCardStorageCancelOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cardStorageABI, 'cancelOwnershipHandover'>['abi'],
        'cancelOwnershipHandover'
      > & { functionName?: 'cancelOwnershipHandover' }
    : UseContractWriteConfig<TMode, typeof cardStorageABI, 'cancelOwnershipHandover'> & {
        abi?: never
        functionName?: 'cancelOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, 'cancelOwnershipHandover'>({
    abi: cardStorageABI,
    functionName: 'cancelOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"completeOwnershipHandover"`.
 */
export function useCardStorageCompleteOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cardStorageABI, 'completeOwnershipHandover'>['abi'],
        'completeOwnershipHandover'
      > & { functionName?: 'completeOwnershipHandover' }
    : UseContractWriteConfig<TMode, typeof cardStorageABI, 'completeOwnershipHandover'> & {
        abi?: never
        functionName?: 'completeOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, 'completeOwnershipHandover'>({
    abi: cardStorageABI,
    functionName: 'completeOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"grantRoles"`.
 */
export function useCardStorageGrantRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardStorageABI, 'grantRoles'>['abi'], 'grantRoles'> & {
        functionName?: 'grantRoles'
      }
    : UseContractWriteConfig<TMode, typeof cardStorageABI, 'grantRoles'> & {
        abi?: never
        functionName?: 'grantRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, 'grantRoles'>({ abi: cardStorageABI, functionName: 'grantRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCardStorageRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardStorageABI, 'renounceOwnership'>['abi'], 'renounceOwnership'> & {
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<TMode, typeof cardStorageABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, 'renounceOwnership'>({
    abi: cardStorageABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"renounceRoles"`.
 */
export function useCardStorageRenounceRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardStorageABI, 'renounceRoles'>['abi'], 'renounceRoles'> & {
        functionName?: 'renounceRoles'
      }
    : UseContractWriteConfig<TMode, typeof cardStorageABI, 'renounceRoles'> & {
        abi?: never
        functionName?: 'renounceRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, 'renounceRoles'>({ abi: cardStorageABI, functionName: 'renounceRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"requestOwnershipHandover"`.
 */
export function useCardStorageRequestOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cardStorageABI, 'requestOwnershipHandover'>['abi'],
        'requestOwnershipHandover'
      > & { functionName?: 'requestOwnershipHandover' }
    : UseContractWriteConfig<TMode, typeof cardStorageABI, 'requestOwnershipHandover'> & {
        abi?: never
        functionName?: 'requestOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, 'requestOwnershipHandover'>({
    abi: cardStorageABI,
    functionName: 'requestOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"revokeRoles"`.
 */
export function useCardStorageRevokeRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardStorageABI, 'revokeRoles'>['abi'], 'revokeRoles'> & {
        functionName?: 'revokeRoles'
      }
    : UseContractWriteConfig<TMode, typeof cardStorageABI, 'revokeRoles'> & {
        abi?: never
        functionName?: 'revokeRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, 'revokeRoles'>({ abi: cardStorageABI, functionName: 'revokeRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"setContractURI"`.
 */
export function useCardStorageSetContractUri<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardStorageABI, 'setContractURI'>['abi'], 'setContractURI'> & {
        functionName?: 'setContractURI'
      }
    : UseContractWriteConfig<TMode, typeof cardStorageABI, 'setContractURI'> & {
        abi?: never
        functionName?: 'setContractURI'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, 'setContractURI'>({ abi: cardStorageABI, functionName: 'setContractURI', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"setERC20TWABInstance"`.
 */
export function useCardStorageSetErc20TwabInstance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardStorageABI, 'setERC20TWABInstance'>['abi'], 'setERC20TWABInstance'> & {
        functionName?: 'setERC20TWABInstance'
      }
    : UseContractWriteConfig<TMode, typeof cardStorageABI, 'setERC20TWABInstance'> & {
        abi?: never
        functionName?: 'setERC20TWABInstance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, 'setERC20TWABInstance'>({
    abi: cardStorageABI,
    functionName: 'setERC20TWABInstance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"setERC721KDesignInstance"`.
 */
export function useCardStorageSetErc721KDesignInstance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cardStorageABI, 'setERC721KDesignInstance'>['abi'],
        'setERC721KDesignInstance'
      > & { functionName?: 'setERC721KDesignInstance' }
    : UseContractWriteConfig<TMode, typeof cardStorageABI, 'setERC721KDesignInstance'> & {
        abi?: never
        functionName?: 'setERC721KDesignInstance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, 'setERC721KDesignInstance'>({
    abi: cardStorageABI,
    functionName: 'setERC721KDesignInstance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"setERC721KInstance"`.
 */
export function useCardStorageSetErc721KInstance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardStorageABI, 'setERC721KInstance'>['abi'], 'setERC721KInstance'> & {
        functionName?: 'setERC721KInstance'
      }
    : UseContractWriteConfig<TMode, typeof cardStorageABI, 'setERC721KInstance'> & {
        abi?: never
        functionName?: 'setERC721KInstance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, 'setERC721KInstance'>({
    abi: cardStorageABI,
    functionName: 'setERC721KInstance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"setSvgRender"`.
 */
export function useCardStorageSetSvgRender<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardStorageABI, 'setSvgRender'>['abi'], 'setSvgRender'> & {
        functionName?: 'setSvgRender'
      }
    : UseContractWriteConfig<TMode, typeof cardStorageABI, 'setSvgRender'> & {
        abi?: never
        functionName?: 'setSvgRender'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, 'setSvgRender'>({ abi: cardStorageABI, functionName: 'setSvgRender', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"setTraitsFetch"`.
 */
export function useCardStorageSetTraitsFetch<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardStorageABI, 'setTraitsFetch'>['abi'], 'setTraitsFetch'> & {
        functionName?: 'setTraitsFetch'
      }
    : UseContractWriteConfig<TMode, typeof cardStorageABI, 'setTraitsFetch'> & {
        abi?: never
        functionName?: 'setTraitsFetch'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, 'setTraitsFetch'>({ abi: cardStorageABI, functionName: 'setTraitsFetch', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCardStorageTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof cardStorageABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof cardStorageABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof cardStorageABI, 'transferOwnership'>({
    abi: cardStorageABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__.
 */
export function usePrepareCardStorageWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, ...config } as UsePrepareContractWriteConfig<typeof cardStorageABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"cancelOwnershipHandover"`.
 */
export function usePrepareCardStorageCancelOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, 'cancelOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, functionName: 'cancelOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof cardStorageABI,
    'cancelOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"completeOwnershipHandover"`.
 */
export function usePrepareCardStorageCompleteOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, 'completeOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, functionName: 'completeOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof cardStorageABI,
    'completeOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"grantRoles"`.
 */
export function usePrepareCardStorageGrantRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, 'grantRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, functionName: 'grantRoles', ...config } as UsePrepareContractWriteConfig<
    typeof cardStorageABI,
    'grantRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCardStorageRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof cardStorageABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"renounceRoles"`.
 */
export function usePrepareCardStorageRenounceRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, 'renounceRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, functionName: 'renounceRoles', ...config } as UsePrepareContractWriteConfig<
    typeof cardStorageABI,
    'renounceRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"requestOwnershipHandover"`.
 */
export function usePrepareCardStorageRequestOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, 'requestOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, functionName: 'requestOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof cardStorageABI,
    'requestOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"revokeRoles"`.
 */
export function usePrepareCardStorageRevokeRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, 'revokeRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, functionName: 'revokeRoles', ...config } as UsePrepareContractWriteConfig<
    typeof cardStorageABI,
    'revokeRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"setContractURI"`.
 */
export function usePrepareCardStorageSetContractUri(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, 'setContractURI'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, functionName: 'setContractURI', ...config } as UsePrepareContractWriteConfig<
    typeof cardStorageABI,
    'setContractURI'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"setERC20TWABInstance"`.
 */
export function usePrepareCardStorageSetErc20TwabInstance(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, 'setERC20TWABInstance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, functionName: 'setERC20TWABInstance', ...config } as UsePrepareContractWriteConfig<
    typeof cardStorageABI,
    'setERC20TWABInstance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"setERC721KDesignInstance"`.
 */
export function usePrepareCardStorageSetErc721KDesignInstance(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, 'setERC721KDesignInstance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, functionName: 'setERC721KDesignInstance', ...config } as UsePrepareContractWriteConfig<
    typeof cardStorageABI,
    'setERC721KDesignInstance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"setERC721KInstance"`.
 */
export function usePrepareCardStorageSetErc721KInstance(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, 'setERC721KInstance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, functionName: 'setERC721KInstance', ...config } as UsePrepareContractWriteConfig<
    typeof cardStorageABI,
    'setERC721KInstance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"setSvgRender"`.
 */
export function usePrepareCardStorageSetSvgRender(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, 'setSvgRender'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, functionName: 'setSvgRender', ...config } as UsePrepareContractWriteConfig<
    typeof cardStorageABI,
    'setSvgRender'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"setTraitsFetch"`.
 */
export function usePrepareCardStorageSetTraitsFetch(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, 'setTraitsFetch'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, functionName: 'setTraitsFetch', ...config } as UsePrepareContractWriteConfig<
    typeof cardStorageABI,
    'setTraitsFetch'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardStorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCardStorageTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof cardStorageABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: cardStorageABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof cardStorageABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardStorageABI}__.
 */
export function useCardStorageEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof cardStorageABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: cardStorageABI, ...config } as UseContractEventConfig<typeof cardStorageABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardStorageABI}__ and `eventName` set to `"ContractURIUpdated"`.
 */
export function useCardStorageContractUriUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof cardStorageABI, 'ContractURIUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardStorageABI, eventName: 'ContractURIUpdated', ...config } as UseContractEventConfig<
    typeof cardStorageABI,
    'ContractURIUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardStorageABI}__ and `eventName` set to `"OwnershipHandoverCanceled"`.
 */
export function useCardStorageOwnershipHandoverCanceledEvent(
  config: Omit<UseContractEventConfig<typeof cardStorageABI, 'OwnershipHandoverCanceled'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardStorageABI, eventName: 'OwnershipHandoverCanceled', ...config } as UseContractEventConfig<
    typeof cardStorageABI,
    'OwnershipHandoverCanceled'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardStorageABI}__ and `eventName` set to `"OwnershipHandoverRequested"`.
 */
export function useCardStorageOwnershipHandoverRequestedEvent(
  config: Omit<UseContractEventConfig<typeof cardStorageABI, 'OwnershipHandoverRequested'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardStorageABI, eventName: 'OwnershipHandoverRequested', ...config } as UseContractEventConfig<
    typeof cardStorageABI,
    'OwnershipHandoverRequested'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardStorageABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCardStorageOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof cardStorageABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardStorageABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof cardStorageABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardStorageABI}__ and `eventName` set to `"RolesUpdated"`.
 */
export function useCardStorageRolesUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof cardStorageABI, 'RolesUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardStorageABI, eventName: 'RolesUpdated', ...config } as UseContractEventConfig<
    typeof cardStorageABI,
    'RolesUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardStorageABI}__ and `eventName` set to `"SvgRenderUpdated"`.
 */
export function useCardStorageSvgRenderUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof cardStorageABI, 'SvgRenderUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardStorageABI, eventName: 'SvgRenderUpdated', ...config } as UseContractEventConfig<
    typeof cardStorageABI,
    'SvgRenderUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardStorageABI}__ and `eventName` set to `"TraitsFetchUpdated"`.
 */
export function useCardStorageTraitsFetchUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof cardStorageABI, 'TraitsFetchUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: cardStorageABI, eventName: 'TraitsFetchUpdated', ...config } as UseContractEventConfig<
    typeof cardStorageABI,
    'TraitsFetchUpdated'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20TwabABI}__.
 */
export function useErc20Twab(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20TwabABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__.
 */
export function useErc20TwabRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof erc20TwabABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, ...config } as UseContractReadConfig<typeof erc20TwabABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20TwabDomainSeparator<TSelectData = ReadContractResult<typeof erc20TwabABI, 'DOMAIN_SEPARATOR'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'DOMAIN_SEPARATOR', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'DOMAIN_SEPARATOR', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20TwabAllowance<TSelectData = ReadContractResult<typeof erc20TwabABI, 'allowance'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'allowance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20TwabBalanceOf<TSelectData = ReadContractResult<typeof erc20TwabABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20TwabDecimals<TSelectData = ReadContractResult<typeof erc20TwabABI, 'decimals'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'decimals', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"delegateOf"`.
 */
export function useErc20TwabDelegateOf<TSelectData = ReadContractResult<typeof erc20TwabABI, 'delegateOf'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'delegateOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'delegateOf', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'delegateOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"getAccountDetails"`.
 */
export function useErc20TwabGetAccountDetails<TSelectData = ReadContractResult<typeof erc20TwabABI, 'getAccountDetails'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'getAccountDetails', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'getAccountDetails', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'getAccountDetails',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"getAverageBalanceBetween"`.
 */
export function useErc20TwabGetAverageBalanceBetween<TSelectData = ReadContractResult<typeof erc20TwabABI, 'getAverageBalanceBetween'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'getAverageBalanceBetween', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'getAverageBalanceBetween', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'getAverageBalanceBetween',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"getAverageBalancesBetween"`.
 */
export function useErc20TwabGetAverageBalancesBetween<TSelectData = ReadContractResult<typeof erc20TwabABI, 'getAverageBalancesBetween'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'getAverageBalancesBetween', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'getAverageBalancesBetween', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'getAverageBalancesBetween',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"getAverageTotalSuppliesBetween"`.
 */
export function useErc20TwabGetAverageTotalSuppliesBetween<TSelectData = ReadContractResult<typeof erc20TwabABI, 'getAverageTotalSuppliesBetween'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'getAverageTotalSuppliesBetween', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'getAverageTotalSuppliesBetween', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'getAverageTotalSuppliesBetween',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"getBalanceAt"`.
 */
export function useErc20TwabGetBalanceAt<TSelectData = ReadContractResult<typeof erc20TwabABI, 'getBalanceAt'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'getBalanceAt', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'getBalanceAt', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'getBalanceAt',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"getBalancesAt"`.
 */
export function useErc20TwabGetBalancesAt<TSelectData = ReadContractResult<typeof erc20TwabABI, 'getBalancesAt'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'getBalancesAt', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'getBalancesAt', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'getBalancesAt',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"getTotalSuppliesAt"`.
 */
export function useErc20TwabGetTotalSuppliesAt<TSelectData = ReadContractResult<typeof erc20TwabABI, 'getTotalSuppliesAt'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'getTotalSuppliesAt', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'getTotalSuppliesAt', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'getTotalSuppliesAt',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"getTotalSupplyAt"`.
 */
export function useErc20TwabGetTotalSupplyAt<TSelectData = ReadContractResult<typeof erc20TwabABI, 'getTotalSupplyAt'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'getTotalSupplyAt', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'getTotalSupplyAt', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'getTotalSupplyAt',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"getTwab"`.
 */
export function useErc20TwabGetTwab<TSelectData = ReadContractResult<typeof erc20TwabABI, 'getTwab'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'getTwab', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'getTwab', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'getTwab',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"name"`.
 */
export function useErc20TwabName<TSelectData = ReadContractResult<typeof erc20TwabABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'name', ...config } as UseContractReadConfig<typeof erc20TwabABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20TwabNonces<TSelectData = ReadContractResult<typeof erc20TwabABI, 'nonces'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'nonces', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'nonces',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20TwabSymbol<TSelectData = ReadContractResult<typeof erc20TwabABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TwabTotalSupply<TSelectData = ReadContractResult<typeof erc20TwabABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof erc20TwabABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20TwabABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof erc20TwabABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20TwabABI}__.
 */
export function useErc20TwabWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20TwabABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc20TwabABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20TwabABI, TFunctionName>({ abi: erc20TwabABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20TwabApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20TwabABI, 'approve'>['abi'], 'approve'> & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20TwabABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20TwabABI, 'approve'>({ abi: erc20TwabABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20TwabDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20TwabABI, 'decreaseAllowance'>['abi'], 'decreaseAllowance'> & {
        functionName?: 'decreaseAllowance'
      }
    : UseContractWriteConfig<TMode, typeof erc20TwabABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20TwabABI, 'decreaseAllowance'>({ abi: erc20TwabABI, functionName: 'decreaseAllowance', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"delegate"`.
 */
export function useErc20TwabDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20TwabABI, 'delegate'>['abi'], 'delegate'> & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof erc20TwabABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20TwabABI, 'delegate'>({ abi: erc20TwabABI, functionName: 'delegate', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"delegateWithSignature"`.
 */
export function useErc20TwabDelegateWithSignature<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20TwabABI, 'delegateWithSignature'>['abi'], 'delegateWithSignature'> & {
        functionName?: 'delegateWithSignature'
      }
    : UseContractWriteConfig<TMode, typeof erc20TwabABI, 'delegateWithSignature'> & {
        abi?: never
        functionName?: 'delegateWithSignature'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20TwabABI, 'delegateWithSignature'>({
    abi: erc20TwabABI,
    functionName: 'delegateWithSignature',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20TwabIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20TwabABI, 'increaseAllowance'>['abi'], 'increaseAllowance'> & {
        functionName?: 'increaseAllowance'
      }
    : UseContractWriteConfig<TMode, typeof erc20TwabABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20TwabABI, 'increaseAllowance'>({ abi: erc20TwabABI, functionName: 'increaseAllowance', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20TwabPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20TwabABI, 'permit'>['abi'], 'permit'> & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof erc20TwabABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20TwabABI, 'permit'>({ abi: erc20TwabABI, functionName: 'permit', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20TwabTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20TwabABI, 'transfer'>['abi'], 'transfer'> & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20TwabABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20TwabABI, 'transfer'>({ abi: erc20TwabABI, functionName: 'transfer', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TwabTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20TwabABI, 'transferFrom'>['abi'], 'transferFrom'> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<TMode, typeof erc20TwabABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20TwabABI, 'transferFrom'>({ abi: erc20TwabABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20TwabABI}__.
 */
export function usePrepareErc20TwabWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20TwabABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20TwabABI, ...config } as UsePrepareContractWriteConfig<typeof erc20TwabABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20TwabApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20TwabABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20TwabABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof erc20TwabABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20TwabDecreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20TwabABI, 'decreaseAllowance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20TwabABI, functionName: 'decreaseAllowance', ...config } as UsePrepareContractWriteConfig<
    typeof erc20TwabABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareErc20TwabDelegate(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20TwabABI, 'delegate'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20TwabABI, functionName: 'delegate', ...config } as UsePrepareContractWriteConfig<
    typeof erc20TwabABI,
    'delegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"delegateWithSignature"`.
 */
export function usePrepareErc20TwabDelegateWithSignature(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20TwabABI, 'delegateWithSignature'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20TwabABI, functionName: 'delegateWithSignature', ...config } as UsePrepareContractWriteConfig<
    typeof erc20TwabABI,
    'delegateWithSignature'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20TwabIncreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20TwabABI, 'increaseAllowance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20TwabABI, functionName: 'increaseAllowance', ...config } as UsePrepareContractWriteConfig<
    typeof erc20TwabABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20TwabPermit(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20TwabABI, 'permit'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20TwabABI, functionName: 'permit', ...config } as UsePrepareContractWriteConfig<
    typeof erc20TwabABI,
    'permit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20TwabTransfer(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20TwabABI, 'transfer'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20TwabABI, functionName: 'transfer', ...config } as UsePrepareContractWriteConfig<
    typeof erc20TwabABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20TwabABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TwabTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20TwabABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20TwabABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc20TwabABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20TwabABI}__.
 */
export function useErc20TwabEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20TwabABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20TwabABI, ...config } as UseContractEventConfig<typeof erc20TwabABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20TwabABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20TwabApprovalEvent(config: Omit<UseContractEventConfig<typeof erc20TwabABI, 'Approval'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc20TwabABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof erc20TwabABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20TwabABI}__ and `eventName` set to `"Delegated"`.
 */
export function useErc20TwabDelegatedEvent(config: Omit<UseContractEventConfig<typeof erc20TwabABI, 'Delegated'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc20TwabABI, eventName: 'Delegated', ...config } as UseContractEventConfig<typeof erc20TwabABI, 'Delegated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20TwabABI}__ and `eventName` set to `"NewTotalSupplyTwab"`.
 */
export function useErc20TwabNewTotalSupplyTwabEvent(
  config: Omit<UseContractEventConfig<typeof erc20TwabABI, 'NewTotalSupplyTwab'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc20TwabABI, eventName: 'NewTotalSupplyTwab', ...config } as UseContractEventConfig<
    typeof erc20TwabABI,
    'NewTotalSupplyTwab'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20TwabABI}__ and `eventName` set to `"NewUserTwab"`.
 */
export function useErc20TwabNewUserTwabEvent(
  config: Omit<UseContractEventConfig<typeof erc20TwabABI, 'NewUserTwab'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc20TwabABI, eventName: 'NewUserTwab', ...config } as UseContractEventConfig<typeof erc20TwabABI, 'NewUserTwab'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20TwabABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TwabTransferEvent(config: Omit<UseContractEventConfig<typeof erc20TwabABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc20TwabABI, eventName: 'Transfer', ...config } as UseContractEventConfig<typeof erc20TwabABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link isvgModuleABI}__.
 */
export function useIsvgModule(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: isvgModuleABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link isvgModuleABI}__.
 */
export function useIsvgModuleRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof isvgModuleABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof isvgModuleABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: isvgModuleABI, ...config } as UseContractReadConfig<typeof isvgModuleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link isvgModuleABI}__ and `functionName` set to `"getEncoding"`.
 */
export function useIsvgModuleGetEncoding<TSelectData = ReadContractResult<typeof isvgModuleABI, 'getEncoding'>>(
  config: Omit<UseContractReadConfig<typeof isvgModuleABI, 'getEncoding', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: isvgModuleABI, functionName: 'getEncoding', ...config } as UseContractReadConfig<
    typeof isvgModuleABI,
    'getEncoding',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link isvgModuleABI}__ and `functionName` set to `"render"`.
 */
export function useIsvgModuleRender<TSelectData = ReadContractResult<typeof isvgModuleABI, 'render'>>(
  config: Omit<UseContractReadConfig<typeof isvgModuleABI, 'render', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: isvgModuleABI, functionName: 'render', ...config } as UseContractReadConfig<
    typeof isvgModuleABI,
    'render',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link isvgRenderABI}__.
 */
export function useIsvgRender(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: isvgRenderABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link isvgRenderABI}__.
 */
export function useIsvgRenderRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof isvgRenderABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof isvgRenderABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: isvgRenderABI, ...config } as UseContractReadConfig<typeof isvgRenderABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link isvgRenderABI}__ and `functionName` set to `"render"`.
 */
export function useIsvgRenderRender<TSelectData = ReadContractResult<typeof isvgRenderABI, 'render'>>(
  config: Omit<UseContractReadConfig<typeof isvgRenderABI, 'render', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: isvgRenderABI, functionName: 'render', ...config } as UseContractReadConfig<
    typeof isvgRenderABI,
    'render',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iStreamABI}__.
 */
export function useIStream(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iStreamABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStreamABI}__.
 */
export function useIStreamRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof iStreamABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof iStreamABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: iStreamABI, ...config } as UseContractReadConfig<typeof iStreamABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStreamABI}__ and `functionName` set to `"count"`.
 */
export function useIStreamCount<TSelectData = ReadContractResult<typeof iStreamABI, 'count'>>(
  config: Omit<UseContractReadConfig<typeof iStreamABI, 'count', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: iStreamABI, functionName: 'count', ...config } as UseContractReadConfig<typeof iStreamABI, 'count', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStreamABI}__ and `functionName` set to `"getData"`.
 */
export function useIStreamGetData<TSelectData = ReadContractResult<typeof iStreamABI, 'getData'>>(
  config: Omit<UseContractReadConfig<typeof iStreamABI, 'getData', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: iStreamABI, functionName: 'getData', ...config } as UseContractReadConfig<typeof iStreamABI, 'getData', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStreamABI}__ and `functionName` set to `"getValue"`.
 */
export function useIStreamGetValue<TSelectData = ReadContractResult<typeof iStreamABI, 'getValue'>>(
  config: Omit<UseContractReadConfig<typeof iStreamABI, 'getValue', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: iStreamABI, functionName: 'getValue', ...config } as UseContractReadConfig<
    typeof iStreamABI,
    'getValue',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iTraitsFetchABI}__.
 */
export function useITraitsFetch(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iTraitsFetchABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTraitsFetchABI}__.
 */
export function useITraitsFetchRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof iTraitsFetchABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof iTraitsFetchABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: iTraitsFetchABI, ...config } as UseContractReadConfig<typeof iTraitsFetchABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTraitsFetchABI}__ and `functionName` set to `"fetch"`.
 */
export function useITraitsFetchFetch<TSelectData = ReadContractResult<typeof iTraitsFetchABI, 'fetch'>>(
  config: Omit<UseContractReadConfig<typeof iTraitsFetchABI, 'fetch', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: iTraitsFetchABI, functionName: 'fetch', ...config } as UseContractReadConfig<
    typeof iTraitsFetchABI,
    'fetch',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownedABI}__.
 */
export function useOwned(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownedABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedABI}__.
 */
export function useOwnedRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof ownedABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ownedABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ownedABI, ...config } as UseContractReadConfig<typeof ownedABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnedOwner<TSelectData = ReadContractResult<typeof ownedABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof ownedABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownedABI, functionName: 'owner', ...config } as UseContractReadConfig<typeof ownedABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedABI}__.
 */
export function useOwnedWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ownedABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedABI, TFunctionName>({ abi: ownedABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnedTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof ownedABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedABI, 'transferOwnership'>({ abi: ownedABI, functionName: 'transferOwnership', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedABI}__.
 */
export function usePrepareOwnedWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedABI, ...config } as UsePrepareContractWriteConfig<typeof ownedABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnedTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof ownedABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownedABI}__.
 */
export function useOwnedEvent<TEventName extends string>(config: Omit<UseContractEventConfig<typeof ownedABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: ownedABI, ...config } as UseContractEventConfig<typeof ownedABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownedABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnedOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof ownedABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownedABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof ownedABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownedThreeStepABI}__.
 */
export function useOwnedThreeStep(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownedThreeStepABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedThreeStepABI}__.
 */
export function useOwnedThreeStepRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof ownedThreeStepABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ownedThreeStepABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ownedThreeStepABI, ...config } as UseContractReadConfig<typeof ownedThreeStepABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedThreeStepABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnedThreeStepOwner<TSelectData = ReadContractResult<typeof ownedThreeStepABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof ownedThreeStepABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownedThreeStepABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof ownedThreeStepABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedThreeStepABI}__.
 */
export function useOwnedThreeStepWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedThreeStepABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ownedThreeStepABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedThreeStepABI, TFunctionName>({ abi: ownedThreeStepABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedThreeStepABI}__ and `functionName` set to `"confirmOwner"`.
 */
export function useOwnedThreeStepConfirmOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedThreeStepABI, 'confirmOwner'>['abi'], 'confirmOwner'> & {
        functionName?: 'confirmOwner'
      }
    : UseContractWriteConfig<TMode, typeof ownedThreeStepABI, 'confirmOwner'> & {
        abi?: never
        functionName?: 'confirmOwner'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedThreeStepABI, 'confirmOwner'>({ abi: ownedThreeStepABI, functionName: 'confirmOwner', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedThreeStepABI}__ and `functionName` set to `"renounceOwner"`.
 */
export function useOwnedThreeStepRenounceOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedThreeStepABI, 'renounceOwner'>['abi'], 'renounceOwner'> & {
        functionName?: 'renounceOwner'
      }
    : UseContractWriteConfig<TMode, typeof ownedThreeStepABI, 'renounceOwner'> & {
        abi?: never
        functionName?: 'renounceOwner'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedThreeStepABI, 'renounceOwner'>({
    abi: ownedThreeStepABI,
    functionName: 'renounceOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedThreeStepABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnedThreeStepTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedThreeStepABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof ownedThreeStepABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedThreeStepABI, 'transferOwnership'>({
    abi: ownedThreeStepABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedThreeStepABI}__.
 */
export function usePrepareOwnedThreeStepWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedThreeStepABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedThreeStepABI, ...config } as UsePrepareContractWriteConfig<typeof ownedThreeStepABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedThreeStepABI}__ and `functionName` set to `"confirmOwner"`.
 */
export function usePrepareOwnedThreeStepConfirmOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedThreeStepABI, 'confirmOwner'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedThreeStepABI, functionName: 'confirmOwner', ...config } as UsePrepareContractWriteConfig<
    typeof ownedThreeStepABI,
    'confirmOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedThreeStepABI}__ and `functionName` set to `"renounceOwner"`.
 */
export function usePrepareOwnedThreeStepRenounceOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedThreeStepABI, 'renounceOwner'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedThreeStepABI, functionName: 'renounceOwner', ...config } as UsePrepareContractWriteConfig<
    typeof ownedThreeStepABI,
    'renounceOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedThreeStepABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnedThreeStepTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedThreeStepABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedThreeStepABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof ownedThreeStepABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownedThreeStepABI}__.
 */
export function useOwnedThreeStepEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownedThreeStepABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ownedThreeStepABI, ...config } as UseContractEventConfig<typeof ownedThreeStepABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownedThreeStepABI}__ and `eventName` set to `"OwnerUpdateInitiated"`.
 */
export function useOwnedThreeStepOwnerUpdateInitiatedEvent(
  config: Omit<UseContractEventConfig<typeof ownedThreeStepABI, 'OwnerUpdateInitiated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownedThreeStepABI, eventName: 'OwnerUpdateInitiated', ...config } as UseContractEventConfig<
    typeof ownedThreeStepABI,
    'OwnerUpdateInitiated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownedThreeStepABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnedThreeStepOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof ownedThreeStepABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownedThreeStepABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof ownedThreeStepABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link observationLibABI}__.
 */
export function useObservationLib(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: observationLibABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link observationLibABI}__.
 */
export function useObservationLibRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof observationLibABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof observationLibABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: observationLibABI, ...config } as UseContractReadConfig<typeof observationLibABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link observationLibABI}__ and `functionName` set to `"MAX_CARDINALITY"`.
 */
export function useObservationLibMaxCardinality<TSelectData = ReadContractResult<typeof observationLibABI, 'MAX_CARDINALITY'>>(
  config: Omit<UseContractReadConfig<typeof observationLibABI, 'MAX_CARDINALITY', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: observationLibABI, functionName: 'MAX_CARDINALITY', ...config } as UseContractReadConfig<
    typeof observationLibABI,
    'MAX_CARDINALITY',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link twabLibABI}__.
 */
export function useTwabLib(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: twabLibABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twabLibABI}__.
 */
export function useTwabLibRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof twabLibABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof twabLibABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: twabLibABI, ...config } as UseContractReadConfig<typeof twabLibABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link twabLibABI}__ and `functionName` set to `"MAX_CARDINALITY"`.
 */
export function useTwabLibMaxCardinality<TSelectData = ReadContractResult<typeof twabLibABI, 'MAX_CARDINALITY'>>(
  config: Omit<UseContractReadConfig<typeof twabLibABI, 'MAX_CARDINALITY', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: twabLibABI, functionName: 'MAX_CARDINALITY', ...config } as UseContractReadConfig<
    typeof twabLibABI,
    'MAX_CARDINALITY',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link create3ABI}__.
 */
export function useCreate3(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: create3ABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link eip712ABI}__.
 */
export function useEip712(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: eip712ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712ABI}__.
 */
export function useEip712Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof eip712ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof eip712ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: eip712ABI, ...config } as UseContractReadConfig<typeof eip712ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eip712ABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useEip712DomainSeparator<TSelectData = ReadContractResult<typeof eip712ABI, 'DOMAIN_SEPARATOR'>>(
  config: Omit<UseContractReadConfig<typeof eip712ABI, 'DOMAIN_SEPARATOR', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: eip712ABI, functionName: 'DOMAIN_SEPARATOR', ...config } as UseContractReadConfig<
    typeof eip712ABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<TSelectData = ReadContractResult<typeof erc165ABI, 'supportsInterface'>>(
  config: Omit<UseContractReadConfig<typeof erc165ABI, 'supportsInterface', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc165ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc165ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link fixedPointMathLibABI}__.
 */
export function useFixedPointMathLib(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: fixedPointMathLibABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fixedPointMathLibABI}__.
 */
export function useFixedPointMathLibRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof fixedPointMathLibABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof fixedPointMathLibABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: fixedPointMathLibABI, ...config } as UseContractReadConfig<typeof fixedPointMathLibABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fixedPointMathLibABI}__ and `functionName` set to `"factorial"`.
 */
export function useFixedPointMathLibFactorial<TSelectData = ReadContractResult<typeof fixedPointMathLibABI, 'factorial'>>(
  config: Omit<UseContractReadConfig<typeof fixedPointMathLibABI, 'factorial', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: fixedPointMathLibABI, functionName: 'factorial', ...config } as UseContractReadConfig<
    typeof fixedPointMathLibABI,
    'factorial',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link libCloneABI}__.
 */
export function useLibClone(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: libCloneABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link libStringABI}__.
 */
export function useLibString(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: libStringABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link permitABI}__.
 */
export function usePermit(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: permitABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permitABI}__.
 */
export function usePermitWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof permitABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof permitABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof permitABI, TFunctionName>({ abi: permitABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permitABI}__ and `functionName` set to `"permit"`.
 */
export function usePermitPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof permitABI, 'permit'>['abi'], 'permit'> & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof permitABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof permitABI, 'permit'>({ abi: permitABI, functionName: 'permit', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permitABI}__.
 */
export function usePreparePermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof permitABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: permitABI, ...config } as UsePrepareContractWriteConfig<typeof permitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permitABI}__ and `functionName` set to `"permit"`.
 */
export function usePreparePermitPermit(config: Omit<UsePrepareContractWriteConfig<typeof permitABI, 'permit'>, 'abi' | 'functionName'> = {} as any) {
  return usePrepareContractWrite({ abi: permitABI, functionName: 'permit', ...config } as UsePrepareContractWriteConfig<typeof permitABI, 'permit'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link multicallableABI}__.
 */
export function useMulticallable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: multicallableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicallableABI}__.
 */
export function useMulticallableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof multicallableABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof multicallableABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof multicallableABI, TFunctionName>({ abi: multicallableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicallableABI}__ and `functionName` set to `"multicall"`.
 */
export function useMulticallableMulticall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof multicallableABI, 'multicall'>['abi'], 'multicall'> & {
        functionName?: 'multicall'
      }
    : UseContractWriteConfig<TMode, typeof multicallableABI, 'multicall'> & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any
) {
  return useContractWrite<TMode, typeof multicallableABI, 'multicall'>({ abi: multicallableABI, functionName: 'multicall', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicallableABI}__.
 */
export function usePrepareMulticallableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof multicallableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: multicallableABI, ...config } as UsePrepareContractWriteConfig<typeof multicallableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicallableABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareMulticallableMulticall(
  config: Omit<UsePrepareContractWriteConfig<typeof multicallableABI, 'multicall'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: multicallableABI, functionName: 'multicall', ...config } as UsePrepareContractWriteConfig<
    typeof multicallableABI,
    'multicall'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link reentrancyGuardABI}__.
 */
export function useReentrancyGuard(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: reentrancyGuardABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link sstore2ABI}__.
 */
export function useSstore2(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: sstore2ABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link safeCastLibABI}__.
 */
export function useSafeCastLib(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: safeCastLibABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link safeTransferLibABI}__.
 */
export function useSafeTransferLib(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: safeTransferLibABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link safeMulticallableABI}__.
 */
export function useSafeMulticallable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: safeMulticallableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeMulticallableABI}__.
 */
export function useSafeMulticallableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof safeMulticallableABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof safeMulticallableABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof safeMulticallableABI, TFunctionName>({ abi: safeMulticallableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeMulticallableABI}__ and `functionName` set to `"multicall"`.
 */
export function useSafeMulticallableMulticall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof safeMulticallableABI, 'multicall'>['abi'], 'multicall'> & {
        functionName?: 'multicall'
      }
    : UseContractWriteConfig<TMode, typeof safeMulticallableABI, 'multicall'> & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any
) {
  return useContractWrite<TMode, typeof safeMulticallableABI, 'multicall'>({ abi: safeMulticallableABI, functionName: 'multicall', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeMulticallableABI}__.
 */
export function usePrepareSafeMulticallableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof safeMulticallableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: safeMulticallableABI, ...config } as UsePrepareContractWriteConfig<
    typeof safeMulticallableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeMulticallableABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareSafeMulticallableMulticall(
  config: Omit<UsePrepareContractWriteConfig<typeof safeMulticallableABI, 'multicall'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: safeMulticallableABI, functionName: 'multicall', ...config } as UsePrepareContractWriteConfig<
    typeof safeMulticallableABI,
    'multicall'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link selfPermitABI}__.
 */
export function useSelfPermit(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: selfPermitABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link selfPermitABI}__.
 */
export function useSelfPermitWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof selfPermitABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof selfPermitABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof selfPermitABI, TFunctionName>({ abi: selfPermitABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermit"`.
 */
export function useSelfPermitSelfPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof selfPermitABI, 'selfPermit'>['abi'], 'selfPermit'> & {
        functionName?: 'selfPermit'
      }
    : UseContractWriteConfig<TMode, typeof selfPermitABI, 'selfPermit'> & {
        abi?: never
        functionName?: 'selfPermit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof selfPermitABI, 'selfPermit'>({ abi: selfPermitABI, functionName: 'selfPermit', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermit1155"`.
 */
export function useSelfPermitSelfPermit1155<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof selfPermitABI, 'selfPermit1155'>['abi'], 'selfPermit1155'> & {
        functionName?: 'selfPermit1155'
      }
    : UseContractWriteConfig<TMode, typeof selfPermitABI, 'selfPermit1155'> & {
        abi?: never
        functionName?: 'selfPermit1155'
      } = {} as any
) {
  return useContractWrite<TMode, typeof selfPermitABI, 'selfPermit1155'>({ abi: selfPermitABI, functionName: 'selfPermit1155', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermit721"`.
 */
export function useSelfPermitSelfPermit721<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof selfPermitABI, 'selfPermit721'>['abi'], 'selfPermit721'> & {
        functionName?: 'selfPermit721'
      }
    : UseContractWriteConfig<TMode, typeof selfPermitABI, 'selfPermit721'> & {
        abi?: never
        functionName?: 'selfPermit721'
      } = {} as any
) {
  return useContractWrite<TMode, typeof selfPermitABI, 'selfPermit721'>({ abi: selfPermitABI, functionName: 'selfPermit721', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermitAllowed"`.
 */
export function useSelfPermitSelfPermitAllowed<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof selfPermitABI, 'selfPermitAllowed'>['abi'], 'selfPermitAllowed'> & {
        functionName?: 'selfPermitAllowed'
      }
    : UseContractWriteConfig<TMode, typeof selfPermitABI, 'selfPermitAllowed'> & {
        abi?: never
        functionName?: 'selfPermitAllowed'
      } = {} as any
) {
  return useContractWrite<TMode, typeof selfPermitABI, 'selfPermitAllowed'>({
    abi: selfPermitABI,
    functionName: 'selfPermitAllowed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link selfPermitABI}__.
 */
export function usePrepareSelfPermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof selfPermitABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: selfPermitABI, ...config } as UsePrepareContractWriteConfig<typeof selfPermitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermit"`.
 */
export function usePrepareSelfPermitSelfPermit(
  config: Omit<UsePrepareContractWriteConfig<typeof selfPermitABI, 'selfPermit'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: selfPermitABI, functionName: 'selfPermit', ...config } as UsePrepareContractWriteConfig<
    typeof selfPermitABI,
    'selfPermit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermit1155"`.
 */
export function usePrepareSelfPermitSelfPermit1155(
  config: Omit<UsePrepareContractWriteConfig<typeof selfPermitABI, 'selfPermit1155'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: selfPermitABI, functionName: 'selfPermit1155', ...config } as UsePrepareContractWriteConfig<
    typeof selfPermitABI,
    'selfPermit1155'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermit721"`.
 */
export function usePrepareSelfPermitSelfPermit721(
  config: Omit<UsePrepareContractWriteConfig<typeof selfPermitABI, 'selfPermit721'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: selfPermitABI, functionName: 'selfPermit721', ...config } as UsePrepareContractWriteConfig<
    typeof selfPermitABI,
    'selfPermit721'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermitAllowed"`.
 */
export function usePrepareSelfPermitSelfPermitAllowed(
  config: Omit<UsePrepareContractWriteConfig<typeof selfPermitABI, 'selfPermitAllowed'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: selfPermitABI, functionName: 'selfPermitAllowed', ...config } as UsePrepareContractWriteConfig<
    typeof selfPermitABI,
    'selfPermitAllowed'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721StorageABI}__.
 */
export function useErc721Storage(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721StorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__.
 */
export function useErc721StorageRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof erc721StorageABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, ...config } as UseContractReadConfig<typeof erc721StorageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"constructContractURI"`.
 */
export function useErc721StorageConstructContractUri<TSelectData = ReadContractResult<typeof erc721StorageABI, 'constructContractURI'>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, 'constructContractURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, functionName: 'constructContractURI', ...config } as UseContractReadConfig<
    typeof erc721StorageABI,
    'constructContractURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"constructTokenURI"`.
 */
export function useErc721StorageConstructTokenUri<TSelectData = ReadContractResult<typeof erc721StorageABI, 'constructTokenURI'>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, 'constructTokenURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, functionName: 'constructTokenURI', ...config } as UseContractReadConfig<
    typeof erc721StorageABI,
    'constructTokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"getContractDescription"`.
 */
export function useErc721StorageGetContractDescription<TSelectData = ReadContractResult<typeof erc721StorageABI, 'getContractDescription'>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, 'getContractDescription', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, functionName: 'getContractDescription', ...config } as UseContractReadConfig<
    typeof erc721StorageABI,
    'getContractDescription',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"getERC721KRender"`.
 */
export function useErc721StorageGetErc721KRender<TSelectData = ReadContractResult<typeof erc721StorageABI, 'getERC721KRender'>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, 'getERC721KRender', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, functionName: 'getERC721KRender', ...config } as UseContractReadConfig<
    typeof erc721StorageABI,
    'getERC721KRender',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"getERC72KTraits"`.
 */
export function useErc721StorageGetErc72KTraits<TSelectData = ReadContractResult<typeof erc721StorageABI, 'getERC72KTraits'>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, 'getERC72KTraits', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, functionName: 'getERC72KTraits', ...config } as UseContractReadConfig<
    typeof erc721StorageABI,
    'getERC72KTraits',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"hasAllRoles"`.
 */
export function useErc721StorageHasAllRoles<TSelectData = ReadContractResult<typeof erc721StorageABI, 'hasAllRoles'>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, 'hasAllRoles', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, functionName: 'hasAllRoles', ...config } as UseContractReadConfig<
    typeof erc721StorageABI,
    'hasAllRoles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"hasAnyRole"`.
 */
export function useErc721StorageHasAnyRole<TSelectData = ReadContractResult<typeof erc721StorageABI, 'hasAnyRole'>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, 'hasAnyRole', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, functionName: 'hasAnyRole', ...config } as UseContractReadConfig<
    typeof erc721StorageABI,
    'hasAnyRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"ordinalsFromRoles"`.
 */
export function useErc721StorageOrdinalsFromRoles<TSelectData = ReadContractResult<typeof erc721StorageABI, 'ordinalsFromRoles'>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, 'ordinalsFromRoles', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, functionName: 'ordinalsFromRoles', ...config } as UseContractReadConfig<
    typeof erc721StorageABI,
    'ordinalsFromRoles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"owner"`.
 */
export function useErc721StorageOwner<TSelectData = ReadContractResult<typeof erc721StorageABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof erc721StorageABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"ownershipHandoverExpiresAt"`.
 */
export function useErc721StorageOwnershipHandoverExpiresAt<TSelectData = ReadContractResult<typeof erc721StorageABI, 'ownershipHandoverExpiresAt'>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, 'ownershipHandoverExpiresAt', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, functionName: 'ownershipHandoverExpiresAt', ...config } as UseContractReadConfig<
    typeof erc721StorageABI,
    'ownershipHandoverExpiresAt',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"ownershipHandoverValidFor"`.
 */
export function useErc721StorageOwnershipHandoverValidFor<TSelectData = ReadContractResult<typeof erc721StorageABI, 'ownershipHandoverValidFor'>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, 'ownershipHandoverValidFor', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, functionName: 'ownershipHandoverValidFor', ...config } as UseContractReadConfig<
    typeof erc721StorageABI,
    'ownershipHandoverValidFor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"render"`.
 */
export function useErc721StorageRender<TSelectData = ReadContractResult<typeof erc721StorageABI, 'render'>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, 'render', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, functionName: 'render', ...config } as UseContractReadConfig<
    typeof erc721StorageABI,
    'render',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"rolesFromOrdinals"`.
 */
export function useErc721StorageRolesFromOrdinals<TSelectData = ReadContractResult<typeof erc721StorageABI, 'rolesFromOrdinals'>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, 'rolesFromOrdinals', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, functionName: 'rolesFromOrdinals', ...config } as UseContractReadConfig<
    typeof erc721StorageABI,
    'rolesFromOrdinals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"rolesOf"`.
 */
export function useErc721StorageRolesOf<TSelectData = ReadContractResult<typeof erc721StorageABI, 'rolesOf'>>(
  config: Omit<UseContractReadConfig<typeof erc721StorageABI, 'rolesOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721StorageABI, functionName: 'rolesOf', ...config } as UseContractReadConfig<
    typeof erc721StorageABI,
    'rolesOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721StorageABI}__.
 */
export function useErc721StorageWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721StorageABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc721StorageABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721StorageABI, TFunctionName>({ abi: erc721StorageABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"cancelOwnershipHandover"`.
 */
export function useErc721StorageCancelOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721StorageABI, 'cancelOwnershipHandover'>['abi'],
        'cancelOwnershipHandover'
      > & { functionName?: 'cancelOwnershipHandover' }
    : UseContractWriteConfig<TMode, typeof erc721StorageABI, 'cancelOwnershipHandover'> & {
        abi?: never
        functionName?: 'cancelOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721StorageABI, 'cancelOwnershipHandover'>({
    abi: erc721StorageABI,
    functionName: 'cancelOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"completeOwnershipHandover"`.
 */
export function useErc721StorageCompleteOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721StorageABI, 'completeOwnershipHandover'>['abi'],
        'completeOwnershipHandover'
      > & { functionName?: 'completeOwnershipHandover' }
    : UseContractWriteConfig<TMode, typeof erc721StorageABI, 'completeOwnershipHandover'> & {
        abi?: never
        functionName?: 'completeOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721StorageABI, 'completeOwnershipHandover'>({
    abi: erc721StorageABI,
    functionName: 'completeOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"grantRoles"`.
 */
export function useErc721StorageGrantRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721StorageABI, 'grantRoles'>['abi'], 'grantRoles'> & {
        functionName?: 'grantRoles'
      }
    : UseContractWriteConfig<TMode, typeof erc721StorageABI, 'grantRoles'> & {
        abi?: never
        functionName?: 'grantRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721StorageABI, 'grantRoles'>({ abi: erc721StorageABI, functionName: 'grantRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useErc721StorageRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721StorageABI, 'renounceOwnership'>['abi'], 'renounceOwnership'> & {
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<TMode, typeof erc721StorageABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721StorageABI, 'renounceOwnership'>({
    abi: erc721StorageABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"renounceRoles"`.
 */
export function useErc721StorageRenounceRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721StorageABI, 'renounceRoles'>['abi'], 'renounceRoles'> & {
        functionName?: 'renounceRoles'
      }
    : UseContractWriteConfig<TMode, typeof erc721StorageABI, 'renounceRoles'> & {
        abi?: never
        functionName?: 'renounceRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721StorageABI, 'renounceRoles'>({ abi: erc721StorageABI, functionName: 'renounceRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"requestOwnershipHandover"`.
 */
export function useErc721StorageRequestOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721StorageABI, 'requestOwnershipHandover'>['abi'],
        'requestOwnershipHandover'
      > & { functionName?: 'requestOwnershipHandover' }
    : UseContractWriteConfig<TMode, typeof erc721StorageABI, 'requestOwnershipHandover'> & {
        abi?: never
        functionName?: 'requestOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721StorageABI, 'requestOwnershipHandover'>({
    abi: erc721StorageABI,
    functionName: 'requestOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"revokeRoles"`.
 */
export function useErc721StorageRevokeRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721StorageABI, 'revokeRoles'>['abi'], 'revokeRoles'> & {
        functionName?: 'revokeRoles'
      }
    : UseContractWriteConfig<TMode, typeof erc721StorageABI, 'revokeRoles'> & {
        abi?: never
        functionName?: 'revokeRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721StorageABI, 'revokeRoles'>({ abi: erc721StorageABI, functionName: 'revokeRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"setContractURI"`.
 */
export function useErc721StorageSetContractUri<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721StorageABI, 'setContractURI'>['abi'], 'setContractURI'> & {
        functionName?: 'setContractURI'
      }
    : UseContractWriteConfig<TMode, typeof erc721StorageABI, 'setContractURI'> & {
        abi?: never
        functionName?: 'setContractURI'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721StorageABI, 'setContractURI'>({
    abi: erc721StorageABI,
    functionName: 'setContractURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"setSvgRender"`.
 */
export function useErc721StorageSetSvgRender<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721StorageABI, 'setSvgRender'>['abi'], 'setSvgRender'> & {
        functionName?: 'setSvgRender'
      }
    : UseContractWriteConfig<TMode, typeof erc721StorageABI, 'setSvgRender'> & {
        abi?: never
        functionName?: 'setSvgRender'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721StorageABI, 'setSvgRender'>({ abi: erc721StorageABI, functionName: 'setSvgRender', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"setTraitsFetch"`.
 */
export function useErc721StorageSetTraitsFetch<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721StorageABI, 'setTraitsFetch'>['abi'], 'setTraitsFetch'> & {
        functionName?: 'setTraitsFetch'
      }
    : UseContractWriteConfig<TMode, typeof erc721StorageABI, 'setTraitsFetch'> & {
        abi?: never
        functionName?: 'setTraitsFetch'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721StorageABI, 'setTraitsFetch'>({
    abi: erc721StorageABI,
    functionName: 'setTraitsFetch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useErc721StorageTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721StorageABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof erc721StorageABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721StorageABI, 'transferOwnership'>({
    abi: erc721StorageABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721StorageABI}__.
 */
export function usePrepareErc721StorageWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721StorageABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721StorageABI, ...config } as UsePrepareContractWriteConfig<typeof erc721StorageABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"cancelOwnershipHandover"`.
 */
export function usePrepareErc721StorageCancelOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721StorageABI, 'cancelOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721StorageABI, functionName: 'cancelOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof erc721StorageABI,
    'cancelOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"completeOwnershipHandover"`.
 */
export function usePrepareErc721StorageCompleteOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721StorageABI, 'completeOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721StorageABI, functionName: 'completeOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof erc721StorageABI,
    'completeOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"grantRoles"`.
 */
export function usePrepareErc721StorageGrantRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721StorageABI, 'grantRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721StorageABI, functionName: 'grantRoles', ...config } as UsePrepareContractWriteConfig<
    typeof erc721StorageABI,
    'grantRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareErc721StorageRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721StorageABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721StorageABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof erc721StorageABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"renounceRoles"`.
 */
export function usePrepareErc721StorageRenounceRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721StorageABI, 'renounceRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721StorageABI, functionName: 'renounceRoles', ...config } as UsePrepareContractWriteConfig<
    typeof erc721StorageABI,
    'renounceRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"requestOwnershipHandover"`.
 */
export function usePrepareErc721StorageRequestOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721StorageABI, 'requestOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721StorageABI, functionName: 'requestOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof erc721StorageABI,
    'requestOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"revokeRoles"`.
 */
export function usePrepareErc721StorageRevokeRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721StorageABI, 'revokeRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721StorageABI, functionName: 'revokeRoles', ...config } as UsePrepareContractWriteConfig<
    typeof erc721StorageABI,
    'revokeRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"setContractURI"`.
 */
export function usePrepareErc721StorageSetContractUri(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721StorageABI, 'setContractURI'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721StorageABI, functionName: 'setContractURI', ...config } as UsePrepareContractWriteConfig<
    typeof erc721StorageABI,
    'setContractURI'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"setSvgRender"`.
 */
export function usePrepareErc721StorageSetSvgRender(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721StorageABI, 'setSvgRender'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721StorageABI, functionName: 'setSvgRender', ...config } as UsePrepareContractWriteConfig<
    typeof erc721StorageABI,
    'setSvgRender'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"setTraitsFetch"`.
 */
export function usePrepareErc721StorageSetTraitsFetch(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721StorageABI, 'setTraitsFetch'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721StorageABI, functionName: 'setTraitsFetch', ...config } as UsePrepareContractWriteConfig<
    typeof erc721StorageABI,
    'setTraitsFetch'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721StorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareErc721StorageTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721StorageABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721StorageABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof erc721StorageABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721StorageABI}__.
 */
export function useErc721StorageEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721StorageABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc721StorageABI, ...config } as UseContractEventConfig<typeof erc721StorageABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721StorageABI}__ and `eventName` set to `"ContractURIUpdated"`.
 */
export function useErc721StorageContractUriUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof erc721StorageABI, 'ContractURIUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721StorageABI, eventName: 'ContractURIUpdated', ...config } as UseContractEventConfig<
    typeof erc721StorageABI,
    'ContractURIUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721StorageABI}__ and `eventName` set to `"OwnershipHandoverCanceled"`.
 */
export function useErc721StorageOwnershipHandoverCanceledEvent(
  config: Omit<UseContractEventConfig<typeof erc721StorageABI, 'OwnershipHandoverCanceled'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721StorageABI, eventName: 'OwnershipHandoverCanceled', ...config } as UseContractEventConfig<
    typeof erc721StorageABI,
    'OwnershipHandoverCanceled'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721StorageABI}__ and `eventName` set to `"OwnershipHandoverRequested"`.
 */
export function useErc721StorageOwnershipHandoverRequestedEvent(
  config: Omit<UseContractEventConfig<typeof erc721StorageABI, 'OwnershipHandoverRequested'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721StorageABI, eventName: 'OwnershipHandoverRequested', ...config } as UseContractEventConfig<
    typeof erc721StorageABI,
    'OwnershipHandoverRequested'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721StorageABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useErc721StorageOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof erc721StorageABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721StorageABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof erc721StorageABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721StorageABI}__ and `eventName` set to `"RolesUpdated"`.
 */
export function useErc721StorageRolesUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof erc721StorageABI, 'RolesUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721StorageABI, eventName: 'RolesUpdated', ...config } as UseContractEventConfig<
    typeof erc721StorageABI,
    'RolesUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721StorageABI}__ and `eventName` set to `"SvgRenderUpdated"`.
 */
export function useErc721StorageSvgRenderUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof erc721StorageABI, 'SvgRenderUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721StorageABI, eventName: 'SvgRenderUpdated', ...config } as UseContractEventConfig<
    typeof erc721StorageABI,
    'SvgRenderUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721StorageABI}__ and `eventName` set to `"TraitsFetchUpdated"`.
 */
export function useErc721StorageTraitsFetchUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof erc721StorageABI, 'TraitsFetchUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721StorageABI, eventName: 'TraitsFetchUpdated', ...config } as UseContractEventConfig<
    typeof erc721StorageABI,
    'TraitsFetchUpdated'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721KABI}__.
 */
export function useErc721K(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721KABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__.
 */
export function useErc721KRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof erc721KABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, ...config } as UseContractReadConfig<typeof erc721KABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721KBalanceOf<TSelectData = ReadContractResult<typeof erc721KABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc721KABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"contractURI"`.
 */
export function useErc721KContractUri<TSelectData = ReadContractResult<typeof erc721KABI, 'contractURI'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'contractURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'contractURI', ...config } as UseContractReadConfig<
    typeof erc721KABI,
    'contractURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721KGetApproved<TSelectData = ReadContractResult<typeof erc721KABI, 'getApproved'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'getApproved', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof erc721KABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"getERC721Storage"`.
 */
export function useErc721KGetErc721Storage<TSelectData = ReadContractResult<typeof erc721KABI, 'getERC721Storage'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'getERC721Storage', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'getERC721Storage', ...config } as UseContractReadConfig<
    typeof erc721KABI,
    'getERC721Storage',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"hasAllRoles"`.
 */
export function useErc721KHasAllRoles<TSelectData = ReadContractResult<typeof erc721KABI, 'hasAllRoles'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'hasAllRoles', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'hasAllRoles', ...config } as UseContractReadConfig<
    typeof erc721KABI,
    'hasAllRoles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"hasAnyRole"`.
 */
export function useErc721KHasAnyRole<TSelectData = ReadContractResult<typeof erc721KABI, 'hasAnyRole'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'hasAnyRole', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'hasAnyRole', ...config } as UseContractReadConfig<
    typeof erc721KABI,
    'hasAnyRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721KIsApprovedForAll<TSelectData = ReadContractResult<typeof erc721KABI, 'isApprovedForAll'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'isApprovedForAll', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof erc721KABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"name"`.
 */
export function useErc721KName<TSelectData = ReadContractResult<typeof erc721KABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'name', ...config } as UseContractReadConfig<typeof erc721KABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"ordinalsFromRoles"`.
 */
export function useErc721KOrdinalsFromRoles<TSelectData = ReadContractResult<typeof erc721KABI, 'ordinalsFromRoles'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'ordinalsFromRoles', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'ordinalsFromRoles', ...config } as UseContractReadConfig<
    typeof erc721KABI,
    'ordinalsFromRoles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"owner"`.
 */
export function useErc721KOwner<TSelectData = ReadContractResult<typeof erc721KABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'owner', ...config } as UseContractReadConfig<typeof erc721KABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721KOwnerOf<TSelectData = ReadContractResult<typeof erc721KABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<typeof erc721KABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"ownershipHandoverExpiresAt"`.
 */
export function useErc721KOwnershipHandoverExpiresAt<TSelectData = ReadContractResult<typeof erc721KABI, 'ownershipHandoverExpiresAt'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'ownershipHandoverExpiresAt', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'ownershipHandoverExpiresAt', ...config } as UseContractReadConfig<
    typeof erc721KABI,
    'ownershipHandoverExpiresAt',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"ownershipHandoverValidFor"`.
 */
export function useErc721KOwnershipHandoverValidFor<TSelectData = ReadContractResult<typeof erc721KABI, 'ownershipHandoverValidFor'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'ownershipHandoverValidFor', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'ownershipHandoverValidFor', ...config } as UseContractReadConfig<
    typeof erc721KABI,
    'ownershipHandoverValidFor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"rolesFromOrdinals"`.
 */
export function useErc721KRolesFromOrdinals<TSelectData = ReadContractResult<typeof erc721KABI, 'rolesFromOrdinals'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'rolesFromOrdinals', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'rolesFromOrdinals', ...config } as UseContractReadConfig<
    typeof erc721KABI,
    'rolesFromOrdinals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"rolesOf"`.
 */
export function useErc721KRolesOf<TSelectData = ReadContractResult<typeof erc721KABI, 'rolesOf'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'rolesOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'rolesOf', ...config } as UseContractReadConfig<typeof erc721KABI, 'rolesOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721KSupportsInterface<TSelectData = ReadContractResult<typeof erc721KABI, 'supportsInterface'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'supportsInterface', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc721KABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721KSymbol<TSelectData = ReadContractResult<typeof erc721KABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'symbol', ...config } as UseContractReadConfig<typeof erc721KABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721KTokenUri<TSelectData = ReadContractResult<typeof erc721KABI, 'tokenURI'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'tokenURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof erc721KABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721KTotalSupply<TSelectData = ReadContractResult<typeof erc721KABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof erc721KABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721KABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof erc721KABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721KABI}__.
 */
export function useErc721KWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721KABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc721KABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721KABI, TFunctionName>({ abi: erc721KABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721KApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721KABI, 'approve'>['abi'], 'approve'> & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721KABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721KABI, 'approve'>({ abi: erc721KABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"cancelOwnershipHandover"`.
 */
export function useErc721KCancelOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721KABI, 'cancelOwnershipHandover'>['abi'], 'cancelOwnershipHandover'> & {
        functionName?: 'cancelOwnershipHandover'
      }
    : UseContractWriteConfig<TMode, typeof erc721KABI, 'cancelOwnershipHandover'> & {
        abi?: never
        functionName?: 'cancelOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721KABI, 'cancelOwnershipHandover'>({
    abi: erc721KABI,
    functionName: 'cancelOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"completeOwnershipHandover"`.
 */
export function useErc721KCompleteOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721KABI, 'completeOwnershipHandover'>['abi'],
        'completeOwnershipHandover'
      > & { functionName?: 'completeOwnershipHandover' }
    : UseContractWriteConfig<TMode, typeof erc721KABI, 'completeOwnershipHandover'> & {
        abi?: never
        functionName?: 'completeOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721KABI, 'completeOwnershipHandover'>({
    abi: erc721KABI,
    functionName: 'completeOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"grantRoles"`.
 */
export function useErc721KGrantRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721KABI, 'grantRoles'>['abi'], 'grantRoles'> & {
        functionName?: 'grantRoles'
      }
    : UseContractWriteConfig<TMode, typeof erc721KABI, 'grantRoles'> & {
        abi?: never
        functionName?: 'grantRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721KABI, 'grantRoles'>({ abi: erc721KABI, functionName: 'grantRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useErc721KRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721KABI, 'renounceOwnership'>['abi'], 'renounceOwnership'> & {
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<TMode, typeof erc721KABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721KABI, 'renounceOwnership'>({ abi: erc721KABI, functionName: 'renounceOwnership', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"renounceRoles"`.
 */
export function useErc721KRenounceRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721KABI, 'renounceRoles'>['abi'], 'renounceRoles'> & {
        functionName?: 'renounceRoles'
      }
    : UseContractWriteConfig<TMode, typeof erc721KABI, 'renounceRoles'> & {
        abi?: never
        functionName?: 'renounceRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721KABI, 'renounceRoles'>({ abi: erc721KABI, functionName: 'renounceRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"requestOwnershipHandover"`.
 */
export function useErc721KRequestOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721KABI, 'requestOwnershipHandover'>['abi'], 'requestOwnershipHandover'> & {
        functionName?: 'requestOwnershipHandover'
      }
    : UseContractWriteConfig<TMode, typeof erc721KABI, 'requestOwnershipHandover'> & {
        abi?: never
        functionName?: 'requestOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721KABI, 'requestOwnershipHandover'>({
    abi: erc721KABI,
    functionName: 'requestOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"revokeRoles"`.
 */
export function useErc721KRevokeRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721KABI, 'revokeRoles'>['abi'], 'revokeRoles'> & {
        functionName?: 'revokeRoles'
      }
    : UseContractWriteConfig<TMode, typeof erc721KABI, 'revokeRoles'> & {
        abi?: never
        functionName?: 'revokeRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721KABI, 'revokeRoles'>({ abi: erc721KABI, functionName: 'revokeRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721KSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721KABI, 'safeTransferFrom'>['abi'], 'safeTransferFrom'> & {
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<TMode, typeof erc721KABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721KABI, 'safeTransferFrom'>({ abi: erc721KABI, functionName: 'safeTransferFrom', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721KSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721KABI, 'setApprovalForAll'>['abi'], 'setApprovalForAll'> & {
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<TMode, typeof erc721KABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721KABI, 'setApprovalForAll'>({ abi: erc721KABI, functionName: 'setApprovalForAll', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"setStorage"`.
 */
export function useErc721KSetStorage<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721KABI, 'setStorage'>['abi'], 'setStorage'> & {
        functionName?: 'setStorage'
      }
    : UseContractWriteConfig<TMode, typeof erc721KABI, 'setStorage'> & {
        abi?: never
        functionName?: 'setStorage'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721KABI, 'setStorage'>({ abi: erc721KABI, functionName: 'setStorage', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721KTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721KABI, 'transferFrom'>['abi'], 'transferFrom'> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<TMode, typeof erc721KABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721KABI, 'transferFrom'>({ abi: erc721KABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useErc721KTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721KABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof erc721KABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721KABI, 'transferOwnership'>({ abi: erc721KABI, functionName: 'transferOwnership', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721KABI}__.
 */
export function usePrepareErc721KWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721KABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721KABI, ...config } as UsePrepareContractWriteConfig<typeof erc721KABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721KApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721KABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721KABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof erc721KABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"cancelOwnershipHandover"`.
 */
export function usePrepareErc721KCancelOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721KABI, 'cancelOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721KABI, functionName: 'cancelOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof erc721KABI,
    'cancelOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"completeOwnershipHandover"`.
 */
export function usePrepareErc721KCompleteOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721KABI, 'completeOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721KABI, functionName: 'completeOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof erc721KABI,
    'completeOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"grantRoles"`.
 */
export function usePrepareErc721KGrantRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721KABI, 'grantRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721KABI, functionName: 'grantRoles', ...config } as UsePrepareContractWriteConfig<
    typeof erc721KABI,
    'grantRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareErc721KRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721KABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721KABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof erc721KABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"renounceRoles"`.
 */
export function usePrepareErc721KRenounceRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721KABI, 'renounceRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721KABI, functionName: 'renounceRoles', ...config } as UsePrepareContractWriteConfig<
    typeof erc721KABI,
    'renounceRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"requestOwnershipHandover"`.
 */
export function usePrepareErc721KRequestOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721KABI, 'requestOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721KABI, functionName: 'requestOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof erc721KABI,
    'requestOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"revokeRoles"`.
 */
export function usePrepareErc721KRevokeRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721KABI, 'revokeRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721KABI, functionName: 'revokeRoles', ...config } as UsePrepareContractWriteConfig<
    typeof erc721KABI,
    'revokeRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721KSafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721KABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721KABI, functionName: 'safeTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc721KABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721KSetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721KABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721KABI, functionName: 'setApprovalForAll', ...config } as UsePrepareContractWriteConfig<
    typeof erc721KABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"setStorage"`.
 */
export function usePrepareErc721KSetStorage(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721KABI, 'setStorage'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721KABI, functionName: 'setStorage', ...config } as UsePrepareContractWriteConfig<
    typeof erc721KABI,
    'setStorage'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721KTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721KABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721KABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc721KABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721KABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareErc721KTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721KABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721KABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof erc721KABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721KABI}__.
 */
export function useErc721KEvent<TEventName extends string>(config: Omit<UseContractEventConfig<typeof erc721KABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: erc721KABI, ...config } as UseContractEventConfig<typeof erc721KABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721KABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721KApprovalEvent(config: Omit<UseContractEventConfig<typeof erc721KABI, 'Approval'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc721KABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof erc721KABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721KABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721KApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof erc721KABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721KABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<typeof erc721KABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721KABI}__ and `eventName` set to `"ERC721StorageUpdated"`.
 */
export function useErc721KErc721StorageUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof erc721KABI, 'ERC721StorageUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721KABI, eventName: 'ERC721StorageUpdated', ...config } as UseContractEventConfig<
    typeof erc721KABI,
    'ERC721StorageUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721KABI}__ and `eventName` set to `"OwnershipHandoverCanceled"`.
 */
export function useErc721KOwnershipHandoverCanceledEvent(
  config: Omit<UseContractEventConfig<typeof erc721KABI, 'OwnershipHandoverCanceled'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721KABI, eventName: 'OwnershipHandoverCanceled', ...config } as UseContractEventConfig<
    typeof erc721KABI,
    'OwnershipHandoverCanceled'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721KABI}__ and `eventName` set to `"OwnershipHandoverRequested"`.
 */
export function useErc721KOwnershipHandoverRequestedEvent(
  config: Omit<UseContractEventConfig<typeof erc721KABI, 'OwnershipHandoverRequested'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721KABI, eventName: 'OwnershipHandoverRequested', ...config } as UseContractEventConfig<
    typeof erc721KABI,
    'OwnershipHandoverRequested'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721KABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useErc721KOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof erc721KABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721KABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof erc721KABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721KABI}__ and `eventName` set to `"RolesUpdated"`.
 */
export function useErc721KRolesUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof erc721KABI, 'RolesUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721KABI, eventName: 'RolesUpdated', ...config } as UseContractEventConfig<typeof erc721KABI, 'RolesUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721KABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721KTransferEvent(config: Omit<UseContractEventConfig<typeof erc721KABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc721KABI, eventName: 'Transfer', ...config } as UseContractEventConfig<typeof erc721KABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ownableABI, ...config } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<TSelectData = ReadContractResult<typeof ownableABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownableABI, functionName: 'owner', ...config } as UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownableABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({ abi: ownableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownableABI, 'renounceOwnership'>['abi'], 'renounceOwnership'> & {
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({ abi: ownableABI, functionName: 'renounceOwnership', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownableABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({ abi: ownableABI, functionName: 'transferOwnership', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownableABI, ...config } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownableABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownableABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(config: Omit<UseContractEventConfig<typeof ownableABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: ownableABI, ...config } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownableABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof ownableABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<TSelectData = ReadContractResult<typeof erc721ABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<TSelectData = ReadContractResult<typeof erc721ABI, 'getApproved'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'getApproved', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<TSelectData = ReadContractResult<typeof erc721ABI, 'isApprovedForAll'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<TSelectData = ReadContractResult<typeof erc721ABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'name', ...config } as UseContractReadConfig<typeof erc721ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<TSelectData = ReadContractResult<typeof erc721ABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<typeof erc721ABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721SupportsInterface<TSelectData = ReadContractResult<typeof erc721ABI, 'supportsInterface'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'supportsInterface', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc721ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<TSelectData = ReadContractResult<typeof erc721ABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'symbol', ...config } as UseContractReadConfig<typeof erc721ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<TSelectData = ReadContractResult<typeof erc721ABI, 'tokenURI'>>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'tokenURI', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc721ABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<typeof erc721ABI, 'tokenURI', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, TFunctionName>({ abi: erc721ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721ABI, 'approve'>['abi'], 'approve'> & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'approve'>({ abi: erc721ABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721ABI, 'safeTransferFrom'>['abi'], 'safeTransferFrom'> & {
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'safeTransferFrom'>({ abi: erc721ABI, functionName: 'safeTransferFrom', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721ABI, 'setApprovalForAll'>['abi'], 'setApprovalForAll'> & {
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'setApprovalForAll'>({ abi: erc721ABI, functionName: 'setApprovalForAll', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721ABI, 'transferFrom'>['abi'], 'transferFrom'> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721ABI, 'transferFrom'>({ abi: erc721ABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721ABI, ...config } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721ABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721ABI, functionName: 'safeTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc721ABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721ABI, functionName: 'setApprovalForAll', ...config } as UsePrepareContractWriteConfig<
    typeof erc721ABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721ABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc721ABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(config: Omit<UseContractEventConfig<typeof erc721ABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: erc721ABI, ...config } as UseContractEventConfig<typeof erc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(config: Omit<UseContractEventConfig<typeof erc721ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc721ABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc721ABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(config: Omit<UseContractEventConfig<typeof erc721ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc721ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721TokenReceiverABI}__.
 */
export function useErc721TokenReceiver(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721TokenReceiverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721TokenReceiverABI}__.
 */
export function useErc721TokenReceiverWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721TokenReceiverABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc721TokenReceiverABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721TokenReceiverABI, TFunctionName>({ abi: erc721TokenReceiverABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721TokenReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useErc721TokenReceiverOnErc721Received<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc721TokenReceiverABI, 'onERC721Received'>['abi'], 'onERC721Received'> & {
        functionName?: 'onERC721Received'
      }
    : UseContractWriteConfig<TMode, typeof erc721TokenReceiverABI, 'onERC721Received'> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc721TokenReceiverABI, 'onERC721Received'>({
    abi: erc721TokenReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721TokenReceiverABI}__.
 */
export function usePrepareErc721TokenReceiverWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721TokenReceiverABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721TokenReceiverABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc721TokenReceiverABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721TokenReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareErc721TokenReceiverOnErc721Received(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721TokenReceiverABI, 'onERC721Received'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc721TokenReceiverABI, functionName: 'onERC721Received', ...config } as UsePrepareContractWriteConfig<
    typeof erc721TokenReceiverABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721KTraitsABI}__.
 */
export function useIerc721KTraits(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721KTraitsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721KTraitsABI}__.
 */
export function useIerc721KTraitsRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof ierc721KTraitsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ierc721KTraitsABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ierc721KTraitsABI, ...config } as UseContractReadConfig<typeof ierc721KTraitsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721KTraitsABI}__ and `functionName` set to `"fetch"`.
 */
export function useIerc721KTraitsFetch<TSelectData = ReadContractResult<typeof ierc721KTraitsABI, 'fetch'>>(
  config: Omit<UseContractReadConfig<typeof ierc721KTraitsABI, 'fetch', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc721KTraitsABI, functionName: 'fetch', ...config } as UseContractReadConfig<
    typeof ierc721KTraitsABI,
    'fetch',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721KImageABI}__.
 */
export function useIerc721KImage(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721KImageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721KImageABI}__.
 */
export function useIerc721KImageRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof ierc721KImageABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ierc721KImageABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ierc721KImageABI, ...config } as UseContractReadConfig<typeof ierc721KImageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721KImageABI}__ and `functionName` set to `"render"`.
 */
export function useIerc721KImageRender<TSelectData = ReadContractResult<typeof ierc721KImageABI, 'render'>>(
  config: Omit<UseContractReadConfig<typeof ierc721KImageABI, 'render', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc721KImageABI, functionName: 'render', ...config } as UseContractReadConfig<
    typeof ierc721KImageABI,
    'render',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'decimals', ...config } as UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<TSelectData = ReadContractResult<typeof erc20ABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'name', ...config } as UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'symbol', ...config } as UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20ABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({ abi: erc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'], 'approve'> & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({ abi: erc20ABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['abi'], 'decreaseAllowance'> & {
        functionName?: 'decreaseAllowance'
      }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'decreaseAllowance'>({ abi: erc20ABI, functionName: 'decreaseAllowance', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['abi'], 'increaseAllowance'> & {
        functionName?: 'increaseAllowance'
      }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'increaseAllowance'>({ abi: erc20ABI, functionName: 'increaseAllowance', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'], 'transfer'> & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({ abi: erc20ABI, functionName: 'transfer', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'], 'transferFrom'> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({ abi: erc20ABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20ABI, ...config } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>, 'abi' | 'functionName'> = {} as any) {
  return usePrepareContractWrite({ abi: erc20ABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20ABI, functionName: 'decreaseAllowance', ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20ABI, functionName: 'increaseAllowance', ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20ABI, functionName: 'transfer', ...config } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20ABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(config: Omit<UseContractEventConfig<typeof erc20ABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: erc20ABI, ...config } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(config: Omit<UseContractEventConfig<typeof erc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(config: Omit<UseContractEventConfig<typeof erc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<TSelectData = ReadContractResult<typeof ierc20ABI, 'allowance'>>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<TSelectData = ReadContractResult<typeof ierc20ABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<TSelectData = ReadContractResult<typeof ierc20ABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, TFunctionName>({ abi: ierc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20ABI, 'approve'>['abi'], 'approve'> & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'approve'>({ abi: ierc20ABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20ABI, 'transfer'>['abi'], 'transfer'> & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transfer'>({ abi: ierc20ABI, functionName: 'transfer', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20ABI, 'transferFrom'>['abi'], 'transferFrom'> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transferFrom'>({ abi: ierc20ABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20ABI, ...config } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20ABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20ABI, functionName: 'transfer', ...config } as UsePrepareContractWriteConfig<
    typeof ierc20ABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20ABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof ierc20ABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(config: Omit<UseContractEventConfig<typeof ierc20ABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: ierc20ABI, ...config } as UseContractEventConfig<typeof ierc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof ierc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<typeof ierc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ierc721ABI, ...config } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf<TSelectData = ReadContractResult<typeof ierc721ABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof ierc721ABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved<TSelectData = ReadContractResult<typeof ierc721ABI, 'getApproved'>>(
  config: Omit<UseContractReadConfig<typeof ierc721ABI, 'getApproved', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll<TSelectData = ReadContractResult<typeof ierc721ABI, 'isApprovedForAll'>>(
  config: Omit<UseContractReadConfig<typeof ierc721ABI, 'isApprovedForAll', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf<TSelectData = ReadContractResult<typeof ierc721ABI, 'ownerOf'>>(
  config: Omit<UseContractReadConfig<typeof ierc721ABI, 'ownerOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<typeof ierc721ABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface<TSelectData = ReadContractResult<typeof ierc721ABI, 'supportsInterface'>>(
  config: Omit<UseContractReadConfig<typeof ierc721ABI, 'supportsInterface', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc721ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, TFunctionName>({ abi: ierc721ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721ABI, 'approve'>['abi'], 'approve'> & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'approve'>({ abi: ierc721ABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721ABI, 'safeTransferFrom'>['abi'], 'safeTransferFrom'> & {
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'safeTransferFrom'>({ abi: ierc721ABI, functionName: 'safeTransferFrom', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721ABI, 'setApprovalForAll'>['abi'], 'setApprovalForAll'> & {
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'setApprovalForAll'>({ abi: ierc721ABI, functionName: 'setApprovalForAll', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc721ABI, 'transferFrom'>['abi'], 'transferFrom'> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'transferFrom'>({ abi: ierc721ABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc721ABI, ...config } as UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc721ABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof ierc721ABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc721ABI, functionName: 'safeTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof ierc721ABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc721ABI, functionName: 'setApprovalForAll', ...config } as UsePrepareContractWriteConfig<
    typeof ierc721ABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc721ABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof ierc721ABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(config: Omit<UseContractEventConfig<typeof ierc721ABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: ierc721ABI, ...config } as UseContractEventConfig<typeof ierc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(config: Omit<UseContractEventConfig<typeof ierc721ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: ierc721ABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof ierc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc721ABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(config: Omit<UseContractEventConfig<typeof ierc721ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: ierc721ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<typeof ierc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ierc165ABI, ...config } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<TSelectData = ReadContractResult<typeof ierc165ABI, 'supportsInterface'>>(
  config: Omit<UseContractReadConfig<typeof ierc165ABI, 'supportsInterface', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc165ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof ierc165ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownedRolesABI}__.
 */
export function useOwnedRoles(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownedRolesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedRolesABI}__.
 */
export function useOwnedRolesRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof ownedRolesABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ownedRolesABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ownedRolesABI, ...config } as UseContractReadConfig<typeof ownedRolesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"hasAllRoles"`.
 */
export function useOwnedRolesHasAllRoles<TSelectData = ReadContractResult<typeof ownedRolesABI, 'hasAllRoles'>>(
  config: Omit<UseContractReadConfig<typeof ownedRolesABI, 'hasAllRoles', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownedRolesABI, functionName: 'hasAllRoles', ...config } as UseContractReadConfig<
    typeof ownedRolesABI,
    'hasAllRoles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"hasAnyRole"`.
 */
export function useOwnedRolesHasAnyRole<TSelectData = ReadContractResult<typeof ownedRolesABI, 'hasAnyRole'>>(
  config: Omit<UseContractReadConfig<typeof ownedRolesABI, 'hasAnyRole', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownedRolesABI, functionName: 'hasAnyRole', ...config } as UseContractReadConfig<
    typeof ownedRolesABI,
    'hasAnyRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"ordinalsFromRoles"`.
 */
export function useOwnedRolesOrdinalsFromRoles<TSelectData = ReadContractResult<typeof ownedRolesABI, 'ordinalsFromRoles'>>(
  config: Omit<UseContractReadConfig<typeof ownedRolesABI, 'ordinalsFromRoles', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownedRolesABI, functionName: 'ordinalsFromRoles', ...config } as UseContractReadConfig<
    typeof ownedRolesABI,
    'ordinalsFromRoles',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnedRolesOwner<TSelectData = ReadContractResult<typeof ownedRolesABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof ownedRolesABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownedRolesABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof ownedRolesABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"ownershipHandoverExpiresAt"`.
 */
export function useOwnedRolesOwnershipHandoverExpiresAt<TSelectData = ReadContractResult<typeof ownedRolesABI, 'ownershipHandoverExpiresAt'>>(
  config: Omit<UseContractReadConfig<typeof ownedRolesABI, 'ownershipHandoverExpiresAt', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownedRolesABI, functionName: 'ownershipHandoverExpiresAt', ...config } as UseContractReadConfig<
    typeof ownedRolesABI,
    'ownershipHandoverExpiresAt',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"ownershipHandoverValidFor"`.
 */
export function useOwnedRolesOwnershipHandoverValidFor<TSelectData = ReadContractResult<typeof ownedRolesABI, 'ownershipHandoverValidFor'>>(
  config: Omit<UseContractReadConfig<typeof ownedRolesABI, 'ownershipHandoverValidFor', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownedRolesABI, functionName: 'ownershipHandoverValidFor', ...config } as UseContractReadConfig<
    typeof ownedRolesABI,
    'ownershipHandoverValidFor',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"rolesFromOrdinals"`.
 */
export function useOwnedRolesRolesFromOrdinals<TSelectData = ReadContractResult<typeof ownedRolesABI, 'rolesFromOrdinals'>>(
  config: Omit<UseContractReadConfig<typeof ownedRolesABI, 'rolesFromOrdinals', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownedRolesABI, functionName: 'rolesFromOrdinals', ...config } as UseContractReadConfig<
    typeof ownedRolesABI,
    'rolesFromOrdinals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"rolesOf"`.
 */
export function useOwnedRolesRolesOf<TSelectData = ReadContractResult<typeof ownedRolesABI, 'rolesOf'>>(
  config: Omit<UseContractReadConfig<typeof ownedRolesABI, 'rolesOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownedRolesABI, functionName: 'rolesOf', ...config } as UseContractReadConfig<
    typeof ownedRolesABI,
    'rolesOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedRolesABI}__.
 */
export function useOwnedRolesWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedRolesABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ownedRolesABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedRolesABI, TFunctionName>({ abi: ownedRolesABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"cancelOwnershipHandover"`.
 */
export function useOwnedRolesCancelOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedRolesABI, 'cancelOwnershipHandover'>['abi'], 'cancelOwnershipHandover'> & {
        functionName?: 'cancelOwnershipHandover'
      }
    : UseContractWriteConfig<TMode, typeof ownedRolesABI, 'cancelOwnershipHandover'> & {
        abi?: never
        functionName?: 'cancelOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedRolesABI, 'cancelOwnershipHandover'>({
    abi: ownedRolesABI,
    functionName: 'cancelOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"completeOwnershipHandover"`.
 */
export function useOwnedRolesCompleteOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownedRolesABI, 'completeOwnershipHandover'>['abi'],
        'completeOwnershipHandover'
      > & { functionName?: 'completeOwnershipHandover' }
    : UseContractWriteConfig<TMode, typeof ownedRolesABI, 'completeOwnershipHandover'> & {
        abi?: never
        functionName?: 'completeOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedRolesABI, 'completeOwnershipHandover'>({
    abi: ownedRolesABI,
    functionName: 'completeOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"grantRoles"`.
 */
export function useOwnedRolesGrantRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedRolesABI, 'grantRoles'>['abi'], 'grantRoles'> & {
        functionName?: 'grantRoles'
      }
    : UseContractWriteConfig<TMode, typeof ownedRolesABI, 'grantRoles'> & {
        abi?: never
        functionName?: 'grantRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedRolesABI, 'grantRoles'>({ abi: ownedRolesABI, functionName: 'grantRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnedRolesRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedRolesABI, 'renounceOwnership'>['abi'], 'renounceOwnership'> & {
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<TMode, typeof ownedRolesABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedRolesABI, 'renounceOwnership'>({
    abi: ownedRolesABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"renounceRoles"`.
 */
export function useOwnedRolesRenounceRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedRolesABI, 'renounceRoles'>['abi'], 'renounceRoles'> & {
        functionName?: 'renounceRoles'
      }
    : UseContractWriteConfig<TMode, typeof ownedRolesABI, 'renounceRoles'> & {
        abi?: never
        functionName?: 'renounceRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedRolesABI, 'renounceRoles'>({ abi: ownedRolesABI, functionName: 'renounceRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"requestOwnershipHandover"`.
 */
export function useOwnedRolesRequestOwnershipHandover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownedRolesABI, 'requestOwnershipHandover'>['abi'],
        'requestOwnershipHandover'
      > & { functionName?: 'requestOwnershipHandover' }
    : UseContractWriteConfig<TMode, typeof ownedRolesABI, 'requestOwnershipHandover'> & {
        abi?: never
        functionName?: 'requestOwnershipHandover'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedRolesABI, 'requestOwnershipHandover'>({
    abi: ownedRolesABI,
    functionName: 'requestOwnershipHandover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"revokeRoles"`.
 */
export function useOwnedRolesRevokeRoles<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedRolesABI, 'revokeRoles'>['abi'], 'revokeRoles'> & {
        functionName?: 'revokeRoles'
      }
    : UseContractWriteConfig<TMode, typeof ownedRolesABI, 'revokeRoles'> & {
        abi?: never
        functionName?: 'revokeRoles'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedRolesABI, 'revokeRoles'>({ abi: ownedRolesABI, functionName: 'revokeRoles', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnedRolesTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ownedRolesABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof ownedRolesABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownedRolesABI, 'transferOwnership'>({
    abi: ownedRolesABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedRolesABI}__.
 */
export function usePrepareOwnedRolesWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedRolesABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedRolesABI, ...config } as UsePrepareContractWriteConfig<typeof ownedRolesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"cancelOwnershipHandover"`.
 */
export function usePrepareOwnedRolesCancelOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedRolesABI, 'cancelOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedRolesABI, functionName: 'cancelOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof ownedRolesABI,
    'cancelOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"completeOwnershipHandover"`.
 */
export function usePrepareOwnedRolesCompleteOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedRolesABI, 'completeOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedRolesABI, functionName: 'completeOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof ownedRolesABI,
    'completeOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"grantRoles"`.
 */
export function usePrepareOwnedRolesGrantRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedRolesABI, 'grantRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedRolesABI, functionName: 'grantRoles', ...config } as UsePrepareContractWriteConfig<
    typeof ownedRolesABI,
    'grantRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnedRolesRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedRolesABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedRolesABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof ownedRolesABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"renounceRoles"`.
 */
export function usePrepareOwnedRolesRenounceRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedRolesABI, 'renounceRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedRolesABI, functionName: 'renounceRoles', ...config } as UsePrepareContractWriteConfig<
    typeof ownedRolesABI,
    'renounceRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"requestOwnershipHandover"`.
 */
export function usePrepareOwnedRolesRequestOwnershipHandover(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedRolesABI, 'requestOwnershipHandover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedRolesABI, functionName: 'requestOwnershipHandover', ...config } as UsePrepareContractWriteConfig<
    typeof ownedRolesABI,
    'requestOwnershipHandover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"revokeRoles"`.
 */
export function usePrepareOwnedRolesRevokeRoles(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedRolesABI, 'revokeRoles'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedRolesABI, functionName: 'revokeRoles', ...config } as UsePrepareContractWriteConfig<
    typeof ownedRolesABI,
    'revokeRoles'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownedRolesABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnedRolesTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof ownedRolesABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownedRolesABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof ownedRolesABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownedRolesABI}__.
 */
export function useOwnedRolesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownedRolesABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ownedRolesABI, ...config } as UseContractEventConfig<typeof ownedRolesABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownedRolesABI}__ and `eventName` set to `"OwnershipHandoverCanceled"`.
 */
export function useOwnedRolesOwnershipHandoverCanceledEvent(
  config: Omit<UseContractEventConfig<typeof ownedRolesABI, 'OwnershipHandoverCanceled'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownedRolesABI, eventName: 'OwnershipHandoverCanceled', ...config } as UseContractEventConfig<
    typeof ownedRolesABI,
    'OwnershipHandoverCanceled'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownedRolesABI}__ and `eventName` set to `"OwnershipHandoverRequested"`.
 */
export function useOwnedRolesOwnershipHandoverRequestedEvent(
  config: Omit<UseContractEventConfig<typeof ownedRolesABI, 'OwnershipHandoverRequested'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownedRolesABI, eventName: 'OwnershipHandoverRequested', ...config } as UseContractEventConfig<
    typeof ownedRolesABI,
    'OwnershipHandoverRequested'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownedRolesABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnedRolesOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof ownedRolesABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownedRolesABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof ownedRolesABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownedRolesABI}__ and `eventName` set to `"RolesUpdated"`.
 */
export function useOwnedRolesRolesUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof ownedRolesABI, 'RolesUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownedRolesABI, eventName: 'RolesUpdated', ...config } as UseContractEventConfig<
    typeof ownedRolesABI,
    'RolesUpdated'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20Permit(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20PermitABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ierc20PermitABI, ...config } as UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitDomainSeparator<TSelectData = ReadContractResult<typeof ierc20PermitABI, 'DOMAIN_SEPARATOR'>>(
  config: Omit<UseContractReadConfig<typeof ierc20PermitABI, 'DOMAIN_SEPARATOR', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20PermitABI, functionName: 'DOMAIN_SEPARATOR', ...config } as UseContractReadConfig<
    typeof ierc20PermitABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitNonces<TSelectData = ReadContractResult<typeof ierc20PermitABI, 'nonces'>>(
  config: Omit<UseContractReadConfig<typeof ierc20PermitABI, 'nonces', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20PermitABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof ierc20PermitABI,
    'nonces',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20PermitABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, TFunctionName>({ abi: ierc20PermitABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20PermitABI, 'permit'>['abi'], 'permit'> & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, 'permit'>({ abi: ierc20PermitABI, functionName: 'permit', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function usePrepareIerc20PermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20PermitABI, ...config } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitPermit(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20PermitABI, functionName: 'permit', ...config } as UsePrepareContractWriteConfig<
    typeof ierc20PermitABI,
    'permit'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20Permit(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20PermitABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof erc20PermitABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc20PermitABI, ...config } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20PermitDomainSeparator<TSelectData = ReadContractResult<typeof erc20PermitABI, 'DOMAIN_SEPARATOR'>>(
  config: Omit<UseContractReadConfig<typeof erc20PermitABI, 'DOMAIN_SEPARATOR', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20PermitABI, functionName: 'DOMAIN_SEPARATOR', ...config } as UseContractReadConfig<
    typeof erc20PermitABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PermitAllowance<TSelectData = ReadContractResult<typeof erc20PermitABI, 'allowance'>>(
  config: Omit<UseContractReadConfig<typeof erc20PermitABI, 'allowance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20PermitABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof erc20PermitABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PermitBalanceOf<TSelectData = ReadContractResult<typeof erc20PermitABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof erc20PermitABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20PermitABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc20PermitABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PermitDecimals<TSelectData = ReadContractResult<typeof erc20PermitABI, 'decimals'>>(
  config: Omit<UseContractReadConfig<typeof erc20PermitABI, 'decimals', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20PermitABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof erc20PermitABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PermitName<TSelectData = ReadContractResult<typeof erc20PermitABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof erc20PermitABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20PermitABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc20PermitABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20PermitNonces<TSelectData = ReadContractResult<typeof erc20PermitABI, 'nonces'>>(
  config: Omit<UseContractReadConfig<typeof erc20PermitABI, 'nonces', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20PermitABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof erc20PermitABI,
    'nonces',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PermitSymbol<TSelectData = ReadContractResult<typeof erc20PermitABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof erc20PermitABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20PermitABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc20PermitABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PermitTotalSupply<TSelectData = ReadContractResult<typeof erc20PermitABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof erc20PermitABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc20PermitABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof erc20PermitABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20PermitABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, TFunctionName>({ abi: erc20PermitABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PermitApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20PermitABI, 'approve'>['abi'], 'approve'> & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'approve'>({ abi: erc20PermitABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PermitDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20PermitABI, 'decreaseAllowance'>['abi'], 'decreaseAllowance'> & {
        functionName?: 'decreaseAllowance'
      }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'decreaseAllowance'>({
    abi: erc20PermitABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PermitIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20PermitABI, 'increaseAllowance'>['abi'], 'increaseAllowance'> & {
        functionName?: 'increaseAllowance'
      }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'increaseAllowance'>({
    abi: erc20PermitABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20PermitPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20PermitABI, 'permit'>['abi'], 'permit'> & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'permit'>({ abi: erc20PermitABI, functionName: 'permit', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PermitTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20PermitABI, 'transfer'>['abi'], 'transfer'> & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'transfer'>({ abi: erc20PermitABI, functionName: 'transfer', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PermitTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20PermitABI, 'transferFrom'>['abi'], 'transferFrom'> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20PermitABI, 'transferFrom'>({ abi: erc20PermitABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function usePrepareErc20PermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20PermitABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20PermitABI, ...config } as UsePrepareContractWriteConfig<typeof erc20PermitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PermitApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20PermitABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20PermitABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof erc20PermitABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PermitDecreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20PermitABI, 'decreaseAllowance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20PermitABI, functionName: 'decreaseAllowance', ...config } as UsePrepareContractWriteConfig<
    typeof erc20PermitABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PermitIncreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20PermitABI, 'increaseAllowance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20PermitABI, functionName: 'increaseAllowance', ...config } as UsePrepareContractWriteConfig<
    typeof erc20PermitABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20PermitPermit(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20PermitABI, 'permit'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20PermitABI, functionName: 'permit', ...config } as UsePrepareContractWriteConfig<
    typeof erc20PermitABI,
    'permit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PermitTransfer(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transfer'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20PermitABI, functionName: 'transfer', ...config } as UsePrepareContractWriteConfig<
    typeof erc20PermitABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PermitTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20PermitABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20PermitABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc20PermitABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20PermitABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20PermitABI, ...config } as UseContractEventConfig<typeof erc20PermitABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PermitApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc20PermitABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc20PermitABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof erc20PermitABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PermitTransferEvent(
  config: Omit<UseContractEventConfig<typeof erc20PermitABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc20PermitABI, eventName: 'Transfer', ...config } as UseContractEventConfig<typeof erc20PermitABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20Metadata(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20MetadataABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, ...config } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'allowance'>>(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, 'allowance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'balanceOf'>>(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, 'balanceOf', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'decimals'>>(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, 'decimals', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'name'>>(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, 'name', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'symbol'>>(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, 'symbol', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'totalSupply'>>(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, 'totalSupply', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20MetadataABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, TFunctionName>({ abi: ierc20MetadataABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20MetadataABI, 'approve'>['abi'], 'approve'> & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'approve'>({ abi: ierc20MetadataABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20MetadataABI, 'transfer'>['abi'], 'transfer'> & {
        functionName?: 'transfer'
      }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transfer'>({ abi: ierc20MetadataABI, functionName: 'transfer', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20MetadataABI, 'transferFrom'>['abi'], 'transferFrom'> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transferFrom'>({ abi: ierc20MetadataABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20MetadataABI, ...config } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20MetadataABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20MetadataABI, functionName: 'transfer', ...config } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20MetadataABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20MetadataABI, ...config } as UseContractEventConfig<typeof ierc20MetadataABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc20MetadataABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc20MetadataABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    'Transfer'
  >)
}
