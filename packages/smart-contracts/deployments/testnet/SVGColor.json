{
  "address": "0x2ab2786E93EF381C37463330eb570449E87fa492",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_colors",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "autoLinearGradient",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_coordinates",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_colors",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "autoLinearGradient",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "byte2uint8",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "colors",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_colorName",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_alpha",
          "type": "uint8"
        }
      ],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_colorName",
          "type": "string"
        }
      ],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_colorName",
          "type": "string"
        }
      ],
      "name": "getRgba",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lg",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "linearGradient",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_rgba",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "toRgba",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe981cbd1b7d7a88fbc0c71a868b8d60541b5e827e1d29ab2145d0c995de1895e",
  "receipt": {
    "to": null,
    "from": "0x8C46e53dC60EC32e8DD67Fb11f076fF3EcDc5211",
    "contractAddress": "0x2ab2786E93EF381C37463330eb570449E87fa492",
    "transactionIndex": 27,
    "gasUsed": "1211750",
    "logsBloom": "0x
    "blockHash": "0xd9827ce32f7a13228f39681662d38f720eecc795ea9c2ed7c7301faf89c05b0c",
    "transactionHash": "0xe981cbd1b7d7a88fbc0c71a868b8d60541b5e827e1d29ab2145d0c995de1895e",
    "logs": [],
    "blockNumber": 3472110,
    "cumulativeGasUsed": "4270028",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "404f5463dd6ebc8ff1a6e382af5684f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_colors\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"autoLinearGradient\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_coordinates\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_colors\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"autoLinearGradient\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"byte2uint8\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_colorName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_alpha\",\"type\":\"uint8\"}],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_colorName\",\"type\":\"string\"}],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_colorName\",\"type\":\"string\"}],\"name\":\"getRgba\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lg\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"linearGradient\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rgba\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"toRgba\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721K/svg/SVGColor.sol\":\"SVGColor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ERC721K/svg/SVGColor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract SVGColor {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n  using Strings for bytes;\\n\\n  mapping(string => bytes) public colors;\\n\\n  constructor() {\\n    colors[\\\"Black\\\"] = hex\\\"000000\\\";\\n    colors[\\\"White\\\"] = hex\\\"FFFFFF\\\";\\n    colors[\\\"Dark1\\\"] = hex\\\"232323\\\";\\n    colors[\\\"Dark2\\\"] = hex\\\"464646\\\";\\n  }\\n\\n  function getColor(string memory _colorName) public view returns (bytes memory) {\\n    require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(colors[_colorName], hex\\\"64\\\");\\n  }\\n\\n  function getColor(string memory _colorName, uint8 _alpha) public view returns (bytes memory) {\\n    require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(colors[_colorName], _alpha);\\n  }\\n\\n  function getRgba(string memory _colorName) public view returns (string memory) {\\n    return string(toRgba(getColor(_colorName), 0));\\n  }\\n\\n  // Input: array of colors (without alpha)\\n  // Ouputs a linearGradient\\n  function autoLinearGradient(\\n    bytes memory _colors,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) public view returns (bytes memory) {\\n    return this.autoLinearGradient(\\\"\\\", _colors, _id, _customAttributes);\\n  }\\n\\n  function autoLinearGradient(\\n    bytes memory _coordinates,\\n    bytes memory _colors,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) external view returns (bytes memory) {\\n    bytes memory _b;\\n    if (_coordinates.length > 3) {\\n      _b = abi.encodePacked(uint8(128), _coordinates);\\n    } else {\\n      _b = hex\\\"00\\\";\\n    }\\n    // Count the number of colors passed, each on 4 byte\\n    uint256 colorCount = _colors.length / 4;\\n    uint8 i = 0;\\n    while (i < colorCount) {\\n      _b = abi.encodePacked(\\n        _b,\\n        uint8(i * (100 / (colorCount - 1))), // grad. stop %\\n        uint8(_colors[i * 4]),\\n        uint8(_colors[i * 4 + 1]),\\n        uint8(_colors[i * 4 + 2]),\\n        uint8(_colors[i * 4 + 3])\\n      );\\n      i++;\\n    }\\n    return linearGradient(_b, _id, _customAttributes);\\n  }\\n\\n  function linearGradient(\\n    bytes memory _lg,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) public pure returns (bytes memory) {\\n    bytes memory grdata;\\n    uint8 offset = 1;\\n\\n    if (uint8(_lg[0]) & 128 == 128) {\\n      grdata = abi.encodePacked(\\n        'x1=\\\"',\\n        byte2uint8(_lg, 1).toString(),\\n        '%\\\" x2=\\\"',\\n        byte2uint8(_lg, 2).toString(),\\n        '%\\\" y1=\\\"',\\n        byte2uint8(_lg, 3).toString(),\\n        '%\\\" y2=\\\"',\\n        byte2uint8(_lg, 4).toString(),\\n        '%\\\"'\\n      );\\n      offset = 5;\\n    }\\n    grdata = abi.encodePacked('<linearGradient id=\\\"', _id, '\\\" ', _customAttributes, grdata, \\\">\\\");\\n    for (uint256 i = offset; i < _lg.length; i += 5) {\\n      grdata = abi.encodePacked(\\n        grdata,\\n        '<stop offset=\\\"',\\n        byte2uint8(_lg, i).toString(),\\n        '%\\\" stop-color=\\\"',\\n        toRgba(_lg, i + 1),\\n        '\\\" id=\\\"',\\n        _id,\\n        byte2uint8(_lg, i).toString(),\\n        '\\\"/>'\\n      );\\n    }\\n    return abi.encodePacked(grdata, \\\"</linearGradient>\\\");\\n  }\\n\\n  function toRgba(bytes memory _rgba, uint256 offset) public pure returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        \\\"rgba(\\\",\\n        byte2uint8(_rgba, offset).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 1).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 2).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 3).toString(),\\n        \\\"%)\\\"\\n      );\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n\\n  // formats rgba white with a specified opacity / alpha\\n  function white_a(uint256 _a) internal pure returns (string memory) {\\n    return rgba(255, 255, 255, _a);\\n  }\\n\\n  // formats rgba black with a specified opacity / alpha\\n  function black_a(uint256 _a) internal pure returns (string memory) {\\n    return rgba(0, 0, 0, _a);\\n  }\\n\\n  // formats generic rgba color in css\\n  function rgba(\\n    uint256 _r,\\n    uint256 _g,\\n    uint256 _b,\\n    uint256 _a\\n  ) internal pure returns (string memory) {\\n    string memory formattedA = _a < 100 ? string.concat(\\\"0.\\\", uint2str(_a)) : \\\"1\\\";\\n    return\\n      string.concat(\\n        \\\"rgba(\\\",\\n        uint2str(_r),\\n        \\\",\\\",\\n        uint2str(_g),\\n        \\\",\\\",\\n        uint2str(_b),\\n        \\\",\\\",\\n        formattedA,\\n        \\\")\\\"\\n      );\\n  }\\n\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\",\"keccak256\":\"0xb3b33249f90935988e5a0a556d9932a1e21a2080a6f57df76dbbc950ff2ed8c0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405180604001604052806003815260200160008152506000604051620000449064426c61636b60d81b815260050190565b90815260200160405180910390209081620000609190620001e3565b50604080518082018252600381526001600160e81b03196020820152815164576869746560d81b81526000600582015291519182900360250190912090620000a99082620001e3565b50604080518082018252600381526223232360e81b60208201528151644461726b3160d81b81526000600582015291519182900360250190912090620000f09082620001e3565b50604080518082018252600381526223232360e91b60208201528151642230b9359960d91b81526000600582015291519182900360250190912090620001379082620001e3565b50620002af565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200016957607f821691505b6020821081036200018a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001de57600081815260208120601f850160051c81016020861015620001b95750805b601f850160051c820191505b81811015620001da57828155600101620001c5565b5050505b505050565b81516001600160401b03811115620001ff57620001ff6200013e565b620002178162000210845462000154565b8462000190565b602080601f8311600181146200024f5760008415620002365750858301515b600019600386901b1c1916600185901b178555620001da565b600085815260208120601f198616915b8281101562000280578886015182559484019460019091019084016200025f565b50858210156200029f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61132180620002bf6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b018757011610066578063b01875701461010c578063cde589101461011f578063cf0eca0914610132578063d6412c2714610145578063e5d19e691461015857600080fd5b806340c629fe146100985780634b698358146100c15780635119ce4b146100d4578063525f3654146100f9575b600080fd5b6100ab6100a6366004610a06565b61016b565b6040516100b89190610a97565b60405180910390f35b6100ab6100cf366004610aaa565b610210565b6100e76100e2366004610b32565b610287565b60405160ff90911681526020016100b8565b6100ab610107366004610b77565b6102ef565b6100ab61011a366004610a06565b6103a2565b6100ab61012d366004610a06565b610452565b6100ab610140366004610aaa565b61046d565b6100ab610153366004610bcf565b6105ca565b6100ab610166366004610b32565b61076f565b80516020818301810180516000825292820191909301209152805461018f90610c7c565b80601f01602080910402602001604051908101604052809291908181526020018280546101bb90610c7c565b80156102085780601f106101dd57610100808354040283529160200191610208565b820191906000526020600020905b8154815290600101906020018083116101eb57829003601f168201915b505050505081565b60405163d6412c2760e01b8152606090309063d6412c279061023a90879087908790600401610cb6565b600060405180830381865afa158015610257573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261027f9190810190610d07565b949350505050565b6000818351116102cd5760405162461bcd60e51b815260206004820152600c60248201526b4f7574206f662072616e676560a01b60448201526064015b60405180910390fd5b8282815181106102df576102df610d7e565b016020015160f81c905092915050565b60606000836040516103019190610d94565b9081526020016040518091039020805461031a90610c7c565b905060031461035b5760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064016102c4565b60008360405161036b9190610d94565b90815260200160405180910390208260405160200161038b929190610e4d565b604051602081830303815290604052905092915050565b60606000826040516103b49190610d94565b908152602001604051809103902080546103cd90610c7c565b905060031461040e5760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064016102c4565b60008260405161041e9190610d94565b908152602001604051809103902060405160200161043c9190610e75565b6040516020818303038152906040529050919050565b6060610467610460836103a2565b600061076f565b92915050565b6060806000600190508560008151811061048957610489610d7e565b60209101015160f81c60809081169003610506576104b36104ab876001610287565b60ff166107c7565b6104c16104ab886002610287565b6104cf6104ab896003610287565b6104dd6104ab8a6004610287565b6040516020016104f09493929190610e92565b6040516020818303038152906040529150600590505b84848360405160200161051b93929190610f4a565b60408051601f19818403018152919052915060ff81165b865181101561059e57826105496104ab8984610287565b61055889610166856001610fe3565b886105666104ab8c87610287565b60405160200161057a959493929190610ffb565b60408051601f198184030181529190529250610597600582610fe3565b9050610532565b50816040516020016105b091906110ca565b604051602081830303815290604052925050509392505050565b606080600386511115610601576080866040516020016105eb9291906110ff565b6040516020818303038152906040529050610618565b506040805180820190915260018152600060208201525b600060048651610628919061112e565b905060005b818160ff1610156107585782610644600184611150565b61064f90606461112e565b61065c9060ff8416611167565b88610668846004611186565b60ff168151811061067b5761067b610d7e565b016020015160f81c8961068f856004611186565b61069a9060016111af565b60ff16815181106106ad576106ad610d7e565b016020015160f81c8a6106c1866004611186565b6106cc9060026111af565b60ff16815181106106df576106df610d7e565b016020015160f81c8b6106f3876004611186565b6106fe9060036111af565b60ff168151811061071157610711610d7e565b602001015160f81c60f81b60f81c604051602001610734969594939291906111d4565b604051602081830303815290604052925080806107509061122e565b91505061062d565b61076383878761046d565b98975050505050505050565b606061077e6104ab8484610287565b6107906104ab856100e2866001610fe3565b6107a26104ab866100e2876002610fe3565b6107b46104ab876100e2886003610fe3565b60405160200161038b949392919061124d565b606060006107d48361085a565b600101905060008167ffffffffffffffff8111156107f4576107f4610932565b6040519080825280601f01601f19166020018201604052801561081e576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461082857509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106108995772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106108c5576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106108e357662386f26fc10000830492506010015b6305f5e10083106108fb576305f5e100830492506008015b612710831061090f57612710830492506004015b60648310610921576064830492506002015b600a83106104675760010192915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561097157610971610932565b604052919050565b600067ffffffffffffffff82111561099357610993610932565b50601f01601f191660200190565b60006109b46109af84610979565b610948565b90508281528383830111156109c857600080fd5b828260208301376000602084830101529392505050565b600082601f8301126109f057600080fd5b6109ff838335602085016109a1565b9392505050565b600060208284031215610a1857600080fd5b813567ffffffffffffffff811115610a2f57600080fd5b61027f848285016109df565b60005b83811015610a56578181015183820152602001610a3e565b83811115610a65576000848401525b50505050565b60008151808452610a83816020860160208601610a3b565b601f01601f19169290920160200192915050565b6020815260006109ff6020830184610a6b565b600080600060608486031215610abf57600080fd5b833567ffffffffffffffff80821115610ad757600080fd5b610ae3878388016109df565b94506020860135915080821115610af957600080fd5b610b05878388016109df565b93506040860135915080821115610b1b57600080fd5b50610b28868287016109df565b9150509250925092565b60008060408385031215610b4557600080fd5b823567ffffffffffffffff811115610b5c57600080fd5b610b68858286016109df565b95602094909401359450505050565b60008060408385031215610b8a57600080fd5b823567ffffffffffffffff811115610ba157600080fd5b610bad858286016109df565b925050602083013560ff81168114610bc457600080fd5b809150509250929050565b60008060008060808587031215610be557600080fd5b843567ffffffffffffffff80821115610bfd57600080fd5b610c09888389016109df565b95506020870135915080821115610c1f57600080fd5b610c2b888389016109df565b94506040870135915080821115610c4157600080fd5b610c4d888389016109df565b93506060870135915080821115610c6357600080fd5b50610c70878288016109df565b91505092959194509250565b600181811c90821680610c9057607f821691505b602082108103610cb057634e487b7160e01b600052602260045260246000fd5b50919050565b608081526000608082015260a060208201526000610cd760a0830186610a6b565b8281036040840152610ce98186610a6b565b90508281036060840152610cfd8185610a6b565b9695505050505050565b600060208284031215610d1957600080fd5b815167ffffffffffffffff811115610d3057600080fd5b8201601f81018413610d4157600080fd5b8051610d4f6109af82610979565b818152856020838501011115610d6457600080fd5b610d75826020830160208601610a3b565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60008251610da6818460208701610a3b565b9190910192915050565b8054600090600181811c9080831680610dca57607f831692505b60208084108203610deb57634e487b7160e01b600052602260045260246000fd5b818015610dff5760018114610e1457610e41565b60ff1986168952841515850289019650610e41565b60008881526020902060005b86811015610e395781548b820152908501908301610e20565b505084890196505b50505050505092915050565b6000610e598285610db0565b60f89390931b6001600160f81b03191683525050600101919050565b6000610e818284610db0565b601960fa1b81526001019392505050565b633c189e9160e11b81528451600090610eb2816004850160208a01610a3b565b661291103c191e9160c91b6004918401918201528551610ed981600b840160208a01610a3b565b661291103c989e9160c91b600b92909101918201528451610f01816012840160208901610a3b565b600481830101915050661291103c991e9160c91b600e8201528351610f2d816015840160208801610a3b565b61129160f11b601592909101918201526017019695505050505050565b731e3634b732b0b923b930b234b2b73a1034b21e9160611b81528351600090610f7a816014850160208901610a3b565b61011160f51b6014918401918201528451610f9c816016840160208901610a3b565b8451910190610fb2816016840160208801610a3b565b601f60f91b6016929091019182015260170195945050505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ff657610ff6610fcd565b500190565b6000865161100d818460208b01610a3b565b6d1e39ba37b81037b33339b2ba1e9160911b908301908152865161103881600e840160208b01610a3b565b6e12911039ba37b816b1b7b637b91e9160891b600e9290910191820152855161106881601d840160208a01610a3b565b65111034b21e9160d11b601d9290910191820152845161108f816023840160208901610a3b565b600e8183010191505083516110ab816015840160208801610a3b565b6211179f60e91b60159290910191820152601801979650505050505050565b600082516110dc818460208701610a3b565b701e17b634b732b0b923b930b234b2b73a1f60791b920191825250601101919050565b60ff60f81b8360f81b16815260008251611120816001850160208701610a3b565b919091016001019392505050565b60008261114b57634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561116257611162610fcd565b500390565b600081600019048311821515161561118157611181610fcd565b500290565b600060ff821660ff84168160ff04811182151516156111a7576111a7610fcd565b029392505050565b600060ff821660ff84168060ff038211156111cc576111cc610fcd565b019392505050565b600087516111e6818460208c01610a3b565b60f897881b6001600160f81b03199081169390910192835295871b861660018301525092851b8416600284015290841b8316600383015290921b166004820152600501919050565b600060ff821660ff810361124457611244610fcd565b60010192915050565b640e4cec4c2560db1b81526000855161126d816005850160208a01610a3b565b8083019050600b60fa1b8060058301528651611290816006850160208b01610a3b565b6006920191820181905285516112ad816007850160208a01610a3b565b6007920191820152835160058201916112ce90829060080160208801610a3b565b61252960f01b60039290910191820152600501969550505050505056fea2646970667358221220f92d4c14d781cce376c4648b111cbdc7d5825d76a5d42ec7c6db68973210573e64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063b018757011610066578063b01875701461010c578063cde589101461011f578063cf0eca0914610132578063d6412c2714610145578063e5d19e691461015857600080fd5b806340c629fe146100985780634b698358146100c15780635119ce4b146100d4578063525f3654146100f9575b600080fd5b6100ab6100a6366004610a06565b61016b565b6040516100b89190610a97565b60405180910390f35b6100ab6100cf366004610aaa565b610210565b6100e76100e2366004610b32565b610287565b60405160ff90911681526020016100b8565b6100ab610107366004610b77565b6102ef565b6100ab61011a366004610a06565b6103a2565b6100ab61012d366004610a06565b610452565b6100ab610140366004610aaa565b61046d565b6100ab610153366004610bcf565b6105ca565b6100ab610166366004610b32565b61076f565b80516020818301810180516000825292820191909301209152805461018f90610c7c565b80601f01602080910402602001604051908101604052809291908181526020018280546101bb90610c7c565b80156102085780601f106101dd57610100808354040283529160200191610208565b820191906000526020600020905b8154815290600101906020018083116101eb57829003601f168201915b505050505081565b60405163d6412c2760e01b8152606090309063d6412c279061023a90879087908790600401610cb6565b600060405180830381865afa158015610257573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261027f9190810190610d07565b949350505050565b6000818351116102cd5760405162461bcd60e51b815260206004820152600c60248201526b4f7574206f662072616e676560a01b60448201526064015b60405180910390fd5b8282815181106102df576102df610d7e565b016020015160f81c905092915050565b60606000836040516103019190610d94565b9081526020016040518091039020805461031a90610c7c565b905060031461035b5760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064016102c4565b60008360405161036b9190610d94565b90815260200160405180910390208260405160200161038b929190610e4d565b604051602081830303815290604052905092915050565b60606000826040516103b49190610d94565b908152602001604051809103902080546103cd90610c7c565b905060031461040e5760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064016102c4565b60008260405161041e9190610d94565b908152602001604051809103902060405160200161043c9190610e75565b6040516020818303038152906040529050919050565b6060610467610460836103a2565b600061076f565b92915050565b6060806000600190508560008151811061048957610489610d7e565b60209101015160f81c60809081169003610506576104b36104ab876001610287565b60ff166107c7565b6104c16104ab886002610287565b6104cf6104ab896003610287565b6104dd6104ab8a6004610287565b6040516020016104f09493929190610e92565b6040516020818303038152906040529150600590505b84848360405160200161051b93929190610f4a565b60408051601f19818403018152919052915060ff81165b865181101561059e57826105496104ab8984610287565b61055889610166856001610fe3565b886105666104ab8c87610287565b60405160200161057a959493929190610ffb565b60408051601f198184030181529190529250610597600582610fe3565b9050610532565b50816040516020016105b091906110ca565b604051602081830303815290604052925050509392505050565b606080600386511115610601576080866040516020016105eb9291906110ff565b6040516020818303038152906040529050610618565b506040805180820190915260018152600060208201525b600060048651610628919061112e565b905060005b818160ff1610156107585782610644600184611150565b61064f90606461112e565b61065c9060ff8416611167565b88610668846004611186565b60ff168151811061067b5761067b610d7e565b016020015160f81c8961068f856004611186565b61069a9060016111af565b60ff16815181106106ad576106ad610d7e565b016020015160f81c8a6106c1866004611186565b6106cc9060026111af565b60ff16815181106106df576106df610d7e565b016020015160f81c8b6106f3876004611186565b6106fe9060036111af565b60ff168151811061071157610711610d7e565b602001015160f81c60f81b60f81c604051602001610734969594939291906111d4565b604051602081830303815290604052925080806107509061122e565b91505061062d565b61076383878761046d565b98975050505050505050565b606061077e6104ab8484610287565b6107906104ab856100e2866001610fe3565b6107a26104ab866100e2876002610fe3565b6107b46104ab876100e2886003610fe3565b60405160200161038b949392919061124d565b606060006107d48361085a565b600101905060008167ffffffffffffffff8111156107f4576107f4610932565b6040519080825280601f01601f19166020018201604052801561081e576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461082857509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106108995772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106108c5576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106108e357662386f26fc10000830492506010015b6305f5e10083106108fb576305f5e100830492506008015b612710831061090f57612710830492506004015b60648310610921576064830492506002015b600a83106104675760010192915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561097157610971610932565b604052919050565b600067ffffffffffffffff82111561099357610993610932565b50601f01601f191660200190565b60006109b46109af84610979565b610948565b90508281528383830111156109c857600080fd5b828260208301376000602084830101529392505050565b600082601f8301126109f057600080fd5b6109ff838335602085016109a1565b9392505050565b600060208284031215610a1857600080fd5b813567ffffffffffffffff811115610a2f57600080fd5b61027f848285016109df565b60005b83811015610a56578181015183820152602001610a3e565b83811115610a65576000848401525b50505050565b60008151808452610a83816020860160208601610a3b565b601f01601f19169290920160200192915050565b6020815260006109ff6020830184610a6b565b600080600060608486031215610abf57600080fd5b833567ffffffffffffffff80821115610ad757600080fd5b610ae3878388016109df565b94506020860135915080821115610af957600080fd5b610b05878388016109df565b93506040860135915080821115610b1b57600080fd5b50610b28868287016109df565b9150509250925092565b60008060408385031215610b4557600080fd5b823567ffffffffffffffff811115610b5c57600080fd5b610b68858286016109df565b95602094909401359450505050565b60008060408385031215610b8a57600080fd5b823567ffffffffffffffff811115610ba157600080fd5b610bad858286016109df565b925050602083013560ff81168114610bc457600080fd5b809150509250929050565b60008060008060808587031215610be557600080fd5b843567ffffffffffffffff80821115610bfd57600080fd5b610c09888389016109df565b95506020870135915080821115610c1f57600080fd5b610c2b888389016109df565b94506040870135915080821115610c4157600080fd5b610c4d888389016109df565b93506060870135915080821115610c6357600080fd5b50610c70878288016109df565b91505092959194509250565b600181811c90821680610c9057607f821691505b602082108103610cb057634e487b7160e01b600052602260045260246000fd5b50919050565b608081526000608082015260a060208201526000610cd760a0830186610a6b565b8281036040840152610ce98186610a6b565b90508281036060840152610cfd8185610a6b565b9695505050505050565b600060208284031215610d1957600080fd5b815167ffffffffffffffff811115610d3057600080fd5b8201601f81018413610d4157600080fd5b8051610d4f6109af82610979565b818152856020838501011115610d6457600080fd5b610d75826020830160208601610a3b565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60008251610da6818460208701610a3b565b9190910192915050565b8054600090600181811c9080831680610dca57607f831692505b60208084108203610deb57634e487b7160e01b600052602260045260246000fd5b818015610dff5760018114610e1457610e41565b60ff1986168952841515850289019650610e41565b60008881526020902060005b86811015610e395781548b820152908501908301610e20565b505084890196505b50505050505092915050565b6000610e598285610db0565b60f89390931b6001600160f81b03191683525050600101919050565b6000610e818284610db0565b601960fa1b81526001019392505050565b633c189e9160e11b81528451600090610eb2816004850160208a01610a3b565b661291103c191e9160c91b6004918401918201528551610ed981600b840160208a01610a3b565b661291103c989e9160c91b600b92909101918201528451610f01816012840160208901610a3b565b600481830101915050661291103c991e9160c91b600e8201528351610f2d816015840160208801610a3b565b61129160f11b601592909101918201526017019695505050505050565b731e3634b732b0b923b930b234b2b73a1034b21e9160611b81528351600090610f7a816014850160208901610a3b565b61011160f51b6014918401918201528451610f9c816016840160208901610a3b565b8451910190610fb2816016840160208801610a3b565b601f60f91b6016929091019182015260170195945050505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ff657610ff6610fcd565b500190565b6000865161100d818460208b01610a3b565b6d1e39ba37b81037b33339b2ba1e9160911b908301908152865161103881600e840160208b01610a3b565b6e12911039ba37b816b1b7b637b91e9160891b600e9290910191820152855161106881601d840160208a01610a3b565b65111034b21e9160d11b601d9290910191820152845161108f816023840160208901610a3b565b600e8183010191505083516110ab816015840160208801610a3b565b6211179f60e91b60159290910191820152601801979650505050505050565b600082516110dc818460208701610a3b565b701e17b634b732b0b923b930b234b2b73a1f60791b920191825250601101919050565b60ff60f81b8360f81b16815260008251611120816001850160208701610a3b565b919091016001019392505050565b60008261114b57634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561116257611162610fcd565b500390565b600081600019048311821515161561118157611181610fcd565b500290565b600060ff821660ff84168160ff04811182151516156111a7576111a7610fcd565b029392505050565b600060ff821660ff84168060ff038211156111cc576111cc610fcd565b019392505050565b600087516111e6818460208c01610a3b565b60f897881b6001600160f81b03199081169390910192835295871b861660018301525092851b8416600284015290841b8316600383015290921b166004820152600501919050565b600060ff821660ff810361124457611244610fcd565b60010192915050565b640e4cec4c2560db1b81526000855161126d816005850160208a01610a3b565b8083019050600b60fa1b8060058301528651611290816006850160208b01610a3b565b6006920191820181905285516112ad816007850160208a01610a3b565b6007920191820152835160058201916112ce90829060080160208801610a3b565b61252960f01b60039290910191820152600501969550505050505056fea2646970667358221220f92d4c14d781cce376c4648b111cbdc7d5825d76a5d42ec7c6db68973210573e64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5858,
        "contract": "contracts/ERC721K/svg/SVGColor.sol:SVGColor",
        "label": "colors",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_bytes_storage)"
      }
    ],
    "types": {
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}