{
  "address": "0x0E7F29dAEc47Ec5f74fe7381692C9eb4392A4BB1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "svgLibrary_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "svgRegistry_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "render",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "svgLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "svgRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb3b17aa4305efcf7954046050e60cda16bf1d8ad87a86a15b094251dbe7ff576",
  "receipt": {
    "to": null,
    "from": "0x8C46e53dC60EC32e8DD67Fb11f076fF3EcDc5211",
    "contractAddress": "0x0E7F29dAEc47Ec5f74fe7381692C9eb4392A4BB1",
    "transactionIndex": 20,
    "gasUsed": "2626843",
    "logsBloom": "0x
    "blockHash": "0x5a4e56683330e0ebe1a09a0e813e0cc1ed223d5f8a8a62123f869a3641695ba8",
    "transactionHash": "0xb3b17aa4305efcf7954046050e60cda16bf1d8ad87a86a15b094251dbe7ff576",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 3472114,
        "transactionHash": "0xb3b17aa4305efcf7954046050e60cda16bf1d8ad87a86a15b094251dbe7ff576",
        "address": "0x0E7F29dAEc47Ec5f74fe7381692C9eb4392A4BB1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008c46e53dc60ec32e8dd67fb11f076ff3ecdc5211"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0x5a4e56683330e0ebe1a09a0e813e0cc1ed223d5f8a8a62123f869a3641695ba8"
      }
    ],
    "blockNumber": 3472114,
    "cumulativeGasUsed": "4834472",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1700AF12268032f96f4c447ac15d381442Be99f4",
    "0xf212c1F9d768AbBB111a23cbAa4172FdAA2A6600"
  ],
  "numDeployments": 1,
  "solcInputHash": "404f5463dd6ebc8ff1a6e382af5684f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"svgLibrary_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"svgRegistry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svgLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svgRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"Unauthorized()\":[{\"notice\":\"----------------------------------------------------------------------- Custom Errors -----------------------------------------------------------------------\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"----------------------------------------------------------------------- Events -----------------------------------------------------------------------\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"----------------------------------------------------------------------- Ownership Storage -----------------------------------------------------------------------\"},\"transferOwnership(address)\":{\"notice\":\"----------------------------------------------------------------------- Ownership Logic -----------------------------------------------------------------------\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolTogether/PoolTogetherV0Render.sol\":\"PoolTogetherV0Render\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ERC721K/interfaces/ISVGModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ISVGModule {\\n  function render(bytes memory input) external view returns (string memory);\\n\\n  function getEncoding() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3352c15d00c6db8c108858e4839252c81b7d17da394778ab572c055146b43e27\",\"license\":\"MIT\"},\"contracts/ERC721K/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        internal\\n    {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint8)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint64)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint96)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xe41fde66b1af92a5e131493ac16af2e4799e447dd8808608a4da024e340a826a\",\"license\":\"Unlicense\"},\"contracts/ERC721K/svg/SVGColor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract SVGColor {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n  using Strings for bytes;\\n\\n  mapping(string => bytes) public colors;\\n\\n  constructor() {\\n    colors[\\\"Black\\\"] = hex\\\"000000\\\";\\n    colors[\\\"White\\\"] = hex\\\"FFFFFF\\\";\\n    colors[\\\"Dark1\\\"] = hex\\\"232323\\\";\\n    colors[\\\"Dark2\\\"] = hex\\\"464646\\\";\\n  }\\n\\n  function getColor(string memory _colorName) public view returns (bytes memory) {\\n    require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(colors[_colorName], hex\\\"64\\\");\\n  }\\n\\n  function getColor(string memory _colorName, uint8 _alpha) public view returns (bytes memory) {\\n    require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(colors[_colorName], _alpha);\\n  }\\n\\n  function getRgba(string memory _colorName) public view returns (string memory) {\\n    return string(toRgba(getColor(_colorName), 0));\\n  }\\n\\n  // Input: array of colors (without alpha)\\n  // Ouputs a linearGradient\\n  function autoLinearGradient(\\n    bytes memory _colors,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) public view returns (bytes memory) {\\n    return this.autoLinearGradient(\\\"\\\", _colors, _id, _customAttributes);\\n  }\\n\\n  function autoLinearGradient(\\n    bytes memory _coordinates,\\n    bytes memory _colors,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) external view returns (bytes memory) {\\n    bytes memory _b;\\n    if (_coordinates.length > 3) {\\n      _b = abi.encodePacked(uint8(128), _coordinates);\\n    } else {\\n      _b = hex\\\"00\\\";\\n    }\\n    // Count the number of colors passed, each on 4 byte\\n    uint256 colorCount = _colors.length / 4;\\n    uint8 i = 0;\\n    while (i < colorCount) {\\n      _b = abi.encodePacked(\\n        _b,\\n        uint8(i * (100 / (colorCount - 1))), // grad. stop %\\n        uint8(_colors[i * 4]),\\n        uint8(_colors[i * 4 + 1]),\\n        uint8(_colors[i * 4 + 2]),\\n        uint8(_colors[i * 4 + 3])\\n      );\\n      i++;\\n    }\\n    return linearGradient(_b, _id, _customAttributes);\\n  }\\n\\n  function linearGradient(\\n    bytes memory _lg,\\n    bytes memory _id,\\n    bytes memory _customAttributes\\n  ) public pure returns (bytes memory) {\\n    bytes memory grdata;\\n    uint8 offset = 1;\\n\\n    if (uint8(_lg[0]) & 128 == 128) {\\n      grdata = abi.encodePacked(\\n        'x1=\\\"',\\n        byte2uint8(_lg, 1).toString(),\\n        '%\\\" x2=\\\"',\\n        byte2uint8(_lg, 2).toString(),\\n        '%\\\" y1=\\\"',\\n        byte2uint8(_lg, 3).toString(),\\n        '%\\\" y2=\\\"',\\n        byte2uint8(_lg, 4).toString(),\\n        '%\\\"'\\n      );\\n      offset = 5;\\n    }\\n    grdata = abi.encodePacked('<linearGradient id=\\\"', _id, '\\\" ', _customAttributes, grdata, \\\">\\\");\\n    for (uint256 i = offset; i < _lg.length; i += 5) {\\n      grdata = abi.encodePacked(\\n        grdata,\\n        '<stop offset=\\\"',\\n        byte2uint8(_lg, i).toString(),\\n        '%\\\" stop-color=\\\"',\\n        toRgba(_lg, i + 1),\\n        '\\\" id=\\\"',\\n        _id,\\n        byte2uint8(_lg, i).toString(),\\n        '\\\"/>'\\n      );\\n    }\\n    return abi.encodePacked(grdata, \\\"</linearGradient>\\\");\\n  }\\n\\n  function toRgba(bytes memory _rgba, uint256 offset) public pure returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        \\\"rgba(\\\",\\n        byte2uint8(_rgba, offset).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 1).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 2).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 3).toString(),\\n        \\\"%)\\\"\\n      );\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n\\n  // formats rgba white with a specified opacity / alpha\\n  function white_a(uint256 _a) internal pure returns (string memory) {\\n    return rgba(255, 255, 255, _a);\\n  }\\n\\n  // formats rgba black with a specified opacity / alpha\\n  function black_a(uint256 _a) internal pure returns (string memory) {\\n    return rgba(0, 0, 0, _a);\\n  }\\n\\n  // formats generic rgba color in css\\n  function rgba(\\n    uint256 _r,\\n    uint256 _g,\\n    uint256 _b,\\n    uint256 _a\\n  ) internal pure returns (string memory) {\\n    string memory formattedA = _a < 100 ? string.concat(\\\"0.\\\", uint2str(_a)) : \\\"1\\\";\\n    return\\n      string.concat(\\n        \\\"rgba(\\\",\\n        uint2str(_r),\\n        \\\",\\\",\\n        uint2str(_g),\\n        \\\",\\\",\\n        uint2str(_b),\\n        \\\",\\\",\\n        formattedA,\\n        \\\")\\\"\\n      );\\n  }\\n\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\",\"keccak256\":\"0xb3b33249f90935988e5a0a556d9932a1e21a2080a6f57df76dbbc950ff2ed8c0\",\"license\":\"MIT\"},\"contracts/ERC721K/svg/SVGLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { svg } from \\\"./svg.sol\\\";\\nimport { svgUtils } from \\\"./svgUtils.sol\\\";\\nimport { SVGColor } from \\\"./SVGColor.sol\\\";\\n\\ncontract SVGLibrary {\\n  address private _colors;\\n\\n  bytes32 private immutable BUILD = keccak256(\\\"BUILD\\\");\\n  bytes32 private immutable COLOR = keccak256(\\\"COLOR\\\");\\n  bytes32 private immutable UTILS = keccak256(\\\"UTILS\\\");\\n\\n  mapping(bytes32 => address) _modules;\\n\\n  constructor(address _colors_) {\\n    _colors = _colors_;\\n  }\\n\\n  function execute(bytes32 package, bytes calldata input)\\n    external\\n    view\\n    returns (string memory data)\\n  {\\n    if (_modules[package] != 0x0000000000000000000000000000000000000000) {\\n      (bool success, bytes memory data) = address(_modules[package]).staticcall(input);\\n      return string(data);\\n    } else if (package == BUILD) {\\n      (bool success, bytes memory data) = address(svg).staticcall(input);\\n      return string(data);\\n    } else if (package == COLOR) {\\n      (bool success, bytes memory data) = _colors.staticcall(input);\\n      return string(data);\\n    } else if (package == UTILS) {\\n      (bool success, bytes memory data) = address(svgUtils).staticcall(input);\\n      return string(data);\\n    } else {\\n      return string(data);\\n      revert(\\\"SVGLibrary:invalid-operation\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x25979e8ae745d439ba182e2b3751fb12831dfe7d55b53670a93d6c8a3ec2418d\",\"license\":\"MIT\"},\"contracts/ERC721K/svg/SVGRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Owned } from \\\"../../Solbase/Owned.sol\\\";\\nimport { ISVGModule } from \\\"../interfaces/ISVGModule.sol\\\";\\n\\ncontract SVGRegistry is Owned {\\n  mapping(bytes32 => address) private _modules;\\n\\n  constructor() Owned(msg.sender) {}\\n\\n  function fetch(bytes32 widgetId, bytes memory input) external view returns (string memory) {\\n    if (_modules[widgetId] != address(0)) {\\n      return \\\"ISVGModule(_modules[widgetId]).decode(input);\\\";\\n    } else {\\n      return \\\"\\\";\\n    }\\n  }\\n\\n  function getWidget(bytes32 widgetId) external view returns (address widget) {\\n    return _modules[widgetId];\\n  }\\n\\n  function setWidget(bytes32 widgetId, address widget) external onlyOwner {\\n    _modules[widgetId] = widget;\\n  }\\n}\\n\",\"keccak256\":\"0x10385cd1801ae99440dce0740966aa30936cbd149929b7a6f291398a6dcb4e97\",\"license\":\"MIT\"},\"contracts/ERC721K/svg/svg.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./svgUtils.sol\\\";\\n\\n/**\\n * @title svg\\n * @author Kames Geraghty\\n * @notice SVG construction library using web-like API.\\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n */\\nlibrary svg {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  function g(string memory _props, string memory _children) internal pure returns (string memory) {\\n    return el(\\\"g\\\", _props, _children);\\n  }\\n\\n  function path(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"path\\\", _props, _children);\\n  }\\n\\n  function text(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"text\\\", _props, _children);\\n  }\\n\\n  function line(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"line\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"circle\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"circle\\\", _props);\\n  }\\n\\n  function rect(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"rect\\\", _props, _children);\\n  }\\n\\n  function rect(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"rect\\\", _props);\\n  }\\n\\n  function stop(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"stop\\\", _props);\\n  }\\n\\n  function filter(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"filter\\\", _props, _children);\\n  }\\n\\n  function defs(string memory _children) internal pure returns (string memory) {\\n    return el(\\\"defs\\\", \\\"\\\", _children);\\n  }\\n\\n  function cdata(string memory _content) internal pure returns (string memory) {\\n    return string.concat(\\\"<![CDATA[\\\", _content, \\\"]]>\\\");\\n  }\\n\\n  /* GRADIENTS */\\n  function radialGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"radialGradient\\\", _props, _children);\\n  }\\n\\n  function linearGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"linearGradient\\\", _props, _children);\\n  }\\n\\n  function gradientStop(\\n    uint256 offset,\\n    string memory stopColor,\\n    string memory _props\\n  ) internal pure returns (string memory) {\\n    return\\n      el(\\n        \\\"stop\\\",\\n        string.concat(\\n          prop(\\\"stop-color\\\", stopColor),\\n          \\\" \\\",\\n          prop(\\\"offset\\\", string.concat(svgUtils.uint2str(offset), \\\"%\\\")),\\n          \\\" \\\",\\n          _props\\n        )\\n      );\\n  }\\n\\n  function animateTransform(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"animateTransform\\\", _props);\\n  }\\n\\n  function image(string memory _href, string memory _props) internal pure returns (string memory) {\\n    return el(\\\"image\\\", string.concat(prop(\\\"href\\\", _href), \\\" \\\", _props));\\n  }\\n\\n  /* COMMON */\\n  // A generic element, can be used to construct any SVG (or HTML) element\\n  function el(\\n    string memory _tag,\\n    string memory _props,\\n    string memory _children\\n  ) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\">\\\", _children, \\\"</\\\", _tag, \\\">\\\");\\n  }\\n\\n  // A generic element, can be used to construct any SVG (or HTML) element without children\\n  function el(string memory _tag, string memory _props) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\"/>\\\");\\n  }\\n\\n  function start(string memory _tag, string memory _props) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\">\\\");\\n  }\\n\\n  function start(string memory _tag) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\">\\\");\\n  }\\n\\n  function end(string memory _tag) internal pure returns (string memory) {\\n    return string.concat(\\\"</\\\", _tag, \\\">\\\");\\n  }\\n\\n  // an SVG attribute\\n  function prop(string memory _key, string memory _val) internal pure returns (string memory) {\\n    return string.concat(_key, \\\"=\\\", '\\\"', _val, '\\\" ');\\n  }\\n\\n  function stringifyIntSet(\\n    bytes memory _data,\\n    uint256 _offset,\\n    uint256 _len\\n  ) public pure returns (bytes memory) {\\n    bytes memory res;\\n    require(_data.length >= _offset + _len, \\\"Out of range\\\");\\n    for (uint256 i = _offset; i < _offset + _len; i++) {\\n      res = abi.encodePacked(res, byte2uint8(_data, i).toString(), \\\" \\\");\\n    }\\n    return res;\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n}\\n\",\"keccak256\":\"0xee0b0e1679b33247ff97d754dd019a17fd77707c8b6d64b0a31342680c7760b0\",\"license\":\"MIT\"},\"contracts/ERC721K/svg/svgUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { BytesLib } from \\\"../libraries/BytesLib.sol\\\";\\n\\n/**\\n * @title  SVG Utilities\\n * @author Kames Geraghty\\n * @notice The SVG Utilities Library provides functions for constructing SVG; format CSS and numbers.\\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n */\\nlibrary svgUtils {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  /// @notice Empty SVG element\\n  string internal constant NULL = \\\"\\\";\\n\\n  /**\\n   * @notice Formats a CSS variable line. Includes a semicolon for formatting.\\n   * @param _key User for which to calculate prize amount.\\n   * @param _val User for which to calculate prize amount.\\n   * @return string Generated CSS variable.\\n   */\\n  function setCssVar(string memory _key, string memory _val) internal pure returns (string memory) {\\n    return string.concat(\\\"--\\\", _key, \\\":\\\", _val, \\\";\\\");\\n  }\\n\\n  /**\\n   * @notice Formats getting a css variable\\n   * @param _key User for which to calculate prize amount.\\n   * @return string Generated CSS variable.\\n   */\\n  function getCssVar(string memory _key) internal pure returns (string memory) {\\n    return string.concat(\\\"var(--\\\", _key, \\\")\\\");\\n  }\\n\\n  // formats getting a def URL\\n  function getDefURL(string memory _id) internal pure returns (string memory) {\\n    return string.concat(\\\"url(#\\\", _id, \\\")\\\");\\n  }\\n\\n  // checks if two Strings are equal\\n  function StringsEqual(string memory _a, string memory _b) internal pure returns (bool) {\\n    return keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n  }\\n\\n  // returns the length of a string in characters\\n  function utfStringLength(string memory _str) internal pure returns (uint256 length) {\\n    uint256 i = 0;\\n    bytes memory string_rep = bytes(_str);\\n\\n    while (i < string_rep.length) {\\n      if (string_rep[i] >> 7 == 0) i += 1;\\n      else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n      else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n      else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n        i += 4;\\n        //For safety\\n      else i += 1;\\n\\n      length++;\\n    }\\n  }\\n\\n  function round2Txt(\\n    uint256 _value,\\n    uint8 _decimals,\\n    uint8 _prec\\n  ) internal pure returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        (_value / 10**_decimals).toString(),\\n        \\\".\\\",\\n        (_value / 10**(_decimals - _prec) - (_value / 10**(_decimals)) * 10**_prec).toString()\\n      );\\n  }\\n\\n  // converts an unsigned integer to a string\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n\\n  function splitAddress(address account) internal pure returns (string memory) {\\n    string memory addy = Strings.toHexString(uint256(uint160(account)), 20);\\n    bytes memory start = BytesLib.slice(abi.encodePacked(addy), 0, 6);\\n    bytes memory end = BytesLib.slice(abi.encodePacked(addy), 37, 4);\\n    return string.concat(string(abi.encodePacked(start)), \\\"...\\\", string(abi.encodePacked(end)));\\n  }\\n\\n  function toString(address account) internal pure returns (string memory) {\\n    return toString(abi.encodePacked(account));\\n  }\\n\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    return toString(abi.encodePacked(value));\\n  }\\n\\n  function toString(bytes32 value) internal pure returns (string memory) {\\n    return toString(abi.encodePacked(value));\\n  }\\n\\n  function toString(bytes memory data) internal pure returns (string memory) {\\n    bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n    bytes memory str = new bytes(2 + data.length * 2);\\n    str[0] = \\\"0\\\";\\n    str[1] = \\\"x\\\";\\n    for (uint256 i = 0; i < data.length; i++) {\\n      str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\\n      str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\\n    }\\n    return string(str);\\n  }\\n\\n  function getColor(bytes memory _colorHex) internal view returns (bytes memory) {\\n    require(_colorHex.length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(_colorHex, hex\\\"64\\\");\\n  }\\n\\n  function getColor(bytes memory _colorHex, uint8 _alpha) internal view returns (bytes memory) {\\n    require(_colorHex.length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(_colorHex, _alpha);\\n  }\\n\\n  function getRgba(bytes memory _colorHex) internal view returns (string memory) {\\n    return string(toRgba(getColor(_colorHex), 0));\\n  }\\n\\n  function toRgba(bytes memory _rgba, uint256 offset) internal pure returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        \\\"rgba(\\\",\\n        byte2uint8(_rgba, offset).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 1).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 2).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 3).toString(),\\n        \\\"%)\\\"\\n      );\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) internal pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n}\\n\",\"keccak256\":\"0x871dc8e8daa8adcc1d582f6cadbb3b932cb242082756e48e899bc8415b6a149f\",\"license\":\"MIT\"},\"contracts/PoolTogether/PoolTogetherV0Render.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\n\\nimport { Base64 } from \\\"../Solbase/Base64.sol\\\";\\nimport { Owned } from \\\"../Solbase/Owned.sol\\\";\\nimport { SVGLibrary } from \\\"../ERC721K/svg/SVGLibrary.sol\\\";\\nimport { SVGRegistry } from \\\"../ERC721K/svg/SVGRegistry.sol\\\";\\n\\nimport { svg } from \\\"../ERC721K/svg/svg.sol\\\";\\nimport { svgUtils } from \\\"../ERC721K/svg/svgUtils.sol\\\";\\n\\ncontract PoolTogetherV0Render is Owned {\\n  bytes32 private constant BYTES32_WEB3_ASSETS =\\n    0x574542335f415353455453000000000000000000000000000000000000000000;\\n  bytes32 private constant BYTES32_TOKEN_USDC =\\n    0x544f4b454e5f5553444300000000000000000000000000000000000000000000;\\n  bytes32 private constant BYTES32_TOKEN_POOL =\\n    0x544f4b454e5f504f4f4c00000000000000000000000000000000000000000000;\\n  bytes32 private constant BYTES32_LOGO_POOL =\\n    0x4c4f474f5f504f4f4c0000000000000000000000000000000000000000000000;\\n  bytes32 private constant BYTES32_ICON_NETWORK_TEST =\\n    0x49434f4e5f4e4554574f524b5f54455354000000000000000000000000000000;\\n  bytes32 private constant BYTES32_ICON_NETWORK_ETHEREUM =\\n    0x49434f4e5f4e4554574f524b5f455448455245554d0000000000000000000000;\\n  bytes32 private constant BYTES32_ICON_NETWORK_OPTIMISM =\\n    0x49434f4e5f4e4554574f524b5f4f5054494d49534d0000000000000000000000;\\n  bytes32 private constant BYTES32_ICON_NETWORK_ARBITRUM =\\n    0x49434f4e5f4e4554574f524b5f415242495452554d0000000000000000000000;\\n  bytes32 private constant BYTES32_ICON_NETWORK_POLYGON =\\n    0x49434f4e5f4e4554574f524b5f504f4c59474f4e000000000000000000000000;\\n  string private constant ENCODING = \\\"data:image/svg+xml;base64, \\\";\\n\\n  address public svgLibrary;\\n  address public svgRegistry;\\n\\n  constructor(address svgLibrary_, address svgRegistry_) Owned(msg.sender)  {\\n    svgLibrary = svgLibrary_;\\n    svgRegistry = svgRegistry_;\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function render(bytes memory input) external view returns (string memory) {\\n    return string(abi.encodePacked(ENCODING, Base64.encode(bytes(_construct(input)))));\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n  function _construct(bytes memory input) internal view returns (string memory) {\\n    (\\n      address account,\\n      address asset,\\n      uint256 balance,\\n      uint256 chance,\\n      uint256 avgBalance2Weeks,\\n      uint256 avgBalance8Weeks,\\n      uint256 avgBalance26Weeks,\\n      uint256 avgBalance52Weeks,\\n      string memory emoji,\\n      bytes memory color\\n    ) = abi.decode(\\n        input,\\n        (address, address, uint256, uint256, uint256, uint256, uint256, uint256, string, bytes)\\n      );\\n\\n    string memory tagline = \\\"Web3 Savings Network\\\";\\n\\n    return\\n      string.concat(\\n        svg.start(\\n          \\\"svg\\\",\\n          string.concat(\\n            svg.prop(\\\"xmlns\\\", \\\"http://www.w3.org/2000/svg\\\"),\\n            svg.prop(\\\"font-family\\\", \\\"Roboto, sans-serif\\\"),\\n            svg.prop(\\\"height\\\", \\\"300\\\"),\\n            svg.prop(\\\"width\\\", \\\"500\\\"),\\n            svg.prop(\\\"viewbox\\\", \\\"0 0 500 300\\\"),\\n            svg.prop(\\\"style\\\", \\\"border-radius: 10px;\\\"),\\n            svg.prop(\\\"fill\\\", string(svgUtils.getRgba(color)))\\n          )\\n        ),\\n        renderDesign(color),\\n        renderHeader(chance),\\n        renderFooter(account, avgBalance8Weeks, emoji, tagline),\\n        \\\"<defs><style>.text-shadow-md {text-shadow: 0px 4px 10px rgba(0, 0, 0, 0.12);}</style></defs>\\\",\\n        svg.end(\\\"svg\\\")\\n      );\\n  }\\n\\n  function renderDesign(bytes memory color) internal view returns (string memory) {\\n    return\\n      string.concat(\\n        // svg.rect(\\n        //   string.concat(\\n        //     svg.prop(\\\"x\\\", \\\"0.00195312\\\"),\\n        //     svg.prop(\\\"width\\\", \\\"500\\\"),\\n        //     svg.prop(\\\"height\\\", \\\"300\\\"),\\n        //     // svg.prop(\\\"fill\\\", string(svgUtils.getRgba(color)))\\n        //   )\\n        // ),\\n        svg.rect(\\n          string.concat(svg.prop(\\\"x\\\", \\\"0\\\"), svg.prop(\\\"width\\\", \\\"500\\\"), svg.prop(\\\"height\\\", \\\"500\\\"))\\n        ),\\n        svg.g(\\n          \\\"\\\",\\n          string.concat(\\n            '<ellipse opacity=\\\"0.1\\\" cx=\\\"93\\\" cy=\\\"300\\\" rx=\\\"230\\\" ry=\\\"145\\\" fill=\\\"black\\\"/>',\\n            '<ellipse opacity=\\\"0.08\\\" cx=\\\"550\\\" cy=\\\"-119\\\" rx=\\\"450\\\" ry=\\\"247\\\" fill=\\\"black\\\"/>'\\n          )\\n        )\\n      );\\n  }\\n\\n  function renderHeader(uint256 balance) internal view returns (string memory) {\\n    return string.concat(chanceDetails(balance), cardDetails());\\n  }\\n\\n  function cardDetails() internal view returns (string memory) {\\n    return\\n      string.concat(\\n        svg.g(\\n          string.concat(svg.prop(\\\"transform\\\", \\\"translate(350,30)\\\")),\\n          _registry(BYTES32_WEB3_ASSETS, abi.encode(BYTES32_LOGO_POOL))\\n        )\\n      );\\n  }\\n\\n  function chanceDetails(uint256 balance) internal view returns (string memory) {\\n    return\\n      string.concat(\\n        svg.text(\\n          string.concat(\\n            svg.prop(\\\"x\\\", \\\"7.5%\\\"),\\n            svg.prop(\\\"y\\\", \\\"62.5\\\"),\\n            svg.prop(\\\"font-size\\\", \\\"18\\\"),\\n            svg.prop(\\\"alignment-baseline\\\", \\\"middle\\\"),\\n            svg.prop(\\\"text-anchor\\\", \\\"start\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\")\\n          ),\\n          string.concat(unicode\\\"\\ud83c\\udfc6\\\", \\\" Total Chance\\\")\\n        ),\\n        svg.text(\\n          string.concat(\\n            svg.prop(\\\"x\\\", \\\"7.5%\\\"),\\n            svg.prop(\\\"y\\\", \\\"100\\\"),\\n            svg.prop(\\\"font-size\\\", \\\"32\\\"),\\n            svg.prop(\\\"alignment-baseline\\\", \\\"middle\\\"),\\n            svg.prop(\\\"text-anchor\\\", \\\"start\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\")\\n          ),\\n          string.concat(\\\"$\\\", string(svgUtils.round2Txt(balance, 6, 2)))\\n        )\\n      );\\n  }\\n\\n  function avgBalanceDetails(uint256 avgBalance8Weeks) internal view returns (string memory) {\\n    return\\n      string.concat(\\n        svg.text(\\n          string.concat(\\n            svg.prop(\\\"x\\\", \\\"95%\\\"),\\n            svg.prop(\\\"y\\\", \\\"50%\\\"),\\n            svg.prop(\\\"font-size\\\", \\\"14\\\"),\\n            svg.prop(\\\"alignment-baseline\\\", \\\"middle\\\"),\\n            svg.prop(\\\"text-anchor\\\", \\\"end\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\")\\n          ),\\n          \\\"60 Day Avg.\\\"\\n        ),\\n        svg.text(\\n          string.concat(\\n            svg.prop(\\\"x\\\", \\\"95%\\\"),\\n            svg.prop(\\\"y\\\", \\\"60%\\\"),\\n            svg.prop(\\\"font-size\\\", \\\"24\\\"),\\n            svg.prop(\\\"alignment-baseline\\\", \\\"middle\\\"),\\n            svg.prop(\\\"text-anchor\\\", \\\"end\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\")\\n          ),\\n          string.concat(\\\"$\\\", string(svgUtils.round2Txt(avgBalance8Weeks, 6, 2)))\\n        )\\n      );\\n  }\\n\\n  function renderFooter(\\n    address account,\\n    uint256 avgBalance8Weeks,\\n    string memory emoji,\\n    string memory tagline\\n  ) internal view returns (string memory) {\\n    return\\n      string.concat(\\n        accountDetails(account, emoji, tagline),\\n        renderNetwork(),\\n        avgBalanceDetails(avgBalance8Weeks)\\n      );\\n  }\\n\\n  function accountDetails(\\n    address account,\\n    string memory emoji,\\n    string memory tagline\\n  ) internal view returns (string memory) {\\n    return\\n      string.concat(\\n        svg.text(\\n          string.concat(\\n            svg.prop(\\\"x\\\", \\\"7.5%\\\"),\\n            svg.prop(\\\"y\\\", \\\"67.5%\\\"),\\n            svg.prop(\\\"font-size\\\", \\\"24\\\"),\\n            svg.prop(\\\"alignment-baseline\\\", \\\"middle\\\"),\\n            svg.prop(\\\"text-anchor\\\", \\\"start\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\")\\n          ),\\n          emoji\\n        ),\\n        svg.text(\\n          string.concat(\\n            svg.prop(\\\"x\\\", \\\"7.5%\\\"),\\n            svg.prop(\\\"y\\\", \\\"77.5%\\\"),\\n            svg.prop(\\\"font-size\\\", \\\"28\\\"),\\n            svg.prop(\\\"alignment-baseline\\\", \\\"middle\\\"),\\n            svg.prop(\\\"text-anchor\\\", \\\"start\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\")\\n          ),\\n          svgUtils.splitAddress(account)\\n        ),\\n        svg.text(\\n          string.concat(\\n            svg.prop(\\\"x\\\", \\\"7.5%\\\"),\\n            svg.prop(\\\"y\\\", \\\"87.5%\\\"),\\n            svg.prop(\\\"font-size\\\", \\\"14\\\"),\\n            svg.prop(\\\"font-weight\\\", \\\"300\\\"),\\n            svg.prop(\\\"alignment-baseline\\\", \\\"middle\\\"),\\n            svg.prop(\\\"text-anchor\\\", \\\"start\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\")\\n          ),\\n          tagline\\n        )\\n      );\\n  }\\n\\n  function renderNetwork() internal view returns (string memory) {\\n    bytes32 network;\\n    string memory name;\\n    if (block.chainid == 1) {\\n      name = \\\"Ethereum\\\";\\n      network = BYTES32_ICON_NETWORK_ETHEREUM;\\n    } else if (block.chainid == 10) {\\n      name = \\\"Optimism\\\";\\n      network = BYTES32_ICON_NETWORK_OPTIMISM;\\n    } else if (block.chainid == 137) {\\n      name = \\\"Polygon\\\";\\n      network = BYTES32_ICON_NETWORK_POLYGON;\\n    } else if (block.chainid == 42161) {\\n      name = \\\"Arbitrum\\\";\\n      network = BYTES32_ICON_NETWORK_ARBITRUM;\\n    } else {\\n      name = \\\"Unknown\\\";\\n      network = BYTES32_ICON_NETWORK_TEST;\\n      // network = BYTES32_ICON_NETWORK_ETHEREUM;\\n    }\\n\\n    return\\n      string.concat(\\n        svg.text(\\n          string.concat(\\n            svg.prop(\\\"x\\\", \\\"85%\\\"),\\n            svg.prop(\\\"y\\\", \\\"80%\\\"),\\n            svg.prop(\\\"font-size\\\", \\\"18\\\"),\\n            svg.prop(\\\"alignment-baseline\\\", \\\"middle\\\"),\\n            svg.prop(\\\"text-anchor\\\", \\\"end\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\")\\n          ),\\n          name\\n        ),\\n        svg.g(\\n          string.concat(svg.prop(\\\"transform\\\", \\\"translate(440,225)\\\")),\\n          _registry(BYTES32_WEB3_ASSETS, abi.encode(network))\\n        )\\n      );\\n  }\\n\\n  function _lib(bytes32 _key, bytes memory _value) internal view returns (string memory) {\\n    return SVGLibrary(svgLibrary).execute(_key, _value);\\n  }\\n\\n  function _registry(bytes32 _key, bytes memory _value) internal view returns (string memory) {\\n    return SVGRegistry(svgRegistry).fetch(_key, _value);\\n  }\\n}\\n\",\"keccak256\":\"0x29d0acb451fcf0c84128035ce55a160b7375cb16f3938c0c977ef2166dacc8a8\",\"license\":\"GPL-3.0\"},\"contracts/Solbase/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library to encode and decode strings in Base64.\\n/// @author SolDAO (https://github.com/Sol-DAO/Solbase/blob/main/src/utils/Base64.sol)\\n/// @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/Base64.sol)\\nlibrary Base64 {\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// See: https://datatracker.ietf.org/doc/html/rfc4648\\n    /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\\n    /// @param noPadding Whether to strip away the padding.\\n    function encode(bytes memory data, bool fileSafe, bool noPadding) internal pure returns (string memory result) {\\n        assembly {\\n            let dataLength := mload(data)\\n\\n            if dataLength {\\n                // Multiply by 4/3 rounded up.\\n                // The `shl(2, ...)` is equivalent to multiplying by 4.\\n                let encodedLength := shl(2, div(add(dataLength, 2), 3))\\n\\n                // Set `result` to point to the start of the free memory.\\n                result := mload(0x40)\\n\\n                // Store the table into the scratch space.\\n                // Offsetted by -1 byte so that the `mload` will load the character.\\n                // We will rewrite the free memory pointer at `0x40` later with\\n                // the allocated size.\\n                // The magic constant 0x0230 will translate \\\"-_\\\" + \\\"+/\\\".\\n                mstore(0x1f, \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\\\")\\n                mstore(0x3f, sub(\\\"ghijklmnopqrstuvwxyz0123456789-_\\\", mul(iszero(fileSafe), 0x0230)))\\n\\n                // Skip the first slot, which stores the length.\\n                let ptr := add(result, 0x20)\\n                let end := add(ptr, encodedLength)\\n\\n                // Run over the input, 3 bytes at a time.\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    data := add(data, 3) // Advance 3 bytes.\\n                    let input := mload(data)\\n\\n                    // Write 4 bytes. Optimized for fewer stack operations.\\n                    mstore8(    ptr    , mload(and(shr(18, input), 0x3F)))\\n                    mstore8(add(ptr, 1), mload(and(shr(12, input), 0x3F)))\\n                    mstore8(add(ptr, 2), mload(and(shr( 6, input), 0x3F)))\\n                    mstore8(add(ptr, 3), mload(and(        input , 0x3F)))\\n                    \\n                    ptr := add(ptr, 4) // Advance 4 bytes.\\n                    // prettier-ignore\\n                    if iszero(lt(ptr, end)) { break }\\n                }\\n\\n                let r := mod(dataLength, 3)\\n\\n                switch noPadding\\n                case 0 {\\n                    // Offset `ptr` and pad with '='. We can simply write over the end.\\n                    mstore8(sub(ptr, iszero(iszero(r))), 0x3d) // Pad at `ptr - 1` if `r > 0`.\\n                    mstore8(sub(ptr, shl(1, eq(r, 1))), 0x3d) // Pad at `ptr - 2` if `r == 1`.\\n                    // Write the length of the string.\\n                    mstore(result, encodedLength)\\n                }\\n                default {\\n                    // Write the length of the string.\\n                    mstore(result, sub(encodedLength, add(iszero(iszero(r)), eq(r, 1))))\\n                }\\n\\n                // Allocate the memory for the string.\\n                // Add 31 and mask with `not(31)` to round the\\n                // free memory pointer up the next multiple of 32.\\n                mstore(0x40, and(add(end, 31), not(31)))\\n            }\\n        }\\n    }\\n\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// Equivalent to `encode(data, false, false)`.\\n    function encode(bytes memory data) internal pure returns (string memory result) {\\n        result = encode(data, false, false);\\n    }\\n\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// Equivalent to `encode(data, fileSafe, false)`.\\n    function encode(bytes memory data, bool fileSafe) internal pure returns (string memory result) {\\n        result = encode(data, fileSafe, false);\\n    }\\n\\n    /// @dev Decodes base64 encoded `data`.\\n    ///\\n    /// Supports:\\n    /// - RFC 4648 (both standard and file-safe mode).\\n    /// - RFC 3501 (63: ',').\\n    ///\\n    /// Does not support:\\n    /// - Line breaks.\\n    ///\\n    /// Note: For performance reasons,\\n    /// this function will NOT revert on invalid `data` inputs.\\n    /// Outputs for invalid inputs will simply be undefined behaviour.\\n    /// It is the user's responsibility to ensure that the `data`\\n    /// is a valid base64 encoded string.\\n    function decode(string memory data) internal pure returns (bytes memory result) {\\n        assembly {\\n            let dataLength := mload(data)\\n\\n            if dataLength {\\n                let end := add(data, dataLength)\\n                let decodedLength := mul(shr(2, dataLength), 3)\\n\\n                switch and(dataLength, 3)\\n                case 0 {\\n                    // If padded.\\n                    decodedLength := sub(\\n                        decodedLength,\\n                        add(eq(and(mload(end), 0xFF), 0x3d), eq(and(mload(end), 0xFFFF), 0x3d3d))\\n                    )\\n                }\\n                default {\\n                    // If non-padded.\\n                    decodedLength := add(decodedLength, sub(and(dataLength, 3), 1))\\n                }\\n\\n                result := mload(0x40)\\n\\n                // Write the length of the string.\\n                mstore(result, decodedLength)\\n\\n                // Skip the first slot, which stores the length.\\n                let ptr := add(result, 0x20)\\n\\n                // Load the table into the scratch space.\\n                // Constants are optimized for smaller bytecode with zero gas overhead.\\n                // `m` also doubles as the mask of the upper 6 bits.\\n                let m := 0xfc000000fc00686c7074787c8084888c9094989ca0a4a8acb0b4b8bcc0c4c8cc\\n                mstore(0x5b, m)\\n                mstore(0x3b, 0x04080c1014181c2024282c3034383c4044484c5054585c6064)\\n                mstore(0x1a, 0xf8fcf800fcd0d4d8dce0e4e8ecf0f4)\\n\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    // Read 4 bytes.\\n                    data := add(data, 4)\\n                    let input := mload(data)\\n\\n                    // Write 3 bytes.\\n                    mstore(ptr, or(\\n                        and(m, mload(byte(28, input))),\\n                        shr(6, or(\\n                            and(m, mload(byte(29, input))),\\n                            shr(6, or(\\n                                and(m, mload(byte(30, input))),\\n                                shr(6, mload(byte(31, input)))\\n                            ))\\n                        ))\\n                    ))\\n\\n                    ptr := add(ptr, 3)\\n                    \\n                    // prettier-ignore\\n                    if iszero(lt(data, end)) { break }\\n                }\\n\\n                // Allocate the memory for the string.\\n                // Add 32 + 31 and mask with `not(31)` to round the\\n                // free memory pointer up the next multiple of 32.\\n                mstore(0x40, and(add(add(result, decodedLength), 63), not(31)))\\n\\n                // Restore the zero slot.\\n                mstore(0x60, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4728181da403b230b3066303df2e02da2e23358e79494aa0df7a1ddd98b2e869\",\"license\":\"MIT\"},\"contracts/Solbase/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solbase (https://github.com/Sol-DAO/Solbase/blob/main/src/auth/Owned.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /// -----------------------------------------------------------------------\\n    /// Events\\n    /// -----------------------------------------------------------------------\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /// -----------------------------------------------------------------------\\n    /// Custom Errors\\n    /// -----------------------------------------------------------------------\\n\\n    error Unauthorized();\\n\\n    /// -----------------------------------------------------------------------\\n    /// Ownership Storage\\n    /// -----------------------------------------------------------------------\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        if (msg.sender != owner) revert Unauthorized();\\n\\n        _;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Constructor\\n    /// -----------------------------------------------------------------------\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Ownership Logic\\n    /// -----------------------------------------------------------------------\\n\\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xf0368e1996c0fcad13e23bcf261711339a3134eb0f3d59da06c52b86612c67a5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002e4038038062002e408339810160408190526200003491620000c4565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055620000fc565b80516001600160a01b0381168114620000bf57600080fd5b919050565b60008060408385031215620000d857600080fd5b620000e383620000a7565b9150620000f360208401620000a7565b90509250929050565b612d34806200010c6000396000f3fe60806040526004361061004a5760003560e01c8063316df61e1461004f5780638da5cb5b14610085578063933d9eb5146100bd578063a001e0d5146100dd578063f2fde38b146100fd575b600080fd5b34801561005b57600080fd5b5061006f61006a3660046122f4565b610112565b60405161007c91906123d0565b60405180910390f35b34801561009157600080fd5b506000546100a5906001600160a01b031681565b6040516001600160a01b03909116815260200161007c565b3480156100c957600080fd5b506002546100a5906001600160a01b031681565b3480156100e957600080fd5b506001546100a5906001600160a01b031681565b61011061010b3660046123fb565b610182565b005b60606040518060400160405280601b81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c20000000000081525061015b610156846101f7565b610526565b60405160200161016c929190612418565b6040516020818303038152906040529050919050565b6000546001600160a01b031633146101ac576040516282b42960e81b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b60606000806000806000806000806000808b80602001905181019061021c91906124a4565b99509950995099509950995099509950995099506000604051806040016040528060148152602001735765623320536176696e6773204e6574776f726b60601b81525090506104af6040518060400160405280600381526020016273766760e81b8152506102dc60405180604001604052806005815260200164786d6c6e7360d81b8152506040518060400160405280601a81526020017f687474703a2f2f7777772e77332e6f72672f323030302f73766700000000000081525061053a565b6103336040518060400160405280600b81526020016a666f6e742d66616d696c7960a81b815250604051806040016040528060128152602001712937b137ba37961039b0b73996b9b2b934b360711b81525061053a565b610376604051806040016040528060068152602001651a195a59da1d60d21b8152506040518060400160405280600381526020016203330360ec1b81525061053a565b6103b8604051806040016040528060058152602001640eed2c8e8d60db1b8152506040518060400160405280600381526020016203530360ec1b81525061053a565b610404604051806040016040528060078152602001660ecd2caeec4def60cb1b8152506040518060400160405280600b81526020016a030203020353030203330360ac1b81525061053a565b610457604051806040016040528060058152602001647374796c6560d81b81525060405180604001604052806014815260200173626f726465722d7261646975733a20313070783b60601b81525061053a565b61048560405180604001604052806004815260200163199a5b1b60e21b8152506104808c610566565b61053a565b60405160200161049b9796959493929190612565565b60405160208183030381529060405261057b565b6104b883610590565b6104c18a61076d565b6104cd8e8a8887610780565b6104f16040518060400160405280600381526020016273766760e81b8152506107c9565b6040516020016105059594939291906125f7565b6040516020818303038152906040529b505050505050505050505050919050565b6060610534826000806107dc565b92915050565b6060828260405160200161054f9291906126d7565b604051602081830303815290604052905092915050565b6060610534610574836108db565b6000610934565b6060828260405160200161054f92919061272c565b606061067c6105d1604051806040016040528060018152602001600f60fb1b815250604051806040016040528060018152602001600360fc1b81525061053a565b610613604051806040016040528060058152602001640eed2c8e8d60db1b8152506040518060400160405280600381526020016203530360ec1b81525061053a565b610656604051806040016040528060068152602001651a195a59da1d60d21b8152506040518060400160405280600381526020016203530360ec1b81525061053a565b60405160200161066893929190612783565b604051602081830303815290604052610999565b61015b60405180602001604052806000815250604051602001610759907f3c656c6c69707365206f7061636974793d22302e31222063783d22393322206381527f793d22333030222072783d22323330222072793d22313435222066696c6c3d22602082015267313630b1b591179f60c11b60408201527f3c656c6c69707365206f7061636974793d22302e3038222063783d223535302260488201527f2063793d222d313139222072783d22343530222072793d22323437222066696c60688201526a361e91313630b1b591179f60a91b608882015260930190565b6040516020818303038152906040526109c1565b6060610778826109ee565b61015b610ddc565b606061078d858484610ebb565b6107956114a8565b61079e86611890565b6040516020016107b093929190612783565b6040516020818303038152906040529050949350505050565b60608160405160200161016c91906127c6565b6060835180156108d3576003600282010460021b60405192507f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f526102308515027f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f03603f52602083018181015b6003880197508751603f8160121c16518353603f81600c1c16516001840153603f8160061c16516002840153603f81165160038401535060048201915080821061084c57600384068680156108ac576001821482151501850387526108c4565b603d821515850353603d6001831460011b8503538487525b5050601f01601f191660405250505b509392505050565b606081516003146109235760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064015b60405180910390fd5b8160405160200161016c91906127fb565b606061094b6109438484611bd7565b60ff16611c3a565b6109626109438561095d866001612836565b611bd7565b6109746109438661095d876002612836565b6109866109438761095d886003612836565b60405160200161054f949392919061284e565b6060610534604051806040016040528060048152602001631c9958dd60e21b81525083611ccd565b60606109e7604051806040016040528060018152602001606760f81b8152508484611ce2565b9392505050565b6060610bf7610a32604051806040016040528060018152602001600f60fb1b81525060405180604001604052806004815260200163372e352560e01b81525061053a565b610a71604051806040016040528060018152602001607960f81b8152506040518060400160405280600481526020016336322e3560e01b81525061053a565b610ab660405180604001604052806009815260200168666f6e742d73697a6560b81b81525060405180604001604052806002815260200161062760f31b81525061053a565b610b0860405180604001604052806012815260200171616c69676e6d656e742d626173656c696e6560701b815250604051806040016040528060068152602001656d6964646c6560d01b81525061053a565b610b526040518060400160405280600b81526020016a3a32bc3a16b0b731b437b960a91b815250604051806040016040528060058152602001641cdd185c9d60da1b81525061053a565b610b9560405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b81525061053a565b604051602001610baa969594939291906128e6565b60408051601f198184030181529082905263784fc7c360e11b60208301526c20546f74616c204368616e636560981b6024830152906031015b604051602081830303815290604052611cfb565b61015b610c39604051806040016040528060018152602001600f60fb1b81525060405180604001604052806004815260200163372e352560e01b81525061053a565b610c77604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016203130360ec1b81525061053a565b610cbc60405180604001604052806009815260200168666f6e742d73697a6560b81b81525060405180604001604052806002815260200161199960f11b81525061053a565b610d0e60405180604001604052806012815260200171616c69676e6d656e742d626173656c696e6560701b815250604051806040016040528060068152602001656d6964646c6560d01b81525061053a565b610d586040518060400160405280600b81526020016a3a32bc3a16b0b731b437b960a91b815250604051806040016040528060058152602001641cdd185c9d60da1b81525061053a565b610d9b60405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b81525061053a565b604051602001610db0969594939291906128e6565b604051602081830303815290604052610dcc8560066002611d24565b604051602001610be39190612965565b6060610e97610e35604051806040016040528060098152602001687472616e73666f726d60b81b815250604051806040016040528060118152602001707472616e736c617465283335302c33302960781b81525061053a565b604051602001610e45919061298e565b60408051808303601f19018152828252681313d1d3d7d413d3d360ba1b602084015291610e92916a574542335f41535345545360a81b91015b604051602081830303815290604052611daa565b6109c1565b604051602001610ea7919061298e565b604051602081830303815290604052905090565b606061108d610eff604051806040016040528060018152602001600f60fb1b81525060405180604001604052806004815260200163372e352560e01b81525061053a565b610f3f604051806040016040528060018152602001607960f81b8152506040518060400160405280600581526020016436372e352560d81b81525061053a565b610f8460405180604001604052806009815260200168666f6e742d73697a6560b81b815250604051806040016040528060028152602001610c8d60f21b81525061053a565b610fd660405180604001604052806012815260200171616c69676e6d656e742d626173656c696e6560701b815250604051806040016040528060068152602001656d6964646c6560d01b81525061053a565b6110206040518060400160405280600b81526020016a3a32bc3a16b0b731b437b960a91b815250604051806040016040528060058152602001641cdd185c9d60da1b81525061053a565b61106360405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b81525061053a565b604051602001611078969594939291906128e6565b60405160208183030381529060405284611cfb565b6112656110cf604051806040016040528060018152602001600f60fb1b81525060405180604001604052806004815260200163372e352560e01b81525061053a565b61110f604051806040016040528060018152602001607960f81b8152506040518060400160405280600581526020016437372e352560d81b81525061053a565b61115460405180604001604052806009815260200168666f6e742d73697a6560b81b81525060405180604001604052806002815260200161064760f31b81525061053a565b6111a660405180604001604052806012815260200171616c69676e6d656e742d626173656c696e6560701b815250604051806040016040528060068152602001656d6964646c6560d01b81525061053a565b6111f06040518060400160405280600b81526020016a3a32bc3a16b0b731b437b960a91b815250604051806040016040528060058152602001641cdd185c9d60da1b81525061053a565b61123360405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b81525061053a565b604051602001611248969594939291906128e6565b60405160208183030381529060405261126087611e22565b611cfb565b61147e6112a7604051806040016040528060018152602001600f60fb1b81525060405180604001604052806004815260200163372e352560e01b81525061053a565b6112e7604051806040016040528060018152602001607960f81b8152506040518060400160405280600581526020016438372e352560d81b81525061053a565b61132c60405180604001604052806009815260200168666f6e742d73697a6560b81b815250604051806040016040528060028152602001610c4d60f21b81525061053a565b6113746040518060400160405280600b81526020016a199bdb9d0b5dd95a59da1d60aa1b8152506040518060400160405280600381526020016203330360ec1b81525061053a565b6113c660405180604001604052806012815260200171616c69676e6d656e742d626173656c696e6560701b815250604051806040016040528060068152602001656d6964646c6560d01b81525061053a565b6114106040518060400160405280600b81526020016a3a32bc3a16b0b731b437b960a91b815250604051806040016040528060058152602001641cdd185c9d60da1b81525061053a565b61145360405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b81525061053a565b6040516020016114699796959493929190612565565b60405160208183030381529060405285611cfb565b60405160200161149093929190612783565b60405160208183030381529060405290509392505050565b606060006060466001036114f6575050604080518082019091526008815267457468657265756d60c01b60208201527449434f4e5f4e4554574f524b5f455448455245554d60581b90611604565b46600a0361153e5750506040805180820190915260088152674f7074696d69736d60c01b60208201527449434f4e5f4e4554574f524b5f4f5054494d49534d60581b90611604565b466089036115845750506040805180820190915260078152662837b63cb3b7b760c91b60208201527324a1a7a72fa722aa2ba7a925afa827a62ca3a7a760611b90611604565b4661a4b1036115cd575050604080518082019091526008815267417262697472756d60c01b60208201527449434f4e5f4e4554574f524b5f415242495452554d60581b90611604565b50506040805180820190915260078152662ab735b737bbb760c91b6020820152701250d3d397d3915515d3d492d7d51154d5607a1b905b6117cf611645604051806040016040528060018152602001600f60fb1b8152506040518060400160405280600381526020016238352560e81b81525061053a565b611683604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016238302560e81b81525061053a565b6116c860405180604001604052806009815260200168666f6e742d73697a6560b81b81525060405180604001604052806002815260200161062760f31b81525061053a565b61171a60405180604001604052806012815260200171616c69676e6d656e742d626173656c696e6560701b815250604051806040016040528060068152602001656d6964646c6560d01b81525061053a565b6117626040518060400160405280600b81526020016a3a32bc3a16b0b731b437b960a91b81525060405180604001604052806003815260200162195b9960ea1b81525061053a565b6117a560405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b81525061053a565b6040516020016117ba969594939291906128e6565b60405160208183030381529060405282611cfb565b611869611827604051806040016040528060098152602001687472616e73666f726d60b81b815250604051806040016040528060128152602001717472616e736c617465283434302c3232352960701b81525061053a565b604051602001611837919061298e565b60408051601f198184030181528282526020830187905291610e92916a574542335f41535345545360a81b9101610e7e565b60405160200161187a929190612418565b6040516020818303038152906040529250505090565b6060611a796118d3604051806040016040528060018152602001600f60fb1b8152506040518060400160405280600381526020016239352560e81b81525061053a565b611911604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016235302560e81b81525061053a565b61195660405180604001604052806009815260200168666f6e742d73697a6560b81b815250604051806040016040528060028152602001610c4d60f21b81525061053a565b6119a860405180604001604052806012815260200171616c69676e6d656e742d626173656c696e6560701b815250604051806040016040528060068152602001656d6964646c6560d01b81525061053a565b6119f06040518060400160405280600b81526020016a3a32bc3a16b0b731b437b960a91b81525060405180604001604052806003815260200162195b9960ea1b81525061053a565b611a3360405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b81525061053a565b604051602001611a48969594939291906128e6565b60408051601f19818403018152828201909152600b82526a1b18102230bc9020bb339760a91b602083015290611cfb565b61015b611aba604051806040016040528060018152602001600f60fb1b8152506040518060400160405280600381526020016239352560e81b81525061053a565b611af8604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016236302560e81b81525061053a565b611b3d60405180604001604052806009815260200168666f6e742d73697a6560b81b815250604051806040016040528060028152602001610c8d60f21b81525061053a565b611b8f60405180604001604052806012815260200171616c69676e6d656e742d626173656c696e6560701b815250604051806040016040528060068152602001656d6964646c6560d01b81525061053a565b610d586040518060400160405280600b81526020016a3a32bc3a16b0b731b437b960a91b81525060405180604001604052806003815260200162195b9960ea1b81525061053a565b600081835111611c185760405162461bcd60e51b815260206004820152600c60248201526b4f7574206f662072616e676560a01b604482015260640161091a565b828281518110611c2a57611c2a6129aa565b016020015160f81c905092915050565b60606000611c4783611f04565b600101905060008167ffffffffffffffff811115611c6757611c67612285565b6040519080825280601f01601f191660200182016040528015611c91576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611c9b57509392505050565b6060828260405160200161054f9291906129c0565b6060838383866040516020016114909493929190612a18565b60606109e7604051806040016040528060048152602001631d195e1d60e21b8152508484611ce2565b6060611d43611d3484600a612b95565b611d3e9086612ba4565b611c3a565b611d99611d5184600a612b95565b611d5c86600a612b95565b611d669088612ba4565b611d709190612bc6565b611d7a8587612be5565b611d8590600a612b95565b611d8f9088612ba4565b611d3e9190612c08565b604051602001611490929190612c1f565b600254604051633a68f5db60e01b81526060916001600160a01b031690633a68f5db90611ddd9086908690600401612c5b565b600060405180830381865afa158015611dfa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e79190810190612c74565b60606000611e3a836001600160a01b03166014611fdc565b90506000611e6a82604051602001611e52919061298e565b60405160208183030381529060405260006006612178565b90506000611e9a83604051602001611e82919061298e565b60405160208183030381529060405260256004612178565b905081604051602001611ead919061298e565b60405160208183030381529060405281604051602001611ecd919061298e565b60408051601f1981840301815290829052611eeb9291602001612ca9565b6040516020818303038152906040529350505050919050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611f435772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611f6f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611f8d57662386f26fc10000830492506010015b6305f5e1008310611fa5576305f5e100830492506008015b6127108310611fb957612710830492506004015b60648310611fcb576064830492506002015b600a83106105345760010192915050565b60606000611feb836002612bc6565b611ff6906002612836565b67ffffffffffffffff81111561200e5761200e612285565b6040519080825280601f01601f191660200182016040528015612038576020820181803683370190505b509050600360fc1b81600081518110612053576120536129aa565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612082576120826129aa565b60200101906001600160f81b031916908160001a90535060006120a6846002612bc6565b6120b1906001612836565b90505b6001811115612129576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106120e5576120e56129aa565b1a60f81b8282815181106120fb576120fb6129aa565b60200101906001600160f81b031916908160001a90535060049490941c9361212281612ce7565b90506120b4565b5083156109e75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161091a565b60608161218681601f612836565b10156121c55760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015260640161091a565b6121cf8284612836565b845110156122135760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015260640161091a565b606082158015612232576040519150600082526020820160405261227c565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561226b578051835260209283019201612253565b5050858452601f01601f1916604052505b50949350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156122c4576122c4612285565b604052919050565b600067ffffffffffffffff8211156122e6576122e6612285565b50601f01601f191660200190565b60006020828403121561230657600080fd5b813567ffffffffffffffff81111561231d57600080fd5b8201601f8101841361232e57600080fd5b803561234161233c826122cc565b61229b565b81815285602083850101111561235657600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b8381101561238f578181015183820152602001612377565b8381111561239e576000848401525b50505050565b600081518084526123bc816020860160208601612374565b601f01601f19169290920160200192915050565b6020815260006109e760208301846123a4565b6001600160a01b03811681146123f857600080fd5b50565b60006020828403121561240d57600080fd5b81356109e7816123e3565b6000835161242a818460208801612374565b83519083019061243e818360208801612374565b01949350505050565b8051612452816123e3565b919050565b600082601f83011261246857600080fd5b815161247661233c826122cc565b81815284602083860101111561248b57600080fd5b61249c826020830160208701612374565b949350505050565b6000806000806000806000806000806101408b8d0312156124c457600080fd5b6124cd8b612447565b99506124db60208c01612447565b985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015167ffffffffffffffff8082111561252357600080fd5b61252f8e838f01612457565b93506101208d015191508082111561254657600080fd5b506125538d828e01612457565b9150509295989b9194979a5092959850565b6000885160206125788285838e01612374565b89519184019161258b8184848e01612374565b895192019161259d8184848d01612374565b88519201916125af8184848c01612374565b87519201916125c18184848b01612374565b86519201916125d38184848a01612374565b85519201916125e58184848901612374565b919091019a9950505050505050505050565b60008651602061260a8285838c01612374565b87519184019161261d8184848c01612374565b875192019161262f8184848b01612374565b86519201916126418184848a01612374565b7f3c646566733e3c7374796c653e2e746578742d736861646f772d6d64207b746592019182527f78742d736861646f773a20307078203470782031307078207267626128302c20818301527f302c20302c20302e3132293b7d3c2f7374796c653e3c2f646566733e00000000604083015284516126c481605c8501888501612374565b91909101605c0198975050505050505050565b600083516126e9818460208801612374565b603d60f81b908301908152601160f91b60018201528351612711816002840160208801612374565b61011160f51b60029290910191820152600401949350505050565b600f60fa1b815260008351612748816001850160208801612374565b600160fd1b6001918401918201528351612769816002840160208801612374565b601f60f91b60029290910191820152600301949350505050565b60008451612795818460208901612374565b8451908301906127a9818360208901612374565b84519101906127bc818360208801612374565b0195945050505050565b613c2f60f01b8152600082516127e3816002850160208701612374565b601f60f91b6002939091019283015250600301919050565b6000825161280d818460208701612374565b601960fa1b920191825250600101919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561284957612849612820565b500190565b640e4cec4c2560db1b81526000855161286e816005850160208a01612374565b8083019050600b60fa1b8060058301528651612891816006850160208b01612374565b6006920191820181905285516128ae816007850160208a01612374565b600792019182015283516128c9816008840160208801612374565b61252960f01b60089290910191820152600a019695505050505050565b6000875160206128f98285838d01612374565b88519184019161290c8184848d01612374565b885192019161291e8184848c01612374565b87519201916129308184848b01612374565b86519201916129428184848a01612374565b85519201916129548184848901612374565b919091019998505050505050505050565b600960fa1b815260008251612981816001850160208701612374565b9190910160010192915050565b600082516129a0818460208701612374565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b600f60fa1b8152600083516129dc816001850160208801612374565b600160fd1b60019184019182015283516129fd816002840160208801612374565b61179f60f11b60029290910191820152600401949350505050565b600f60fa1b815260008551612a34816001850160208a01612374565b600160fd1b6001918401918201528551612a55816002840160208a01612374565b808201915050601f60f91b8060028301528551612a79816003850160208a01612374565b613c2f60f01b600393909101928301528451612a9c816005850160208901612374565b60059201918201526006019695505050505050565b600181815b80851115612aec578160001904821115612ad257612ad2612820565b80851615612adf57918102915b93841c9390800290612ab6565b509250929050565b600082612b0357506001610534565b81612b1057506000610534565b8160018114612b265760028114612b3057612b4c565b6001915050610534565b60ff841115612b4157612b41612820565b50506001821b610534565b5060208310610133831016604e8410600b8410161715612b6f575081810a610534565b612b798383612ab1565b8060001904821115612b8d57612b8d612820565b029392505050565b60006109e760ff841683612af4565b600082612bc157634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612be057612be0612820565b500290565b600060ff821660ff841680821015612bff57612bff612820565b90039392505050565b600082821015612c1a57612c1a612820565b500390565b60008351612c31818460208801612374565b601760f91b9083019081528351612c4f816001840160208801612374565b01600101949350505050565b82815260406020820152600061249c60408301846123a4565b600060208284031215612c8657600080fd5b815167ffffffffffffffff811115612c9d57600080fd5b61249c84828501612457565b60008351612cbb818460208801612374565b6217171760e91b9083019081528351612cdb816003840160208801612374565b01600301949350505050565b600081612cf657612cf6612820565b50600019019056fea264697066735822122018103ac69ad8c9172aeccdb8923396a46e6f3fdab9855e39d6f0eaa5023b0d5a64736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Unauthorized()": [
        {
          "notice": "----------------------------------------------------------------------- Custom Errors -----------------------------------------------------------------------"
        }
      ]
    },
    "events": {
      "OwnershipTransferred(address,address)": {
        "notice": "----------------------------------------------------------------------- Events -----------------------------------------------------------------------"
      }
    },
    "kind": "user",
    "methods": {
      "owner()": {
        "notice": "----------------------------------------------------------------------- Ownership Storage -----------------------------------------------------------------------"
      },
      "transferOwnership(address)": {
        "notice": "----------------------------------------------------------------------- Ownership Logic -----------------------------------------------------------------------"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12571,
        "contract": "contracts/PoolTogether/PoolTogetherV0Render.sol:PoolTogetherV0Render",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8840,
        "contract": "contracts/PoolTogether/PoolTogetherV0Render.sol:PoolTogetherV0Render",
        "label": "svgLibrary",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8842,
        "contract": "contracts/PoolTogether/PoolTogetherV0Render.sol:PoolTogetherV0Render",
        "label": "svgRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}