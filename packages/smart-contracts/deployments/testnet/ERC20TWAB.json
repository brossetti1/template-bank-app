{
  "address": "0xBF3C31027452F6f7ed0Ff6dAEA1F371C9F646aFc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "amount",
              "type": "uint224"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct ObservationLib.Observation",
          "name": "newTotalSupplyTwab",
          "type": "tuple"
        }
      ],
      "name": "NewTotalSupplyTwab",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "amount",
              "type": "uint224"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct ObservationLib.Observation",
          "name": "newTwab",
          "type": "tuple"
        }
      ],
      "name": "NewUserTwab",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "delegateOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAccountDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint208",
              "name": "balance",
              "type": "uint208"
            },
            {
              "internalType": "uint24",
              "name": "nextTwabIndex",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "cardinality",
              "type": "uint24"
            }
          ],
          "internalType": "struct TwabLib.AccountDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_endTime",
          "type": "uint64"
        }
      ],
      "name": "getAverageBalanceBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint64[]",
          "name": "_startTimes",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_endTimes",
          "type": "uint64[]"
        }
      ],
      "name": "getAverageBalancesBetween",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_startTimes",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_endTimes",
          "type": "uint64[]"
        }
      ],
      "name": "getAverageTotalSuppliesBetween",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_target",
          "type": "uint64"
        }
      ],
      "name": "getBalanceAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint64[]",
          "name": "_targets",
          "type": "uint64[]"
        }
      ],
      "name": "getBalancesAt",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_targets",
          "type": "uint64[]"
        }
      ],
      "name": "getTotalSuppliesAt",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_target",
          "type": "uint64"
        }
      ],
      "name": "getTotalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_index",
          "type": "uint16"
        }
      ],
      "name": "getTwab",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "amount",
              "type": "uint224"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            }
          ],
          "internalType": "struct ObservationLib.Observation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe40a067f3efcd9951cae587df08d76591a3a9a4fc939fb9e5b427e09e8deb075",
  "receipt": {
    "to": null,
    "from": "0x8C46e53dC60EC32e8DD67Fb11f076fF3EcDc5211",
    "contractAddress": "0xBF3C31027452F6f7ed0Ff6dAEA1F371C9F646aFc",
    "transactionIndex": 17,
    "gasUsed": "2048322",
    "logsBloom": "0x
    "blockHash": "0xbfdf4c280a2c70e1e9a6c0390203f24afe95f989a9497c7567be95a984d502f5",
    "transactionHash": "0xe40a067f3efcd9951cae587df08d76591a3a9a4fc939fb9e5b427e09e8deb075",
    "logs": [],
    "blockNumber": 3472113,
    "cumulativeGasUsed": "2681567",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "TOKEN",
    "TKN"
  ],
  "numDeployments": 1,
  "solcInputHash": "404f5463dd6ebc8ff1a6e382af5684f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct ObservationLib.Observation\",\"name\":\"newTotalSupplyTwab\",\"type\":\"tuple\"}],\"name\":\"NewTotalSupplyTwab\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct ObservationLib.Observation\",\"name\":\"newTwab\",\"type\":\"tuple\"}],\"name\":\"NewUserTwab\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"delegateOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAccountDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint208\",\"name\":\"balance\",\"type\":\"uint208\"},{\"internalType\":\"uint24\",\"name\":\"nextTwabIndex\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"cardinality\",\"type\":\"uint24\"}],\"internalType\":\"struct TwabLib.AccountDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_endTime\",\"type\":\"uint64\"}],\"name\":\"getAverageBalanceBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"_startTimes\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_endTimes\",\"type\":\"uint64[]\"}],\"name\":\"getAverageBalancesBetween\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_startTimes\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_endTimes\",\"type\":\"uint64[]\"}],\"name\":\"getAverageTotalSuppliesBetween\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_target\",\"type\":\"uint64\"}],\"name\":\"getBalanceAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"_targets\",\"type\":\"uint64[]\"}],\"name\":\"getBalancesAt\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_targets\",\"type\":\"uint64[]\"}],\"name\":\"getTotalSuppliesAt\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_target\",\"type\":\"uint64\"}],\"name\":\"getTotalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"getTwab\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct ObservationLib.Observation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kames Geraghty\",\"events\":{\"Delegated(address,address)\":{\"params\":{\"delegate\":\"Address of the delegate.\",\"delegator\":\"Address of the delegator.\"}},\"NewTotalSupplyTwab((uint224,uint32))\":{\"params\":{\"newTotalSupplyTwab\":\"Updated TWAB of tickets total supply after a successful total supply TWAB recording.\"}},\"NewUserTwab(address,(uint224,uint32))\":{\"params\":{\"delegate\":\"The recipient of the ticket power (may be the same as the user).\",\"newTwab\":\"Updated TWAB of a ticket holder after a successful TWAB recording.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC20TWAB\",\"version\":1},\"userdoc\":{\"events\":{\"Delegated(address,address)\":{\"notice\":\"Emitted when TWAB balance has been delegated to another user.\"},\"NewTotalSupplyTwab((uint224,uint32))\":{\"notice\":\"Emitted when a new total supply TWAB has been recorded.\"},\"NewUserTwab(address,(uint224,uint32))\":{\"notice\":\"Emitted when a new TWAB has been recorded.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"----------------------------------------------------------------------- Events -----------------------------------------------------------------------\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"----------------------------------------------------------------------- ERC20 Logic -----------------------------------------------------------------------\"},\"name()\":{\"notice\":\"----------------------------------------------------------------------- Metadata Storage -----------------------------------------------------------------------\"},\"totalSupply()\":{\"notice\":\"----------------------------------------------------------------------- ERC20 Storage -----------------------------------------------------------------------\"}},\"notice\":\"ERC20TWAB is an experiment. Implementing time-weighted average balances on more ERC20 tokens. Credit: PoolTogether Inc (Brendan Asselstine)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolTogether/ERC20TWAB.sol\":\"ERC20TWAB\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PoolTogether/ERC20TWAB.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { ERC20 } from \\\"../Solbase/ERC20.sol\\\";\\nimport { ERC20Permit } from \\\"../Solbase/ERC20Permit.sol\\\";\\nimport { ObservationLib } from \\\"./twab/ObservationLib.sol\\\";\\nimport { TwabLib } from \\\"./twab/TwabLib.sol\\\";\\nimport { ExtendedSafeCastLib } from \\\"./twab/ExtendedSafeCastLib.sol\\\";\\n\\n/**\\n * @title ERC20TWAB\\n * @author Kames Geraghty\\n * @notice ERC20TWAB is an experiment. Implementing time-weighted average balances on more ERC20 tokens.\\n           Credit: PoolTogether Inc (Brendan Asselstine)\\n */\\ncontract ERC20TWAB is ERC20 {\\n  // using SafeERC20 for IERC20;\\n  using ExtendedSafeCastLib for uint256;\\n\\n  uint256 private distribution = 10000e18;\\n\\n  bytes32 private immutable _DELEGATE_TYPEHASH =\\n    keccak256(\\\"Delegate(address user,address delegate,uint256 nonce,uint256 deadline)\\\");\\n\\n  /// @notice Record of token holders TWABs for each account.\\n  mapping(address => TwabLib.Account) internal userTwabs;\\n\\n  /// @notice Record of tickets total supply and ring buff parameters used for observation.\\n  TwabLib.Account internal totalSupplyTwab;\\n\\n  /// @notice Mapping of delegates.  Each address can delegate their ticket power to another.\\n  mapping(address => address) internal delegates;\\n\\n  /**\\n   * @notice Emitted when TWAB balance has been delegated to another user.\\n   * @param delegator Address of the delegator.\\n   * @param delegate Address of the delegate.\\n   */\\n  event Delegated(address indexed delegator, address indexed delegate);\\n\\n  /**\\n   * @notice Emitted when a new TWAB has been recorded.\\n   * @param delegate The recipient of the ticket power (may be the same as the user).\\n   * @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\\n   */\\n  event NewUserTwab(address indexed delegate, ObservationLib.Observation newTwab);\\n\\n  /**\\n   * @notice Emitted when a new total supply TWAB has been recorded.\\n   * @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\\n   */\\n  event NewTotalSupplyTwab(ObservationLib.Observation newTotalSupplyTwab);\\n\\n  constructor(string memory name, string memory symbol)\\n    ERC20(name, symbol, 18)\\n  {}\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function getAccountDetails(address _user) external view returns (TwabLib.AccountDetails memory) {\\n    return userTwabs[_user].details;\\n  }\\n\\n  function getTwab(address _user, uint16 _index)\\n    external\\n    view\\n    returns (ObservationLib.Observation memory)\\n  {\\n    return userTwabs[_user].twabs[_index];\\n  }\\n\\n  function getBalanceAt(address _user, uint64 _target) external view returns (uint256) {\\n    TwabLib.Account storage account = userTwabs[_user];\\n\\n    return\\n      TwabLib.getBalanceAt(\\n        account.twabs,\\n        account.details,\\n        uint32(_target),\\n        uint32(block.timestamp)\\n      );\\n  }\\n\\n  function getAverageBalancesBetween(\\n    address _user,\\n    uint64[] calldata _startTimes,\\n    uint64[] calldata _endTimes\\n  ) external view returns (uint256[] memory) {\\n    return _getAverageBalancesBetween(userTwabs[_user], _startTimes, _endTimes);\\n  }\\n\\n  function getAverageTotalSuppliesBetween(\\n    uint64[] calldata _startTimes,\\n    uint64[] calldata _endTimes\\n  ) external view returns (uint256[] memory) {\\n    return _getAverageBalancesBetween(totalSupplyTwab, _startTimes, _endTimes);\\n  }\\n\\n  function getAverageBalanceBetween(\\n    address _user,\\n    uint64 _startTime,\\n    uint64 _endTime\\n  ) external view returns (uint256) {\\n    TwabLib.Account storage account = userTwabs[_user];\\n\\n    return\\n      TwabLib.getAverageBalanceBetween(\\n        account.twabs,\\n        account.details,\\n        uint32(_startTime),\\n        uint32(_endTime),\\n        uint32(block.timestamp)\\n      );\\n  }\\n\\n  function getBalancesAt(address _user, uint64[] calldata _targets)\\n    external\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256 length = _targets.length;\\n    uint256[] memory _balances = new uint256[](length);\\n\\n    TwabLib.Account storage twabContext = userTwabs[_user];\\n    TwabLib.AccountDetails memory details = twabContext.details;\\n\\n    for (uint256 i = 0; i < length; i++) {\\n      _balances[i] = TwabLib.getBalanceAt(\\n        twabContext.twabs,\\n        details,\\n        uint32(_targets[i]),\\n        uint32(block.timestamp)\\n      );\\n    }\\n\\n    return _balances;\\n  }\\n\\n  function getTotalSupplyAt(uint64 _target) external view returns (uint256) {\\n    return\\n      TwabLib.getBalanceAt(\\n        totalSupplyTwab.twabs,\\n        totalSupplyTwab.details,\\n        uint32(_target),\\n        uint32(block.timestamp)\\n      );\\n  }\\n\\n  function getTotalSuppliesAt(uint64[] calldata _targets) external view returns (uint256[] memory) {\\n    uint256 length = _targets.length;\\n    uint256[] memory totalSupplies = new uint256[](length);\\n\\n    TwabLib.AccountDetails memory details = totalSupplyTwab.details;\\n\\n    for (uint256 i = 0; i < length; i++) {\\n      totalSupplies[i] = TwabLib.getBalanceAt(\\n        totalSupplyTwab.twabs,\\n        details,\\n        uint32(_targets[i]),\\n        uint32(block.timestamp)\\n      );\\n    }\\n\\n    return totalSupplies;\\n  }\\n\\n  function delegateOf(address _user) external view returns (address) {\\n    return delegates[_user];\\n  }\\n\\n\\n  function delegate(address _to) external virtual {\\n    _delegate(msg.sender, _to);\\n  }\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  /// @notice Delegates a users chance to another\\n  /// @param _user The user whose balance should be delegated\\n  /// @param _to The delegate\\n  function _delegate(address _user, address _to) internal {\\n    uint256 balance = 0;\\n    address currentDelegate = delegates[_user];\\n\\n    if (currentDelegate == _to) {\\n      return;\\n    }\\n\\n    delegates[_user] = _to;\\n\\n    _transferTwab(currentDelegate, _to, balance);\\n\\n    emit Delegated(_user, _to);\\n  }\\n\\n  /**\\n   * @notice Retrieves the average balances held by a user for a given time frame.\\n   * @param _account The user whose balance is checked.\\n   * @param _startTimes The start time of the time frame.\\n   * @param _endTimes The end time of the time frame.\\n   * @return The average balance that the user held during the time frame.\\n   */\\n  function _getAverageBalancesBetween(\\n    TwabLib.Account storage _account,\\n    uint64[] calldata _startTimes,\\n    uint64[] calldata _endTimes\\n  ) internal view returns (uint256[] memory) {\\n    uint256 startTimesLength = _startTimes.length;\\n    require(startTimesLength == _endTimes.length, \\\"Ticket/start-end-times-length-match\\\");\\n\\n    TwabLib.AccountDetails memory accountDetails = _account.details;\\n\\n    uint256[] memory averageBalances = new uint256[](startTimesLength);\\n    uint32 currentTimestamp = uint32(block.timestamp);\\n\\n    for (uint256 i = 0; i < startTimesLength; i++) {\\n      averageBalances[i] = TwabLib.getAverageBalanceBetween(\\n        _account.twabs,\\n        accountDetails,\\n        uint32(_startTimes[i]),\\n        uint32(_endTimes[i]),\\n        currentTimestamp\\n      );\\n    }\\n\\n    return averageBalances;\\n  }\\n\\n  /// @notice Transfers the given TWAB balance from one user to another\\n  /// @param _from The user to transfer the balance from.  May be zero in the event of a mint.\\n  /// @param _to The user to transfer the balance to.  May be zero in the event of a burn.\\n  /// @param _amount The balance that is being transferred.\\n  function _transferTwab(\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) internal {\\n    // If we are transferring tokens from a delegated account to an undelegated account\\n    if (_from != address(0)) {\\n      _decreaseUserTwab(_from, _amount);\\n\\n      if (_to == address(0)) {\\n        _decreaseTotalSupplyTwab(_amount);\\n      }\\n    }\\n\\n    // If we are transferring tokens from an undelegated account to a delegated account\\n    if (_to != address(0)) {\\n      _increaseUserTwab(_to, _amount);\\n\\n      if (_from == address(0)) {\\n        _increaseTotalSupplyTwab(_amount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Increase `_to` TWAB balance.\\n   * @param _to Address of the delegate.\\n   * @param _amount Amount of tokens to be added to `_to` TWAB balance.\\n   */\\n  function _increaseUserTwab(address _to, uint256 _amount) internal {\\n    if (_amount == 0) {\\n      return;\\n    }\\n\\n    TwabLib.Account storage _account = userTwabs[_to];\\n\\n    (\\n      TwabLib.AccountDetails memory accountDetails,\\n      ObservationLib.Observation memory twab,\\n      bool isNew\\n    ) = TwabLib.increaseBalance(_account, _amount.toUint208(), uint32(block.timestamp));\\n\\n    _account.details = accountDetails;\\n\\n    if (isNew) {\\n      emit NewUserTwab(_to, twab);\\n    }\\n  }\\n\\n  /**\\n   * @notice Decrease `_to` TWAB balance.\\n   * @param _to Address of the delegate.\\n   * @param _amount Amount of tokens to be added to `_to` TWAB balance.\\n   */\\n  function _decreaseUserTwab(address _to, uint256 _amount) internal {\\n    if (_amount == 0) {\\n      return;\\n    }\\n\\n    TwabLib.Account storage _account = userTwabs[_to];\\n\\n    (\\n      TwabLib.AccountDetails memory accountDetails,\\n      ObservationLib.Observation memory twab,\\n      bool isNew\\n    ) = TwabLib.decreaseBalance(\\n        _account,\\n        _amount.toUint208(),\\n        \\\"Ticket/twab-burn-lt-balance\\\",\\n        uint32(block.timestamp)\\n      );\\n\\n    _account.details = accountDetails;\\n\\n    if (isNew) {\\n      emit NewUserTwab(_to, twab);\\n    }\\n  }\\n\\n  /// @notice Decreases the total supply twab.  Should be called anytime a balance moves from delegated to undelegated\\n  /// @param _amount The amount to decrease the total by\\n  function _decreaseTotalSupplyTwab(uint256 _amount) internal {\\n    if (_amount == 0) {\\n      return;\\n    }\\n\\n    (\\n      TwabLib.AccountDetails memory accountDetails,\\n      ObservationLib.Observation memory tsTwab,\\n      bool tsIsNew\\n    ) = TwabLib.decreaseBalance(\\n        totalSupplyTwab,\\n        _amount.toUint208(),\\n        \\\"Ticket/burn-amount-exceeds-total-supply-twab\\\",\\n        uint32(block.timestamp)\\n      );\\n\\n    totalSupplyTwab.details = accountDetails;\\n\\n    if (tsIsNew) {\\n      emit NewTotalSupplyTwab(tsTwab);\\n    }\\n  }\\n\\n  /// @notice Increases the total supply twab.  Should be called anytime a balance moves from undelegated to delegated\\n  /// @param _amount The amount to increase the total by\\n  function _increaseTotalSupplyTwab(uint256 _amount) internal {\\n    if (_amount == 0) {\\n      return;\\n    }\\n\\n    (\\n      TwabLib.AccountDetails memory accountDetails,\\n      ObservationLib.Observation memory _totalSupply,\\n      bool tsIsNew\\n    ) = TwabLib.increaseBalance(totalSupplyTwab, _amount.toUint208(), uint32(block.timestamp));\\n\\n    totalSupplyTwab.details = accountDetails;\\n\\n    if (tsIsNew) {\\n      emit NewTotalSupplyTwab(_totalSupply);\\n    }\\n  }\\n\\n  // @inheritdoc ERC20\\n  function _beforeTokenTransfer(\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) internal  {\\n    if (_from == _to) {\\n      return;\\n    }\\n\\n    address _fromDelegate;\\n    if (_from != address(0)) {\\n      _fromDelegate = delegates[_from];\\n    }\\n\\n    address _toDelegate;\\n    if (_to != address(0)) {\\n      _toDelegate = delegates[_to];\\n    }\\n\\n    _transferTwab(_fromDelegate, _toDelegate, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0x46e25c8cfc046017ff6060a0579f6bdbe9c67260a499e382526cef2ac1349e5f\",\"license\":\"MIT\"},\"contracts/PoolTogether/twab/ExtendedSafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary ExtendedSafeCastLib {\\n  /**\\n   * @dev Returns the downcasted uint104 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint104).\\n   *\\n   * Counterpart to Solidity's `uint104` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 104 bits\\n   */\\n  function toUint104(uint256 _value) internal pure returns (uint104) {\\n    require(_value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    return uint104(_value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint208 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint208).\\n   *\\n   * Counterpart to Solidity's `uint208` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 208 bits\\n   */\\n  function toUint208(uint256 _value) internal pure returns (uint208) {\\n    require(_value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    return uint208(_value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint224 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint224).\\n   *\\n   * Counterpart to Solidity's `uint224` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 224 bits\\n   */\\n  function toUint224(uint256 _value) internal pure returns (uint224) {\\n    require(_value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    return uint224(_value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint192 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint192).\\n   *\\n   * Counterpart to Solidity's `uint192` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 224 bits\\n   */\\n  function toUint192(uint256 value) internal pure returns (uint192) {\\n    require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    return uint192(value);\\n  }\\n}\\n\",\"keccak256\":\"0x5b06b3c63b7d32055d3d04d3eaa7152a2d7439f6069b5d99cce3cdcfe43f62ef\",\"license\":\"GPL-3.0\"},\"contracts/PoolTogether/twab/ObservationLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport {SafeCastLib} from \\\"../../Solbase/SafeCastLib.sol\\\";\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\n\\n/**\\n * @title Observation Library\\n * @notice This library allows one to store an array of timestamped values and efficiently binary search them.\\n * @dev Largely pulled from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/c05a0e2c8c08c460fb4d05cfdda30b3ad8deeaac/contracts/libraries/Oracle.sol\\n * @author PoolTogether Inc.\\n */\\nlibrary ObservationLib {\\n  using OverflowSafeComparatorLib for uint32;\\n  using SafeCastLib for uint256;\\n\\n  /// @notice The maximum number of observations\\n  uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n  /**\\n   * @notice Observation, which includes an amount and timestamp.\\n   * @param amount `amount` at `timestamp`.\\n   * @param timestamp Recorded `timestamp`.\\n   */\\n  struct Observation {\\n    uint224 amount;\\n    uint32 timestamp;\\n  }\\n\\n  /**\\n   * @notice Fetches Observations `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\\n   * The result may be the same Observation, or adjacent Observations.\\n   * @dev The answer must be contained in the array used when the target is located within the stored Observation.\\n   * boundaries: older than the most recent Observation and younger, or the same age as, the oldest Observation.\\n   * @dev  If `_newestObservationIndex` is less than `_oldestObservationIndex`, it means that we've wrapped around the circular buffer.\\n   *       So the most recent observation will be at `_oldestObservationIndex + _cardinality - 1`, at the beginning of the circular buffer.\\n   * @param _observations List of Observations to search through.\\n   * @param _newestObservationIndex Index of the newest Observation. Right side of the circular buffer.\\n   * @param _oldestObservationIndex Index of the oldest Observation. Left side of the circular buffer.\\n   * @param _target Timestamp at which we are searching the Observation.\\n   * @param _cardinality Cardinality of the circular buffer we are searching through.\\n   * @param _time Timestamp at which we perform the binary search.\\n   * @return beforeOrAt Observation recorded before, or at, the target.\\n   * @return atOrAfter Observation recorded at, or after, the target.\\n   */\\n  function binarySearch(\\n    Observation[MAX_CARDINALITY] storage _observations,\\n    uint24 _newestObservationIndex,\\n    uint24 _oldestObservationIndex,\\n    uint32 _target,\\n    uint24 _cardinality,\\n    uint32 _time\\n  ) internal view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n    uint256 leftSide = _oldestObservationIndex;\\n    uint256 rightSide = _newestObservationIndex < leftSide\\n      ? leftSide + _cardinality - 1\\n      : _newestObservationIndex;\\n    uint256 currentIndex;\\n\\n    while (true) {\\n      // We start our search in the middle of the `leftSide` and `rightSide`.\\n      // After each iteration, we narrow down the search to the left or the right side while still starting our search in the middle.\\n      currentIndex = (leftSide + rightSide) / 2;\\n\\n      beforeOrAt = _observations[uint24(RingBufferLib.wrap(currentIndex, _cardinality))];\\n      uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\\n\\n      // We've landed on an uninitialized timestamp, keep searching higher (more recently).\\n      if (beforeOrAtTimestamp == 0) {\\n        leftSide = currentIndex + 1;\\n        continue;\\n      }\\n\\n      atOrAfter = _observations[uint24(RingBufferLib.nextIndex(currentIndex, _cardinality))];\\n\\n      bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\\n\\n      // Check if we've found the corresponding Observation.\\n      if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\\n        break;\\n      }\\n\\n      // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower. To the left of the current index.\\n      if (!targetAtOrAfter) {\\n        rightSide = currentIndex - 1;\\n      } else {\\n        // Otherwise, we keep searching higher. To the left of the current index.\\n        leftSide = currentIndex + 1;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb21c32c47d51a96ed46021df0f6ef9f994cb47ffcd25079bd369f3fa254a22fa\",\"license\":\"GPL-3.0\"},\"contracts/PoolTogether/twab/OverflowSafeComparatorLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\n/// @title OverflowSafeComparatorLib library to share comparator functions between contracts\\n/// @dev Code taken from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/3e88af408132fc957e3e406f65a0ce2b1ca06c3d/contracts/libraries/Oracle.sol\\n/// @author PoolTogether Inc.\\nlibrary OverflowSafeComparatorLib {\\n  /// @notice 32-bit timestamps comparator.\\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n  /// @param _b Timestamp to compare against `_a`.\\n  /// @param _timestamp A timestamp truncated to 32 bits.\\n  /// @return bool Whether `_a` is chronologically < `_b`.\\n  function lt(\\n    uint32 _a,\\n    uint32 _b,\\n    uint32 _timestamp\\n  ) internal pure returns (bool) {\\n    // No need to adjust if there hasn't been an overflow\\n    if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\\n\\n    uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n    uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n    return aAdjusted < bAdjusted;\\n  }\\n\\n  /// @notice 32-bit timestamps comparator.\\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n  /// @param _b Timestamp to compare against `_a`.\\n  /// @param _timestamp A timestamp truncated to 32 bits.\\n  /// @return bool Whether `_a` is chronologically <= `_b`.\\n  function lte(\\n    uint32 _a,\\n    uint32 _b,\\n    uint32 _timestamp\\n  ) internal pure returns (bool) {\\n    // No need to adjust if there hasn't been an overflow\\n    if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\\n\\n    uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n    uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n    return aAdjusted <= bAdjusted;\\n  }\\n\\n  /// @notice 32-bit timestamp subtractor\\n  /// @dev safe for 0 or 1 overflows, where `_a` and `_b` must be chronologically before or equal to time\\n  /// @param _a The subtraction left operand\\n  /// @param _b The subtraction right operand\\n  /// @param _timestamp The current time.  Expected to be chronologically after both.\\n  /// @return The difference between a and b, adjusted for overflow\\n  function checkedSub(\\n    uint32 _a,\\n    uint32 _b,\\n    uint32 _timestamp\\n  ) internal pure returns (uint32) {\\n    // No need to adjust if there hasn't been an overflow\\n\\n    if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\\n\\n    uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n    uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n    return uint32(aAdjusted - bAdjusted);\\n  }\\n}\\n\",\"keccak256\":\"0x1070e687847b2295fd2e989beadeefbdcf2afe0e61fe959150acddb7052c0a6c\",\"license\":\"GPL-3.0\"},\"contracts/PoolTogether/twab/RingBufferLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nlibrary RingBufferLib {\\n  /**\\n   * @notice Returns wrapped TWAB index.\\n   * @dev  In order to navigate the TWAB circular buffer, we need to use the modulo operator.\\n   * @dev  For example, if `_index` is equal to 32 and the TWAB circular buffer is of `_cardinality` 32,\\n   *       it will return 0 and will point to the first element of the array.\\n   * @param _index Index used to navigate through the TWAB circular buffer.\\n   * @param _cardinality TWAB buffer cardinality.\\n   * @return TWAB index.\\n   */\\n  function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\\n    return _index % _cardinality;\\n  }\\n\\n  /**\\n   * @notice Computes the negative offset from the given index, wrapped by the cardinality.\\n   * @dev  We add `_cardinality` to `_index` to be able to offset even if `_amount` is superior to `_cardinality`.\\n   * @param _index The index from which to offset\\n   * @param _amount The number of indices to offset.  This is subtracted from the given index.\\n   * @param _cardinality The number of elements in the ring buffer\\n   * @return Offsetted index.\\n   */\\n  function offset(\\n    uint256 _index,\\n    uint256 _amount,\\n    uint256 _cardinality\\n  ) internal pure returns (uint256) {\\n    return wrap(_index + _cardinality - _amount, _cardinality);\\n  }\\n\\n  /// @notice Returns the index of the last recorded TWAB\\n  /// @param _nextIndex The next available twab index.  This will be recorded to next.\\n  /// @param _cardinality The cardinality of the TWAB history.\\n  /// @return The index of the last recorded TWAB\\n  function newestIndex(uint256 _nextIndex, uint256 _cardinality) internal pure returns (uint256) {\\n    if (_cardinality == 0) {\\n      return 0;\\n    }\\n\\n    return wrap(_nextIndex + _cardinality - 1, _cardinality);\\n  }\\n\\n  /// @notice Computes the ring buffer index that follows the given one, wrapped by cardinality\\n  /// @param _index The index to increment\\n  /// @param _cardinality The number of elements in the Ring Buffer\\n  /// @return The next index relative to the given index.  Will wrap around to 0 if the next index == cardinality\\n  function nextIndex(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\\n    return wrap(_index + 1, _cardinality);\\n  }\\n}\\n\",\"keccak256\":\"0xfb81a85188bf9def399391777b3fa83dbc30e7cb2494560485ae45eb716ad830\",\"license\":\"GPL-3.0\"},\"contracts/PoolTogether/twab/TwabLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./ExtendedSafeCastLib.sol\\\";\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\nimport \\\"./ObservationLib.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 TwabLib (Library)\\n  * @author PoolTogether Inc Team\\n  * @dev    Time-Weighted Average Balance Library for ERC20 tokens.\\n  * @notice This TwabLib adds on-chain historical lookups to a user(s) time-weighted average balance.\\n            Each user is mapped to an Account struct containing the TWAB history (ring buffer) and\\n            ring buffer parameters. Every token.transfer() creates a new TWAB checkpoint. The new TWAB\\n            checkpoint is stored in the circular ring buffer, as either a new checkpoint or rewriting\\n            a previous checkpoint with new parameters. The TwabLib (using existing blocktimes of 1block/15sec)\\n            guarantees minimum 7.4 years of search history.\\n */\\nlibrary TwabLib {\\n  using OverflowSafeComparatorLib for uint32;\\n  using ExtendedSafeCastLib for uint256;\\n\\n  /**\\n      * @notice Sets max ring buffer length in the Account.twabs Observation list.\\n                As users transfer/mint/burn tickets new Observation checkpoints are\\n                recorded. The current max cardinality guarantees a seven year minimum,\\n                of accurate historical lookups with current estimates of 1 new block\\n                every 15 seconds - assuming each block contains a transfer to trigger an\\n                observation write to storage.e\\n      * @dev    The user Account.AccountDetails.cardinality parameter can NOT exceed\\n                the max cardinality variable. Preventing \\\"corrupted\\\" ring buffer lookup\\n                pointers and new observation checkpoints.\\n\\n                The MAX_CARDINALITY in fact guarantees at least 7.4 years of records:\\n                If 14 = block time in seconds\\n                (2**24) * 14 = 234881024 seconds of history\\n                234881024 / (365 * 24 * 60 * 60) ~= 7.44 years\\n    */\\n  uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n  /** @notice Struct ring buffer parameters for single user Account\\n      * @param balance       Current balance for an Account\\n      * @param nextTwabIndex Next uninitialized or updatable ring buffer checkpoint storage slot\\n      * @param cardinality   Current total \\\"initialized\\\" ring buffer checkpoints for single user AccountDetails.\\n                             Used to set initial boundary conditions for an efficient binary search.\\n    */\\n  struct AccountDetails {\\n    uint208 balance;\\n    uint24 nextTwabIndex;\\n    uint24 cardinality;\\n  }\\n\\n  /// @notice Combines account details with their twab history\\n  /// @param details The account details\\n  /// @param twabs The history of twabs for this account\\n  struct Account {\\n    AccountDetails details;\\n    ObservationLib.Observation[MAX_CARDINALITY] twabs;\\n  }\\n\\n  /// @notice Increases an account's balance and records a new twab.\\n  /// @param _account The account whose balance will be increased\\n  /// @param _amount The amount to increase the balance by\\n  /// @param _currentTime The current time\\n  /// @return accountDetails The new AccountDetails\\n  /// @return twab The user's latest TWAB\\n  /// @return isNew Whether the TWAB is new\\n  function increaseBalance(\\n    Account storage _account,\\n    uint208 _amount,\\n    uint32 _currentTime\\n  )\\n    internal\\n    returns (\\n      AccountDetails memory accountDetails,\\n      ObservationLib.Observation memory twab,\\n      bool isNew\\n    )\\n  {\\n    AccountDetails memory _accountDetails = _account.details;\\n    (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n    accountDetails.balance = _accountDetails.balance + _amount;\\n  }\\n\\n  /** @notice Calculates the next TWAB checkpoint for an account with a decreasing balance.\\n   * @dev    With Account struct and amount decreasing calculates the next TWAB observable checkpoint.\\n   * @param _account        Account whose balance will be decreased\\n   * @param _amount         Amount to decrease the balance by\\n   * @param _revertMessage  Revert message for insufficient balance\\n   * @return accountDetails Updated Account.details struct\\n   * @return twab           TWAB observation (with decreasing average)\\n   * @return isNew          Whether TWAB is new or calling twice in the same block\\n   */\\n  function decreaseBalance(\\n    Account storage _account,\\n    uint208 _amount,\\n    string memory _revertMessage,\\n    uint32 _currentTime\\n  )\\n    internal\\n    returns (\\n      AccountDetails memory accountDetails,\\n      ObservationLib.Observation memory twab,\\n      bool isNew\\n    )\\n  {\\n    AccountDetails memory _accountDetails = _account.details;\\n\\n    require(_accountDetails.balance >= _amount, _revertMessage);\\n\\n    (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n    unchecked {\\n      accountDetails.balance -= _amount;\\n    }\\n  }\\n\\n  /** @notice Calculates the average balance held by a user for a given time frame.\\n      * @dev    Finds the average balance between start and end timestamp epochs.\\n                Validates the supplied end time is within the range of elapsed time i.e. less then timestamp of now.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _startTime      Start of timestamp range as an epoch\\n      * @param _endTime        End of timestamp range as an epoch\\n      * @param _currentTime    Block.timestamp\\n      * @return Average balance of user held between epoch timestamps start and end\\n    */\\n  function getAverageBalanceBetween(\\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n    AccountDetails memory _accountDetails,\\n    uint32 _startTime,\\n    uint32 _endTime,\\n    uint32 _currentTime\\n  ) internal view returns (uint256) {\\n    uint32 endTime = _endTime > _currentTime ? _currentTime : _endTime;\\n\\n    return _getAverageBalanceBetween(_twabs, _accountDetails, _startTime, endTime, _currentTime);\\n  }\\n\\n  /// @notice Retrieves the oldest TWAB\\n  /// @param _twabs The storage array of twabs\\n  /// @param _accountDetails The TWAB account details\\n  /// @return index The index of the oldest TWAB in the twabs array\\n  /// @return twab The oldest TWAB\\n  function oldestTwab(\\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n    AccountDetails memory _accountDetails\\n  ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n    index = _accountDetails.nextTwabIndex;\\n    twab = _twabs[index];\\n\\n    // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n    if (twab.timestamp == 0) {\\n      index = 0;\\n      twab = _twabs[0];\\n    }\\n  }\\n\\n  /// @notice Retrieves the newest TWAB\\n  /// @param _twabs The storage array of twabs\\n  /// @param _accountDetails The TWAB account details\\n  /// @return index The index of the newest TWAB in the twabs array\\n  /// @return twab The newest TWAB\\n  function newestTwab(\\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n    AccountDetails memory _accountDetails\\n  ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n    index = uint24(RingBufferLib.newestIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY));\\n    twab = _twabs[index];\\n  }\\n\\n  /// @notice Retrieves amount at `_targetTime` timestamp\\n  /// @param _twabs List of TWABs to search through.\\n  /// @param _accountDetails Accounts details\\n  /// @param _targetTime Timestamp at which the reserved TWAB should be for.\\n  /// @return uint256 TWAB amount at `_targetTime`.\\n  function getBalanceAt(\\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n    AccountDetails memory _accountDetails,\\n    uint32 _targetTime,\\n    uint32 _currentTime\\n  ) internal view returns (uint256) {\\n    uint32 timeToTarget = _targetTime > _currentTime ? _currentTime : _targetTime;\\n    return _getBalanceAt(_twabs, _accountDetails, timeToTarget, _currentTime);\\n  }\\n\\n  /// @notice Calculates the average balance held by a user for a given time frame.\\n  /// @param _startTime The start time of the time frame.\\n  /// @param _endTime The end time of the time frame.\\n  /// @return The average balance that the user held during the time frame.\\n  function _getAverageBalanceBetween(\\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n    AccountDetails memory _accountDetails,\\n    uint32 _startTime,\\n    uint32 _endTime,\\n    uint32 _currentTime\\n  ) private view returns (uint256) {\\n    (uint24 oldestTwabIndex, ObservationLib.Observation memory oldTwab) = oldestTwab(\\n      _twabs,\\n      _accountDetails\\n    );\\n\\n    (uint24 newestTwabIndex, ObservationLib.Observation memory newTwab) = newestTwab(\\n      _twabs,\\n      _accountDetails\\n    );\\n\\n    ObservationLib.Observation memory startTwab = _calculateTwab(\\n      _twabs,\\n      _accountDetails,\\n      newTwab,\\n      oldTwab,\\n      newestTwabIndex,\\n      oldestTwabIndex,\\n      _startTime,\\n      _currentTime\\n    );\\n\\n    ObservationLib.Observation memory endTwab = _calculateTwab(\\n      _twabs,\\n      _accountDetails,\\n      newTwab,\\n      oldTwab,\\n      newestTwabIndex,\\n      oldestTwabIndex,\\n      _endTime,\\n      _currentTime\\n    );\\n\\n    // Difference in amount / time\\n    return\\n      (endTwab.amount - startTwab.amount) /\\n      OverflowSafeComparatorLib.checkedSub(endTwab.timestamp, startTwab.timestamp, _currentTime);\\n  }\\n\\n  /** @notice Searches TWAB history and calculate the difference between amount(s)/timestamp(s) to return average balance\\n                between the Observations closes to the supplied targetTime.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _targetTime     Target timestamp to filter Observations in the ring buffer binary search\\n      * @param _currentTime    Block.timestamp\\n      * @return uint256 Time-weighted average amount between two closest observations.\\n    */\\n  function _getBalanceAt(\\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n    AccountDetails memory _accountDetails,\\n    uint32 _targetTime,\\n    uint32 _currentTime\\n  ) private view returns (uint256) {\\n    uint24 newestTwabIndex;\\n    ObservationLib.Observation memory afterOrAt;\\n    ObservationLib.Observation memory beforeOrAt;\\n    (newestTwabIndex, beforeOrAt) = newestTwab(_twabs, _accountDetails);\\n\\n    // If `_targetTime` is chronologically after the newest TWAB, we can simply return the current balance\\n    if (beforeOrAt.timestamp.lte(_targetTime, _currentTime)) {\\n      return _accountDetails.balance;\\n    }\\n\\n    uint24 oldestTwabIndex;\\n    // Now, set before to the oldest TWAB\\n    (oldestTwabIndex, beforeOrAt) = oldestTwab(_twabs, _accountDetails);\\n\\n    // If `_targetTime` is chronologically before the oldest TWAB, we can early return\\n    if (_targetTime.lt(beforeOrAt.timestamp, _currentTime)) {\\n      return 0;\\n    }\\n\\n    // Otherwise, we perform the `binarySearch`\\n    (beforeOrAt, afterOrAt) = ObservationLib.binarySearch(\\n      _twabs,\\n      newestTwabIndex,\\n      oldestTwabIndex,\\n      _targetTime,\\n      _accountDetails.cardinality,\\n      _currentTime\\n    );\\n\\n    // Sum the difference in amounts and divide by the difference in timestamps.\\n    // The time-weighted average balance uses time measured between two epoch timestamps as\\n    // a constaint on the measurement when calculating the time weighted average balance.\\n    return\\n      (afterOrAt.amount - beforeOrAt.amount) /\\n      OverflowSafeComparatorLib.checkedSub(afterOrAt.timestamp, beforeOrAt.timestamp, _currentTime);\\n  }\\n\\n  /** @notice Calculates a user TWAB for a target timestamp using the historical TWAB records.\\n                The balance is linearly interpolated: amount differences / timestamp differences\\n                using the simple (after.amount - before.amount / end.timestamp - start.timestamp) formula.\\n    /** @dev    Binary search in _calculateTwab fails when searching out of bounds. Thus, before\\n                searching we exclude target timestamps out of range of newest/oldest TWAB(s).\\n                IF a search is before or after the range we \\\"extrapolate\\\" a Observation from the expected state.\\n      * @param _twabs           Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails  User AccountDetails struct loaded in memory\\n      * @param _newestTwab      Newest TWAB in history (end of ring buffer)\\n      * @param _oldestTwab      Olderst TWAB in history (end of ring buffer)\\n      * @param _newestTwabIndex Pointer in ring buffer to newest TWAB\\n      * @param _oldestTwabIndex Pointer in ring buffer to oldest TWAB\\n      * @param _targetTimestamp Epoch timestamp to calculate for time (T) in the TWAB\\n      * @param _time            Block.timestamp\\n      * @return accountDetails Updated Account.details struct\\n    */\\n  function _calculateTwab(\\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n    AccountDetails memory _accountDetails,\\n    ObservationLib.Observation memory _newestTwab,\\n    ObservationLib.Observation memory _oldestTwab,\\n    uint24 _newestTwabIndex,\\n    uint24 _oldestTwabIndex,\\n    uint32 _targetTimestamp,\\n    uint32 _time\\n  ) private view returns (ObservationLib.Observation memory) {\\n    // If `_targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\\n    if (_newestTwab.timestamp.lt(_targetTimestamp, _time)) {\\n      return _computeNextTwab(_newestTwab, _accountDetails.balance, _targetTimestamp);\\n    }\\n\\n    if (_newestTwab.timestamp == _targetTimestamp) {\\n      return _newestTwab;\\n    }\\n\\n    if (_oldestTwab.timestamp == _targetTimestamp) {\\n      return _oldestTwab;\\n    }\\n\\n    // If `_targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\\n    if (_targetTimestamp.lt(_oldestTwab.timestamp, _time)) {\\n      return ObservationLib.Observation({ amount: 0, timestamp: _targetTimestamp });\\n    }\\n\\n    // Otherwise, both timestamps must be surrounded by twabs.\\n    (\\n      ObservationLib.Observation memory beforeOrAtStart,\\n      ObservationLib.Observation memory afterOrAtStart\\n    ) = ObservationLib.binarySearch(\\n        _twabs,\\n        _newestTwabIndex,\\n        _oldestTwabIndex,\\n        _targetTimestamp,\\n        _accountDetails.cardinality,\\n        _time\\n      );\\n\\n    uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) /\\n      OverflowSafeComparatorLib.checkedSub(\\n        afterOrAtStart.timestamp,\\n        beforeOrAtStart.timestamp,\\n        _time\\n      );\\n\\n    return _computeNextTwab(beforeOrAtStart, heldBalance, _targetTimestamp);\\n  }\\n\\n  /**\\n   * @notice Calculates the next TWAB using the newestTwab and updated balance.\\n   * @dev    Storage of the TWAB obersation is managed by the calling function and not _computeNextTwab.\\n   * @param _currentTwab    Newest Observation in the Account.twabs list\\n   * @param _currentBalance User balance at time of most recent (newest) checkpoint write\\n   * @param _time           Current block.timestamp\\n   * @return TWAB Observation\\n   */\\n  function _computeNextTwab(\\n    ObservationLib.Observation memory _currentTwab,\\n    uint224 _currentBalance,\\n    uint32 _time\\n  ) private pure returns (ObservationLib.Observation memory) {\\n    // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\\n    return\\n      ObservationLib.Observation({\\n        amount: _currentTwab.amount +\\n          _currentBalance *\\n          (_time.checkedSub(_currentTwab.timestamp, _time)),\\n        timestamp: _time\\n      });\\n  }\\n\\n  /// @notice Sets a new TWAB Observation at the next available index and returns the new account details.\\n  /// @dev Note that if _currentTime is before the last observation timestamp, it appears as an overflow\\n  /// @param _twabs The twabs array to insert into\\n  /// @param _accountDetails The current account details\\n  /// @param _currentTime The current time\\n  /// @return accountDetails The new account details\\n  /// @return twab The newest twab (may or may not be brand-new)\\n  /// @return isNew Whether the newest twab was created by this call\\n  function _nextTwab(\\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n    AccountDetails memory _accountDetails,\\n    uint32 _currentTime\\n  )\\n    private\\n    returns (\\n      AccountDetails memory accountDetails,\\n      ObservationLib.Observation memory twab,\\n      bool isNew\\n    )\\n  {\\n    (, ObservationLib.Observation memory _newestTwab) = newestTwab(_twabs, _accountDetails);\\n\\n    // if we're in the same block, return\\n    if (_newestTwab.timestamp == _currentTime) {\\n      return (_accountDetails, _newestTwab, false);\\n    }\\n\\n    ObservationLib.Observation memory newTwab = _computeNextTwab(\\n      _newestTwab,\\n      _accountDetails.balance,\\n      _currentTime\\n    );\\n\\n    _twabs[_accountDetails.nextTwabIndex] = newTwab;\\n\\n    AccountDetails memory nextAccountDetails = push(_accountDetails);\\n\\n    return (nextAccountDetails, newTwab, true);\\n  }\\n\\n  /// @notice \\\"Pushes\\\" a new element on the AccountDetails ring buffer, and returns the new AccountDetails\\n  /// @param _accountDetails The account details from which to pull the cardinality and next index\\n  /// @return The new AccountDetails\\n  function push(AccountDetails memory _accountDetails)\\n    internal\\n    pure\\n    returns (AccountDetails memory)\\n  {\\n    _accountDetails.nextTwabIndex = uint24(\\n      RingBufferLib.nextIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY)\\n    );\\n\\n    // Prevent the Account specific cardinality from exceeding the MAX_CARDINALITY.\\n    // The ring buffer length is limited by MAX_CARDINALITY. IF the account.cardinality\\n    // exceeds the max cardinality, new observations would be incorrectly set or the\\n    // observation would be out of \\\"bounds\\\" of the ring buffer. Once reached the\\n    // AccountDetails.cardinality will continue to be equal to max cardinality.\\n    if (_accountDetails.cardinality < MAX_CARDINALITY) {\\n      _accountDetails.cardinality += 1;\\n    }\\n\\n    return _accountDetails;\\n  }\\n}\\n\",\"keccak256\":\"0x0d01c49d0fd4689606b9455be00860ce1247b7b4cdd075d365a028d6340c15f3\",\"license\":\"GPL-3.0\"},\"contracts/Solbase/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Gas-optimized implementation of EIP-712 domain separator and digest encoding.\\n/// @author SolDAO (https://github.com/Sol-DAO/Solbase/blob/main/src/utils/EIP712.sol)\\nabstract contract EIP712 {\\n    /// -----------------------------------------------------------------------\\n    /// Domain Constants\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev `keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")`.\\n    bytes32 internal constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    bytes32 internal immutable HASHED_DOMAIN_NAME;\\n\\n    bytes32 internal immutable HASHED_DOMAIN_VERSION;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Constructor\\n    /// -----------------------------------------------------------------------\\n\\n    constructor(string memory domainName, string memory version) {\\n        HASHED_DOMAIN_NAME = keccak256(bytes(domainName));\\n\\n        HASHED_DOMAIN_VERSION = keccak256(bytes(version));\\n\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// EIP-712 Logic\\n    /// -----------------------------------------------------------------------\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(DOMAIN_TYPEHASH, HASHED_DOMAIN_NAME, HASHED_DOMAIN_VERSION, block.chainid, address(this))\\n            );\\n    }\\n\\n    function computeDigest(bytes32 hashStruct) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), hashStruct));\\n    }\\n}\\n\",\"keccak256\":\"0xffb537f7470309a15ed68d23ceb590762ce018de65cebdae8a37e22a16c09403\",\"license\":\"MIT\"},\"contracts/Solbase/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Modern, minimalist, and gas-optimized ERC20 implementation.\\n/// @author SolDAO (https://github.com/Sol-DAO/Solbase/blob/main/src/tokens/ERC20/ERC20.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20/ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /// -----------------------------------------------------------------------\\n    /// Events\\n    /// -----------------------------------------------------------------------\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /// -----------------------------------------------------------------------\\n    /// Metadata Storage\\n    /// -----------------------------------------------------------------------\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /// -----------------------------------------------------------------------\\n    /// ERC20 Storage\\n    /// -----------------------------------------------------------------------\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Constructor\\n    /// -----------------------------------------------------------------------\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// ERC20 Logic\\n    /// -----------------------------------------------------------------------\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Internal Mint/Burn Logic\\n    /// -----------------------------------------------------------------------\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x38018638822193c49f53569b4dbc038d92025e95260277ef1346c563d05e1bd5\",\"license\":\"MIT\"},\"contracts/Solbase/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ERC20 } from \\\"./ERC20.sol\\\";\\nimport { EIP712 } from \\\"./EIP712.sol\\\";\\n\\n/// @notice ERC20 + EIP-2612 implementation.\\n/// @author SolDAO (https://github.com/Sol-DAO/Solbase/blob/main/src/tokens/ERC20/extensions/ERC20Permit.sol)\\nabstract contract ERC20Permit is ERC20, EIP712 {\\n    /// -----------------------------------------------------------------------\\n    /// Custom Errors\\n    /// -----------------------------------------------------------------------\\n\\n    error PermitExpired();\\n\\n    error InvalidSigner();\\n\\n    /// -----------------------------------------------------------------------\\n    /// EIP-2612 Constants\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev `keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")`.\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /// -----------------------------------------------------------------------\\n    /// EIP-2612 Storage\\n    /// -----------------------------------------------------------------------\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Constructor\\n    /// -----------------------------------------------------------------------\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) ERC20(_name, _symbol, _decimals) EIP712(_name, \\\"1\\\") {}\\n\\n    /// -----------------------------------------------------------------------\\n    /// EIP-2612 Logic\\n    /// -----------------------------------------------------------------------\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) revert PermitExpired();\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                computeDigest(keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            if (recoveredAddress == address(0)) revert InvalidSigner();\\n\\n            if (recoveredAddress != owner) revert InvalidSigner();\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xa86945e5e14d7ff86c608df40c87f0f64e963190cbb811fba1a83b5bbf9e3fa7\",\"license\":\"MIT\"},\"contracts/Solbase/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\n/// @author Solmate (https://github.com/Sol-DAO/Solbase/blob/main/src/utils/SafeCastLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeCastLib.sol)\\nlibrary SafeCastLib {\\n    error OverFlow();\\n\\n    function safeCastTo248(uint256 x) internal pure returns (uint248 y) {\\n        if (x >= (1 << 248)) revert OverFlow();\\n\\n        y = uint248(x);\\n    }\\n\\n    function safeCastTo224(uint256 x) internal pure returns (uint224 y) {\\n        if (x >= (1 << 224)) revert OverFlow();\\n\\n        y = uint224(x);\\n    }\\n\\n    function safeCastTo192(uint256 x) internal pure returns (uint192 y) {\\n        if (x >= (1 << 192)) revert OverFlow();\\n\\n        y = uint192(x);\\n    }\\n\\n    function safeCastTo160(uint256 x) internal pure returns (uint160 y) {\\n        if (x >= (1 << 160)) revert OverFlow();\\n\\n        y = uint160(x);\\n    }\\n\\n    function safeCastTo128(uint256 x) internal pure returns (uint128 y) {\\n        if (x >= (1 << 128)) revert OverFlow();\\n\\n        y = uint128(x);\\n    }\\n\\n    function safeCastTo96(uint256 x) internal pure returns (uint96 y) {\\n        if (x >= (1 << 96)) revert OverFlow();\\n\\n        y = uint96(x);\\n    }\\n\\n    function safeCastTo64(uint256 x) internal pure returns (uint64 y) {\\n        if (x >= (1 << 64)) revert OverFlow();\\n\\n        y = uint64(x);\\n    }\\n\\n    function safeCastTo32(uint256 x) internal pure returns (uint32 y) {\\n        if (x >= (1 << 32)) revert OverFlow();\\n\\n        y = uint32(x);\\n    }\\n\\n    function safeCastTo24(uint256 x) internal pure returns (uint24 y) {\\n        if (x >= (1 << 24)) revert OverFlow();\\n\\n        y = uint24(x);\\n    }\\n\\n    function safeCastTo16(uint256 x) internal pure returns (uint16 y) {\\n        if (x >= (1 << 16)) revert OverFlow();\\n\\n        y = uint16(x);\\n    }\\n\\n    function safeCastTo8(uint256 x) internal pure returns (uint8 y) {\\n        if (x >= (1 << 8)) revert OverFlow();\\n\\n        y = uint8(x);\\n    }\\n}\\n\",\"keccak256\":\"0xf542a49fd453a358a7866a4362222adf78d0f4caf92c2be48f0ae298e8fcfa18\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405269021e19e0c9bab24000006005557f94019368dc6b2ee4ac32010c9d0081ec29874325b541829d001d22c296b5246c60a0523480156200004357600080fd5b50604051620025ec380380620025ec833981016040819052620000669162000166565b8181601260006200007884826200025f565b5060016200008783826200025f565b5060ff16608052506200032b92505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000c157600080fd5b81516001600160401b0380821115620000de57620000de62000099565b604051601f8301601f19908116603f0116810190828211818310171562000109576200010962000099565b816040528381526020925086838588010111156200012657600080fd5b600091505b838210156200014a57858201830151818301840152908201906200012b565b838211156200015c5760008385830101525b9695505050505050565b600080604083850312156200017a57600080fd5b82516001600160401b03808211156200019257600080fd5b620001a086838701620000af565b93506020850151915080821115620001b757600080fd5b50620001c685828601620000af565b9150509250929050565b600181811c90821680620001e557607f821691505b6020821081036200020657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200025a57600081815260208120601f850160051c81016020861015620002355750805b601f850160051c820191505b81811015620002565782815560010162000241565b5050505b505050565b81516001600160401b038111156200027b576200027b62000099565b62000293816200028c8454620001d0565b846200020c565b602080601f831160018114620002cb5760008415620002b25750858301515b600019600386901b1c1916600185901b17855562000256565b600085815260208120601f198616915b82811015620002fc57888601518255948401946001909101908401620002db565b50858210156200031b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05161229e6200034e600039600050506000610265015261229e6000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806368c7fd57116100ad57806395d89b411161007157806395d89b411461038e57806398b16f36146103965780639ecb0370146103a9578063a9059cbb146103bc578063dd62ed3e146103cf57600080fd5b806368c7fd57146102ee57806370a082311461030157806385beb5f1146103215780638d22ea2a146103345780638e6d536a1461037b57600080fd5b80632d0dd686116100f45780632d0dd6861461024d578063313ce5671461026057806336bb2a38146102995780635c19a95c146102b9578063613ed6bd146102ce57600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806323b872dd146101895780632aceb5341461019c575b600080fd5b6101396103fa565b6040516101469190611be1565b60405180910390f35b61016261015d366004611c52565b610488565b6040519015158152602001610146565b61017b60025481565b604051908152602001610146565b610162610197366004611c7c565b6104f5565b6102156101aa366004611cb8565b6040805160608082018352600080835260208084018290529284018190526001600160a01b03949094168452600682529282902082519384018352546001600160d01b038116845262ffffff600160d01b8204811692850192909252600160e81b9004169082015290565b6040805182516001600160d01b0316815260208084015162ffffff908116918301919091529282015190921690820152606001610146565b61017b61025b366004611ceb565b6105e9565b6102877f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610146565b6102ac6102a7366004611d06565b610635565b6040516101469190611d44565b6102cc6102c7366004611cb8565b6106ad565b005b6102e16102dc366004611daf565b6106ba565b6040516101469190611e02565b6102e16102fc366004611e46565b6107d6565b61017b61030f366004611cb8565b60036020526000908152604090205481565b6102e161032f366004611ec7565b610808565b610363610342366004611cb8565b6001600160a01b039081166000908152630100000760205260409020541690565b6040516001600160a01b039091168152602001610146565b6102e1610389366004611f09565b6108eb565b610139610906565b61017b6103a4366004611f75565b610913565b61017b6103b7366004611fb8565b610984565b6101626103ca366004611c52565b6109eb565b61017b6103dd366004611feb565b600460209081526000928352604080842090915290825290205481565b6000805461040790612015565b80601f016020809104026020016040519081016040528092919081815260200182805461043390612015565b80156104805780601f1061045557610100808354040283529160200191610480565b820191906000526020600020905b81548152906001019060200180831161046357829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104e39086815260200190565b60405180910390a35060015b92915050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001981146105515761052c8382612065565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b03851660009081526003602052604081208054859290610579908490612065565b90915550506001600160a01b03808516600081815260036020526040908190208054870190555190918716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105d49087815260200190565b60405180910390a360019150505b9392505050565b604080516060810182526007546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b90910416918101919091526000906104ef906008908442610a63565b60408051808201909152600080825260208201526001600160a01b038316600090815260066020526040902060010161ffff831662ffffff811061067b5761067b61207c565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201529392505050565b6106b73382610a8f565b50565b60608160008167ffffffffffffffff8111156106d8576106d8612092565b604051908082528060200260200182016040528015610701578160200160208202803683370190505b506001600160a01b0387166000908152600660209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b900490931691830191909152929350905b848110156107c95761079a83600101838a8a8581811061077f5761077f61207c565b90506020020160208101906107949190611ceb565b42610a63565b8482815181106107ac576107ac61207c565b6020908102919091010152806107c1816120a8565b91505061075d565b5091979650505050505050565b6001600160a01b03851660009081526006602052604090206060906107fe9086868686610b42565b9695505050505050565b60608160008167ffffffffffffffff81111561082657610826612092565b60405190808252806020026020018201604052801561084f578160200160208202803683370190505b50604080516060810182526007546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b909104169181019190915290915060005b838110156108e0576108b160088389898581811061077f5761077f61207c565b8382815181106108c3576108c361207c565b6020908102919091010152806108d8816120a8565b915050610891565b509095945050505050565b60606108fb600786868686610b42565b90505b949350505050565b6001805461040790612015565b6001600160a01b0383166000908152600660209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b9004909316918301919091529061097b906001830190868642610ccc565b95945050505050565b6001600160a01b0382166000908152600660209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b900490931691830191909152906108fe9060018301908542610a63565b33600090815260036020526040812080548391908390610a0c908490612065565b90915550506001600160a01b038316600081815260036020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104e39086815260200190565b6000808263ffffffff168463ffffffff1611610a7f5783610a81565b825b90506107fe86868386610d04565b6001600160a01b0380831660009081526301000007602052604081205490919081169083168103610ac05750505050565b6001600160a01b03848116600090815263010000076020526040902080546001600160a01b031916918516919091179055610afc818484610e21565b826001600160a01b0316846001600160a01b03167f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea260405160405180910390a350505050565b606083828114610ba55760405162461bcd60e51b815260206004820152602360248201527f5469636b65742f73746172742d656e642d74696d65732d6c656e6774682d6d616044820152620e8c6d60eb1b60648201526084015b60405180910390fd5b6040805160608101825288546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b909104169181019190915260008267ffffffffffffffff811115610bfa57610bfa612092565b604051908082528060200260200182016040528015610c23578160200160208202803683370190505b5090504260005b84811015610cbd57610c8e8b600101858c8c85818110610c4c57610c4c61207c565b9050602002016020810190610c619190611ceb565b8b8b86818110610c7357610c7361207c565b9050602002016020810190610c889190611ceb565b86610ccc565b838281518110610ca057610ca061207c565b602090810291909101015280610cb5816120a8565b915050610c2a565b50909998505050505050505050565b6000808263ffffffff168463ffffffff1611610ce85783610cea565b825b9050610cf98787878487610e86565b979650505050505050565b600080610d21604080518082019091526000808252602082015290565b6040805180820190915260008082526020820152610d3f8888610f22565b60208101519194509150610d609063ffffffff9081169088908890610fa716565b15610d7b57505084516001600160d01b031691506108fe9050565b6000610d878989611078565b6020810151909350909150610da89063ffffffff808a16919089906110fd16565b15610dba5760009450505050506108fe565b610dcc8985838a8c604001518b6111cc565b8094508193505050610de7836020015183602001518861139d565b63ffffffff1682600001518460000151610e0191906120c1565b610e0b91906120ff565b6001600160e01b03169998505050505050505050565b6001600160a01b03831615610e5157610e3a8382611467565b6001600160a01b038216610e5157610e518161157b565b6001600160a01b03821615610e8157610e6a8282611655565b6001600160a01b038316610e8157610e818161168f565b505050565b6000806000610e958888611078565b91509150600080610ea68a8a610f22565b915091506000610ebc8b8b8487878a8f8e6116ad565b90506000610ed08c8c8588888b8f8f6116ad565b9050610ee5816020015183602001518a61139d565b63ffffffff1682600001518260000151610eff91906120c1565b610f0991906120ff565b6001600160e01b03169c9b505050505050505050505050565b6000610f3e604080518082019091526000808252602082015290565b610f56836020015162ffffff1662ffffff80166117f5565b9150838262ffffff1662ffffff8110610f7157610f7161207c565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820152919491935090915050565b60008163ffffffff168463ffffffff1611158015610fd157508163ffffffff168363ffffffff1611155b15610fed578263ffffffff168463ffffffff16111590506105e2565b60008263ffffffff168563ffffffff161161101c5761101763ffffffff8616640100000000612125565b611024565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff161161105c5761105763ffffffff8616640100000000612125565b611064565b8463ffffffff165b64ffffffffff169091111595945050505050565b6000611094604080518082019091526000808252602082015290565b82602001519150838262ffffff1662ffffff81106110b4576110b461207c565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff16602082018190529091506000036110f657600091508382610f71565b9250929050565b60008163ffffffff168463ffffffff161115801561112757508163ffffffff168363ffffffff1611155b15611142578263ffffffff168463ffffffff161090506105e2565b60008263ffffffff168563ffffffff16116111715761116c63ffffffff8616640100000000612125565b611179565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116111b1576111ac63ffffffff8616640100000000612125565b6111b9565b8463ffffffff165b64ffffffffff1690911095945050505050565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260008662ffffff1690506000818962ffffff1610611217578862ffffff16611232565b600161122862ffffff88168461214e565b6112329190612065565b905060005b6002611243838561214e565b61124d9190612166565b90508a61125f828962ffffff16611822565b62ffffff1662ffffff81106112765761127661207c565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820181905290955060008190036112c2576112ba82600161214e565b935050611237565b8b6112d2838a62ffffff1661182e565b62ffffff1662ffffff81106112e9576112e961207c565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b9091048116602083015290955060009061132e90838116908c908b90610fa716565b905080801561135757506113578660200151898c63ffffffff16610fa79092919063ffffffff16565b1561136357505061138f565b8061137a57611373600184612065565b9350611388565b61138583600161214e565b94505b5050611237565b505050965096945050505050565b60008163ffffffff168463ffffffff16111580156113c757508163ffffffff168363ffffffff1611155b156113dd576113d6838561217a565b90506105e2565b60008263ffffffff168563ffffffff161161140c5761140763ffffffff8616640100000000612125565b611414565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff161161144c5761144763ffffffff8616640100000000612125565b611454565b8463ffffffff165b64ffffffffff1690506107fe8183612065565b80600003611473575050565b6001600160a01b03821660009081526006602052604081209080806114d78461149b8761183e565b6040518060400160405280601b81526020017f5469636b65742f747761622d6275726e2d6c742d62616c616e63650000000000815250426118ab565b82518754602085015160408601516001600160d01b039093166001600160e81b031990921691909117600160d01b62ffffff92831602176001600160e81b0316600160e81b919092160217875591945092509050801561157357856001600160a01b03167fdd3e7cd3a260a292b0b3306b2ca62f30a7349619a9d09c58109318774c6b627d8360405161156a9190611d44565b60405180910390a25b505050505050565b806000036115865750565b60008060006115b860076115998661183e565b6040518060600160405280602c815260200161223d602c9139426118ab565b825160078054602086015160408701516001600160d01b039094166001600160e81b031990921691909117600160d01b62ffffff92831602176001600160e81b0316600160e81b919093160291909117905591945092509050801561164f577f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c826040516116469190611d44565b60405180910390a15b50505050565b80600003611661575050565b6001600160a01b03821660009081526006602052604081209080806114d7846116898761183e565b4261196f565b8060000361169a5750565b60008060006115b860076116898661183e565b60408051808201909152600080825260208201526116e08383896020015163ffffffff166110fd9092919063ffffffff16565b15611704576116fd8789600001516001600160d01b031685611a18565b90506117e9565b8263ffffffff16876020015163ffffffff16036117225750856117e9565b8263ffffffff16866020015163ffffffff16036117405750846117e9565b61175f8660200151838563ffffffff166110fd9092919063ffffffff16565b156117845750604080518082019091526000815263ffffffff831660208201526117e9565b6000806117998b8888888e60400151896111cc565b9150915060006117b2826020015184602001518761139d565b63ffffffff16836000015183600001516117cc91906120c1565b6117d691906120ff565b90506117e3838288611a18565b93505050505b98975050505050505050565b600081600003611807575060006104ef565b6105e26001611816848661214e565b6118209190612065565b835b60006105e28284612197565b60006105e261182084600161214e565b60006001600160d01b038211156118a75760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663038206269747360c81b6064820152608401610b9c565b5090565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825287546001600160d01b0380821680845262ffffff600160d01b840481166020860152600160e81b90930490921693830193909352600092879190891611156119415760405162461bcd60e51b8152600401610b9c9190611be1565b50611950886001018287611a93565b8251999099036001600160d01b03168252909990985095505050505050565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825286546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b90910416918101919091526000906119eb600188018287611a93565b83519296509094509250611a009087906121ab565b6001600160d01b031684525091959094509092509050565b60408051808201909152600080825260208201526040518060400160405280611a568660200151858663ffffffff1661139d9092919063ffffffff16565b611a669063ffffffff16866121cd565b8651611a7291906121fc565b6001600160e01b031681526020018363ffffffff1681525090509392505050565b60408051606081018252600080825260208201819052918101919091526040805180820190915260008082526020820152600080611ad18787610f22565b9150508463ffffffff16816020015163ffffffff1603611af957859350915060009050611b70565b6000611b138288600001516001600160d01b031688611a18565b90508088886020015162ffffff1662ffffff8110611b3357611b3361207c565b825160209093015163ffffffff16600160e01b026001600160e01b03909316929092179101556000611b6488611b79565b95509093506001925050505b93509350939050565b60408051606081018252600080825260208083018290529282015290820151611ba99062ffffff9081169061182e565b62ffffff90811660208401526040830151811610156118a757600182604001818151611bd5919061221e565b62ffffff169052505090565b600060208083528351808285015260005b81811015611c0e57858101830151858201604001528201611bf2565b81811115611c20576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114611c4d57600080fd5b919050565b60008060408385031215611c6557600080fd5b611c6e83611c36565b946020939093013593505050565b600080600060608486031215611c9157600080fd5b611c9a84611c36565b9250611ca860208501611c36565b9150604084013590509250925092565b600060208284031215611cca57600080fd5b6105e282611c36565b803567ffffffffffffffff81168114611c4d57600080fd5b600060208284031215611cfd57600080fd5b6105e282611cd3565b60008060408385031215611d1957600080fd5b611d2283611c36565b9150602083013561ffff81168114611d3957600080fd5b809150509250929050565b81516001600160e01b0316815260209182015163ffffffff169181019190915260400190565b60008083601f840112611d7c57600080fd5b50813567ffffffffffffffff811115611d9457600080fd5b6020830191508360208260051b85010111156110f657600080fd5b600080600060408486031215611dc457600080fd5b611dcd84611c36565b9250602084013567ffffffffffffffff811115611de957600080fd5b611df586828701611d6a565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b81811015611e3a57835183529284019291840191600101611e1e565b50909695505050505050565b600080600080600060608688031215611e5e57600080fd5b611e6786611c36565b9450602086013567ffffffffffffffff80821115611e8457600080fd5b611e9089838a01611d6a565b90965094506040880135915080821115611ea957600080fd5b50611eb688828901611d6a565b969995985093965092949392505050565b60008060208385031215611eda57600080fd5b823567ffffffffffffffff811115611ef157600080fd5b611efd85828601611d6a565b90969095509350505050565b60008060008060408587031215611f1f57600080fd5b843567ffffffffffffffff80821115611f3757600080fd5b611f4388838901611d6a565b90965094506020870135915080821115611f5c57600080fd5b50611f6987828801611d6a565b95989497509550505050565b600080600060608486031215611f8a57600080fd5b611f9384611c36565b9250611fa160208501611cd3565b9150611faf60408501611cd3565b90509250925092565b60008060408385031215611fcb57600080fd5b611fd483611c36565b9150611fe260208401611cd3565b90509250929050565b60008060408385031215611ffe57600080fd5b61200783611c36565b9150611fe260208401611c36565b600181811c9082168061202957607f821691505b60208210810361204957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156120775761207761204f565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000600182016120ba576120ba61204f565b5060010190565b60006001600160e01b03838116908316818110156120e1576120e161204f565b039392505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160e01b0383811680612119576121196120e9565b92169190910492915050565b600064ffffffffff8083168185168083038211156121455761214561204f565b01949350505050565b600082198211156121615761216161204f565b500190565b600082612175576121756120e9565b500490565b600063ffffffff838116908316818110156120e1576120e161204f565b6000826121a6576121a66120e9565b500690565b60006001600160d01b038281168482168083038211156121455761214561204f565b60006001600160e01b03828116848216811515828404821116156121f3576121f361204f565b02949350505050565b60006001600160e01b038281168482168083038211156121455761214561204f565b600062ffffff8083168185168083038211156121455761214561204f56fe5469636b65742f6275726e2d616d6f756e742d657863656564732d746f74616c2d737570706c792d74776162a2646970667358221220393e9ef9f21dfef63dc99f72b071a6758a1a5d3e64107144600687a08f9dbd5e64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806368c7fd57116100ad57806395d89b411161007157806395d89b411461038e57806398b16f36146103965780639ecb0370146103a9578063a9059cbb146103bc578063dd62ed3e146103cf57600080fd5b806368c7fd57146102ee57806370a082311461030157806385beb5f1146103215780638d22ea2a146103345780638e6d536a1461037b57600080fd5b80632d0dd686116100f45780632d0dd6861461024d578063313ce5671461026057806336bb2a38146102995780635c19a95c146102b9578063613ed6bd146102ce57600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806323b872dd146101895780632aceb5341461019c575b600080fd5b6101396103fa565b6040516101469190611be1565b60405180910390f35b61016261015d366004611c52565b610488565b6040519015158152602001610146565b61017b60025481565b604051908152602001610146565b610162610197366004611c7c565b6104f5565b6102156101aa366004611cb8565b6040805160608082018352600080835260208084018290529284018190526001600160a01b03949094168452600682529282902082519384018352546001600160d01b038116845262ffffff600160d01b8204811692850192909252600160e81b9004169082015290565b6040805182516001600160d01b0316815260208084015162ffffff908116918301919091529282015190921690820152606001610146565b61017b61025b366004611ceb565b6105e9565b6102877f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610146565b6102ac6102a7366004611d06565b610635565b6040516101469190611d44565b6102cc6102c7366004611cb8565b6106ad565b005b6102e16102dc366004611daf565b6106ba565b6040516101469190611e02565b6102e16102fc366004611e46565b6107d6565b61017b61030f366004611cb8565b60036020526000908152604090205481565b6102e161032f366004611ec7565b610808565b610363610342366004611cb8565b6001600160a01b039081166000908152630100000760205260409020541690565b6040516001600160a01b039091168152602001610146565b6102e1610389366004611f09565b6108eb565b610139610906565b61017b6103a4366004611f75565b610913565b61017b6103b7366004611fb8565b610984565b6101626103ca366004611c52565b6109eb565b61017b6103dd366004611feb565b600460209081526000928352604080842090915290825290205481565b6000805461040790612015565b80601f016020809104026020016040519081016040528092919081815260200182805461043390612015565b80156104805780601f1061045557610100808354040283529160200191610480565b820191906000526020600020905b81548152906001019060200180831161046357829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104e39086815260200190565b60405180910390a35060015b92915050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001981146105515761052c8382612065565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b03851660009081526003602052604081208054859290610579908490612065565b90915550506001600160a01b03808516600081815260036020526040908190208054870190555190918716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105d49087815260200190565b60405180910390a360019150505b9392505050565b604080516060810182526007546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b90910416918101919091526000906104ef906008908442610a63565b60408051808201909152600080825260208201526001600160a01b038316600090815260066020526040902060010161ffff831662ffffff811061067b5761067b61207c565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201529392505050565b6106b73382610a8f565b50565b60608160008167ffffffffffffffff8111156106d8576106d8612092565b604051908082528060200260200182016040528015610701578160200160208202803683370190505b506001600160a01b0387166000908152600660209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b900490931691830191909152929350905b848110156107c95761079a83600101838a8a8581811061077f5761077f61207c565b90506020020160208101906107949190611ceb565b42610a63565b8482815181106107ac576107ac61207c565b6020908102919091010152806107c1816120a8565b91505061075d565b5091979650505050505050565b6001600160a01b03851660009081526006602052604090206060906107fe9086868686610b42565b9695505050505050565b60608160008167ffffffffffffffff81111561082657610826612092565b60405190808252806020026020018201604052801561084f578160200160208202803683370190505b50604080516060810182526007546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b909104169181019190915290915060005b838110156108e0576108b160088389898581811061077f5761077f61207c565b8382815181106108c3576108c361207c565b6020908102919091010152806108d8816120a8565b915050610891565b509095945050505050565b60606108fb600786868686610b42565b90505b949350505050565b6001805461040790612015565b6001600160a01b0383166000908152600660209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b9004909316918301919091529061097b906001830190868642610ccc565b95945050505050565b6001600160a01b0382166000908152600660209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b900490931691830191909152906108fe9060018301908542610a63565b33600090815260036020526040812080548391908390610a0c908490612065565b90915550506001600160a01b038316600081815260036020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104e39086815260200190565b6000808263ffffffff168463ffffffff1611610a7f5783610a81565b825b90506107fe86868386610d04565b6001600160a01b0380831660009081526301000007602052604081205490919081169083168103610ac05750505050565b6001600160a01b03848116600090815263010000076020526040902080546001600160a01b031916918516919091179055610afc818484610e21565b826001600160a01b0316846001600160a01b03167f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea260405160405180910390a350505050565b606083828114610ba55760405162461bcd60e51b815260206004820152602360248201527f5469636b65742f73746172742d656e642d74696d65732d6c656e6774682d6d616044820152620e8c6d60eb1b60648201526084015b60405180910390fd5b6040805160608101825288546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b909104169181019190915260008267ffffffffffffffff811115610bfa57610bfa612092565b604051908082528060200260200182016040528015610c23578160200160208202803683370190505b5090504260005b84811015610cbd57610c8e8b600101858c8c85818110610c4c57610c4c61207c565b9050602002016020810190610c619190611ceb565b8b8b86818110610c7357610c7361207c565b9050602002016020810190610c889190611ceb565b86610ccc565b838281518110610ca057610ca061207c565b602090810291909101015280610cb5816120a8565b915050610c2a565b50909998505050505050505050565b6000808263ffffffff168463ffffffff1611610ce85783610cea565b825b9050610cf98787878487610e86565b979650505050505050565b600080610d21604080518082019091526000808252602082015290565b6040805180820190915260008082526020820152610d3f8888610f22565b60208101519194509150610d609063ffffffff9081169088908890610fa716565b15610d7b57505084516001600160d01b031691506108fe9050565b6000610d878989611078565b6020810151909350909150610da89063ffffffff808a16919089906110fd16565b15610dba5760009450505050506108fe565b610dcc8985838a8c604001518b6111cc565b8094508193505050610de7836020015183602001518861139d565b63ffffffff1682600001518460000151610e0191906120c1565b610e0b91906120ff565b6001600160e01b03169998505050505050505050565b6001600160a01b03831615610e5157610e3a8382611467565b6001600160a01b038216610e5157610e518161157b565b6001600160a01b03821615610e8157610e6a8282611655565b6001600160a01b038316610e8157610e818161168f565b505050565b6000806000610e958888611078565b91509150600080610ea68a8a610f22565b915091506000610ebc8b8b8487878a8f8e6116ad565b90506000610ed08c8c8588888b8f8f6116ad565b9050610ee5816020015183602001518a61139d565b63ffffffff1682600001518260000151610eff91906120c1565b610f0991906120ff565b6001600160e01b03169c9b505050505050505050505050565b6000610f3e604080518082019091526000808252602082015290565b610f56836020015162ffffff1662ffffff80166117f5565b9150838262ffffff1662ffffff8110610f7157610f7161207c565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820152919491935090915050565b60008163ffffffff168463ffffffff1611158015610fd157508163ffffffff168363ffffffff1611155b15610fed578263ffffffff168463ffffffff16111590506105e2565b60008263ffffffff168563ffffffff161161101c5761101763ffffffff8616640100000000612125565b611024565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff161161105c5761105763ffffffff8616640100000000612125565b611064565b8463ffffffff165b64ffffffffff169091111595945050505050565b6000611094604080518082019091526000808252602082015290565b82602001519150838262ffffff1662ffffff81106110b4576110b461207c565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff16602082018190529091506000036110f657600091508382610f71565b9250929050565b60008163ffffffff168463ffffffff161115801561112757508163ffffffff168363ffffffff1611155b15611142578263ffffffff168463ffffffff161090506105e2565b60008263ffffffff168563ffffffff16116111715761116c63ffffffff8616640100000000612125565b611179565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116111b1576111ac63ffffffff8616640100000000612125565b6111b9565b8463ffffffff165b64ffffffffff1690911095945050505050565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260008662ffffff1690506000818962ffffff1610611217578862ffffff16611232565b600161122862ffffff88168461214e565b6112329190612065565b905060005b6002611243838561214e565b61124d9190612166565b90508a61125f828962ffffff16611822565b62ffffff1662ffffff81106112765761127661207c565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820181905290955060008190036112c2576112ba82600161214e565b935050611237565b8b6112d2838a62ffffff1661182e565b62ffffff1662ffffff81106112e9576112e961207c565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b9091048116602083015290955060009061132e90838116908c908b90610fa716565b905080801561135757506113578660200151898c63ffffffff16610fa79092919063ffffffff16565b1561136357505061138f565b8061137a57611373600184612065565b9350611388565b61138583600161214e565b94505b5050611237565b505050965096945050505050565b60008163ffffffff168463ffffffff16111580156113c757508163ffffffff168363ffffffff1611155b156113dd576113d6838561217a565b90506105e2565b60008263ffffffff168563ffffffff161161140c5761140763ffffffff8616640100000000612125565b611414565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff161161144c5761144763ffffffff8616640100000000612125565b611454565b8463ffffffff165b64ffffffffff1690506107fe8183612065565b80600003611473575050565b6001600160a01b03821660009081526006602052604081209080806114d78461149b8761183e565b6040518060400160405280601b81526020017f5469636b65742f747761622d6275726e2d6c742d62616c616e63650000000000815250426118ab565b82518754602085015160408601516001600160d01b039093166001600160e81b031990921691909117600160d01b62ffffff92831602176001600160e81b0316600160e81b919092160217875591945092509050801561157357856001600160a01b03167fdd3e7cd3a260a292b0b3306b2ca62f30a7349619a9d09c58109318774c6b627d8360405161156a9190611d44565b60405180910390a25b505050505050565b806000036115865750565b60008060006115b860076115998661183e565b6040518060600160405280602c815260200161223d602c9139426118ab565b825160078054602086015160408701516001600160d01b039094166001600160e81b031990921691909117600160d01b62ffffff92831602176001600160e81b0316600160e81b919093160291909117905591945092509050801561164f577f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c826040516116469190611d44565b60405180910390a15b50505050565b80600003611661575050565b6001600160a01b03821660009081526006602052604081209080806114d7846116898761183e565b4261196f565b8060000361169a5750565b60008060006115b860076116898661183e565b60408051808201909152600080825260208201526116e08383896020015163ffffffff166110fd9092919063ffffffff16565b15611704576116fd8789600001516001600160d01b031685611a18565b90506117e9565b8263ffffffff16876020015163ffffffff16036117225750856117e9565b8263ffffffff16866020015163ffffffff16036117405750846117e9565b61175f8660200151838563ffffffff166110fd9092919063ffffffff16565b156117845750604080518082019091526000815263ffffffff831660208201526117e9565b6000806117998b8888888e60400151896111cc565b9150915060006117b2826020015184602001518761139d565b63ffffffff16836000015183600001516117cc91906120c1565b6117d691906120ff565b90506117e3838288611a18565b93505050505b98975050505050505050565b600081600003611807575060006104ef565b6105e26001611816848661214e565b6118209190612065565b835b60006105e28284612197565b60006105e261182084600161214e565b60006001600160d01b038211156118a75760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663038206269747360c81b6064820152608401610b9c565b5090565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825287546001600160d01b0380821680845262ffffff600160d01b840481166020860152600160e81b90930490921693830193909352600092879190891611156119415760405162461bcd60e51b8152600401610b9c9190611be1565b50611950886001018287611a93565b8251999099036001600160d01b03168252909990985095505050505050565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825286546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b90910416918101919091526000906119eb600188018287611a93565b83519296509094509250611a009087906121ab565b6001600160d01b031684525091959094509092509050565b60408051808201909152600080825260208201526040518060400160405280611a568660200151858663ffffffff1661139d9092919063ffffffff16565b611a669063ffffffff16866121cd565b8651611a7291906121fc565b6001600160e01b031681526020018363ffffffff1681525090509392505050565b60408051606081018252600080825260208201819052918101919091526040805180820190915260008082526020820152600080611ad18787610f22565b9150508463ffffffff16816020015163ffffffff1603611af957859350915060009050611b70565b6000611b138288600001516001600160d01b031688611a18565b90508088886020015162ffffff1662ffffff8110611b3357611b3361207c565b825160209093015163ffffffff16600160e01b026001600160e01b03909316929092179101556000611b6488611b79565b95509093506001925050505b93509350939050565b60408051606081018252600080825260208083018290529282015290820151611ba99062ffffff9081169061182e565b62ffffff90811660208401526040830151811610156118a757600182604001818151611bd5919061221e565b62ffffff169052505090565b600060208083528351808285015260005b81811015611c0e57858101830151858201604001528201611bf2565b81811115611c20576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114611c4d57600080fd5b919050565b60008060408385031215611c6557600080fd5b611c6e83611c36565b946020939093013593505050565b600080600060608486031215611c9157600080fd5b611c9a84611c36565b9250611ca860208501611c36565b9150604084013590509250925092565b600060208284031215611cca57600080fd5b6105e282611c36565b803567ffffffffffffffff81168114611c4d57600080fd5b600060208284031215611cfd57600080fd5b6105e282611cd3565b60008060408385031215611d1957600080fd5b611d2283611c36565b9150602083013561ffff81168114611d3957600080fd5b809150509250929050565b81516001600160e01b0316815260209182015163ffffffff169181019190915260400190565b60008083601f840112611d7c57600080fd5b50813567ffffffffffffffff811115611d9457600080fd5b6020830191508360208260051b85010111156110f657600080fd5b600080600060408486031215611dc457600080fd5b611dcd84611c36565b9250602084013567ffffffffffffffff811115611de957600080fd5b611df586828701611d6a565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b81811015611e3a57835183529284019291840191600101611e1e565b50909695505050505050565b600080600080600060608688031215611e5e57600080fd5b611e6786611c36565b9450602086013567ffffffffffffffff80821115611e8457600080fd5b611e9089838a01611d6a565b90965094506040880135915080821115611ea957600080fd5b50611eb688828901611d6a565b969995985093965092949392505050565b60008060208385031215611eda57600080fd5b823567ffffffffffffffff811115611ef157600080fd5b611efd85828601611d6a565b90969095509350505050565b60008060008060408587031215611f1f57600080fd5b843567ffffffffffffffff80821115611f3757600080fd5b611f4388838901611d6a565b90965094506020870135915080821115611f5c57600080fd5b50611f6987828801611d6a565b95989497509550505050565b600080600060608486031215611f8a57600080fd5b611f9384611c36565b9250611fa160208501611cd3565b9150611faf60408501611cd3565b90509250925092565b60008060408385031215611fcb57600080fd5b611fd483611c36565b9150611fe260208401611cd3565b90509250929050565b60008060408385031215611ffe57600080fd5b61200783611c36565b9150611fe260208401611c36565b600181811c9082168061202957607f821691505b60208210810361204957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156120775761207761204f565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000600182016120ba576120ba61204f565b5060010190565b60006001600160e01b03838116908316818110156120e1576120e161204f565b039392505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160e01b0383811680612119576121196120e9565b92169190910492915050565b600064ffffffffff8083168185168083038211156121455761214561204f565b01949350505050565b600082198211156121615761216161204f565b500190565b600082612175576121756120e9565b500490565b600063ffffffff838116908316818110156120e1576120e161204f565b6000826121a6576121a66120e9565b500690565b60006001600160d01b038281168482168083038211156121455761214561204f565b60006001600160e01b03828116848216811515828404821116156121f3576121f361204f565b02949350505050565b60006001600160e01b038281168482168083038211156121455761214561204f565b600062ffffff8083168185168083038211156121455761214561204f56fe5469636b65742f6275726e2d616d6f756e742d657863656564732d746f74616c2d737570706c792d74776162a2646970667358221220393e9ef9f21dfef63dc99f72b071a6758a1a5d3e64107144600687a08f9dbd5e64736f6c634300080f0033",
  "devdoc": {
    "author": "Kames Geraghty",
    "events": {
      "Delegated(address,address)": {
        "params": {
          "delegate": "Address of the delegate.",
          "delegator": "Address of the delegator."
        }
      },
      "NewTotalSupplyTwab((uint224,uint32))": {
        "params": {
          "newTotalSupplyTwab": "Updated TWAB of tickets total supply after a successful total supply TWAB recording."
        }
      },
      "NewUserTwab(address,(uint224,uint32))": {
        "params": {
          "delegate": "The recipient of the ticket power (may be the same as the user).",
          "newTwab": "Updated TWAB of a ticket holder after a successful TWAB recording."
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "title": "ERC20TWAB",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Delegated(address,address)": {
        "notice": "Emitted when TWAB balance has been delegated to another user."
      },
      "NewTotalSupplyTwab((uint224,uint32))": {
        "notice": "Emitted when a new total supply TWAB has been recorded."
      },
      "NewUserTwab(address,(uint224,uint32))": {
        "notice": "Emitted when a new TWAB has been recorded."
      },
      "Transfer(address,address,uint256)": {
        "notice": "----------------------------------------------------------------------- Events -----------------------------------------------------------------------"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "----------------------------------------------------------------------- ERC20 Logic -----------------------------------------------------------------------"
      },
      "name()": {
        "notice": "----------------------------------------------------------------------- Metadata Storage -----------------------------------------------------------------------"
      },
      "totalSupply()": {
        "notice": "----------------------------------------------------------------------- ERC20 Storage -----------------------------------------------------------------------"
      }
    },
    "notice": "ERC20TWAB is an experiment. Implementing time-weighted average balances on more ERC20 tokens. Credit: PoolTogether Inc (Brendan Asselstine)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11128,
        "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 11130,
        "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 11135,
        "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11139,
        "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
        "label": "balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11145,
        "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
        "label": "allowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7909,
        "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
        "label": "distribution",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7920,
        "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
        "label": "userTwabs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Account)10216_storage)"
      },
      {
        "astId": 7924,
        "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
        "label": "totalSupplyTwab",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Account)10216_storage"
      },
      {
        "astId": 7929,
        "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
        "label": "delegates",
        "offset": 0,
        "slot": "16777223",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Observation)9788_storage)16777215_storage": {
        "base": "t_struct(Observation)9788_storage",
        "encoding": "inplace",
        "label": "struct ObservationLib.Observation[16777215]",
        "numberOfBytes": "536870880"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Account)10216_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TwabLib.Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)10216_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Account)10216_storage": {
        "encoding": "inplace",
        "label": "struct TwabLib.Account",
        "members": [
          {
            "astId": 10210,
            "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
            "label": "details",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AccountDetails)10207_storage"
          },
          {
            "astId": 10215,
            "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
            "label": "twabs",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Observation)9788_storage)16777215_storage"
          }
        ],
        "numberOfBytes": "536870912"
      },
      "t_struct(AccountDetails)10207_storage": {
        "encoding": "inplace",
        "label": "struct TwabLib.AccountDetails",
        "members": [
          {
            "astId": 10202,
            "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint208"
          },
          {
            "astId": 10204,
            "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
            "label": "nextTwabIndex",
            "offset": 26,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 10206,
            "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
            "label": "cardinality",
            "offset": 29,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Observation)9788_storage": {
        "encoding": "inplace",
        "label": "struct ObservationLib.Observation",
        "members": [
          {
            "astId": 9785,
            "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 9787,
            "contract": "contracts/PoolTogether/ERC20TWAB.sol:ERC20TWAB",
            "label": "timestamp",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint208": {
        "encoding": "inplace",
        "label": "uint208",
        "numberOfBytes": "26"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}